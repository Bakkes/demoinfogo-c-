// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Cstrike15Gcmessages {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_GameServerPing__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GameServerPing, global::GameServerPing.Builder> internal__static_GameServerPing__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_DetailedSearchStatistic__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::DetailedSearchStatistic, global::DetailedSearchStatistic.Builder> internal__static_DetailedSearchStatistic__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TournamentPlayer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TournamentPlayer, global::TournamentPlayer.Builder> internal__static_TournamentPlayer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TournamentTeam__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TournamentTeam, global::TournamentTeam.Builder> internal__static_TournamentTeam__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TournamentEvent__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TournamentEvent, global::TournamentEvent.Builder> internal__static_TournamentEvent__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_GlobalStatistics__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::GlobalStatistics, global::GlobalStatistics.Builder> internal__static_GlobalStatistics__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_OperationalStatisticDescription__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::OperationalStatisticDescription, global::OperationalStatisticDescription.Builder> internal__static_OperationalStatisticDescription__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_OperationalStatisticElement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::OperationalStatisticElement, global::OperationalStatisticElement.Builder> internal__static_OperationalStatisticElement__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_OperationalStatisticsPacket__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::OperationalStatisticsPacket, global::OperationalStatisticsPacket.Builder> internal__static_OperationalStatisticsPacket__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerRankingInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerRankingInfo, global::PlayerRankingInfo.Builder> internal__static_PlayerRankingInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerCommendationInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerCommendationInfo, global::PlayerCommendationInfo.Builder> internal__static_PlayerCommendationInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_PlayerMedalsInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::PlayerMedalsInfo, global::PlayerMedalsInfo.Builder> internal__static_PlayerMedalsInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_AccountActivity__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::AccountActivity, global::AccountActivity.Builder> internal__static_AccountActivity__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_TournamentMatchSetup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::TournamentMatchSetup, global::TournamentMatchSetup.Builder> internal__static_TournamentMatchSetup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_ServerHltvInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::ServerHltvInfo, global::ServerHltvInfo.Builder> internal__static_ServerHltvInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_IpAddressMask__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::IpAddressMask, global::IpAddressMask.Builder> internal__static_IpAddressMask__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate.Builder> internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingStart__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingStart, global::CMsgGCCStrike15_v2_MatchmakingStart.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingStart__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingStop__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingStop, global::CMsgGCCStrike15_v2_MatchmakingStop.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingStop__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentMatchDraft, global::CDataGCCStrike15_v2_TournamentMatchDraft.Builder> internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry, global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Builder> internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CPreMatchInfoData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CPreMatchInfoData, global::CPreMatchInfoData.Builder> internal__static_CPreMatchInfoData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CPreMatchInfoData_TeamStats__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CPreMatchInfoData.Types.TeamStats, global::CPreMatchInfoData.Types.TeamStats.Builder> internal__static_CPreMatchInfoData_TeamStats__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello, global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_AccountPrivacySettings, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Builder> internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.Builder> internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_MatchmakingLockedInMatch, global::CDataGCCStrike15_v2_MatchmakingLockedInMatch.Builder> internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.Builder> internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.Builder> internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientReportPlayer, global::CMsgGCCStrike15_v2_ClientReportPlayer.Builder> internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientCommendPlayer, global::CMsgGCCStrike15_v2_ClientCommendPlayer.Builder> internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientReportServer__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientReportServer, global::CMsgGCCStrike15_v2_ClientReportServer.Builder> internal__static_CMsgGCCStrike15_v2_ClientReportServer__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientReportResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientReportResponse, global::CMsgGCCStrike15_v2_ClientReportResponse.Builder> internal__static_CMsgGCCStrike15_v2_ClientReportResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.Builder> internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_WatchableMatchInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::WatchableMatchInfo, global::WatchableMatchInfo.Builder> internal__static_WatchableMatchInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_WatchInfoUsers, global::CMsgGCCStrike15_v2_WatchInfoUsers.Builder> internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile.Builder> internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_PlayersProfile__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayersProfile, global::CMsgGCCStrike15_v2_PlayersProfile.Builder> internal__static_CMsgGCCStrike15_v2_PlayersProfile__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification, global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.Builder> internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.Builder> internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.Builder> internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.Builder> internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CClientHeaderOverwatchEvidence__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CClientHeaderOverwatchEvidence, global::CClientHeaderOverwatchEvidence.Builder> internal__static_CClientHeaderOverwatchEvidence__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GC2ClientTextMsg, global::CMsgGCCStrike15_v2_GC2ClientTextMsg.Builder> internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Client2GCTextMsg, global::CMsgGCCStrike15_v2_Client2GCTextMsg.Builder> internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGC_ServerQuestUpdateData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGC_ServerQuestUpdateData, global::CMsgGC_ServerQuestUpdateData.Builder> internal__static_CMsgGC_ServerQuestUpdateData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Builder> internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.Builder> internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops.Builder> internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CEconItemPreviewDataBlock__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CEconItemPreviewDataBlock, global::CEconItemPreviewDataBlock.Builder> internal__static_CEconItemPreviewDataBlock__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CEconItemPreviewDataBlock_Sticker__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CEconItemPreviewDataBlock.Types.Sticker, global::CEconItemPreviewDataBlock.Types.Sticker.Builder> internal__static_CEconItemPreviewDataBlock_Sticker__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.Builder> internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgItemAcknowledged__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgItemAcknowledged, global::CMsgItemAcknowledged.Builder> internal__static_CMsgItemAcknowledged__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.Builder> internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.Builder> internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.Builder> internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.Builder> internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.Builder> internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.Builder> internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames.Builder> internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.Builder> internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_MatchInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_MatchInfo, global::CDataGCCStrike15_v2_MatchInfo.Builder> internal__static_CDataGCCStrike15_v2_MatchInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentGroupTeam, global::CDataGCCStrike15_v2_TournamentGroupTeam.Builder> internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_TournamentGroup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentGroup, global::CDataGCCStrike15_v2_TournamentGroup.Builder> internal__static_CDataGCCStrike15_v2_TournamentGroup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_TournamentSection__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentSection, global::CDataGCCStrike15_v2_TournamentSection.Builder> internal__static_CDataGCCStrike15_v2_TournamentSection__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CDataGCCStrike15_v2_TournamentInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentInfo, global::CDataGCCStrike15_v2_TournamentInfo.Builder> internal__static_CDataGCCStrike15_v2_TournamentInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_MatchList__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchList, global::CMsgGCCStrike15_v2_MatchList.Builder> internal__static_CMsgGCCStrike15_v2_MatchList__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Predictions__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Predictions, global::CMsgGCCStrike15_v2_Predictions.Builder> internal__static_CMsgGCCStrike15_v2_Predictions__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick, global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.Builder> internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CAttribute_String__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CAttribute_String, global::CAttribute_String.Builder> internal__static_CAttribute_String__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCToGCReloadVersions__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCToGCReloadVersions, global::CMsgGCToGCReloadVersions.Builder> internal__static_CMsgGCToGCReloadVersions__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgCStrike15Welcome__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgCStrike15Welcome, global::CMsgCStrike15Welcome.Builder> internal__static_CMsgCStrike15Welcome__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.Builder> internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.Builder> internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest, global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest.Builder> internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Builder> internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.Builder> internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote.Builder> internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Server2GCClientValidate, global::CMsgGCCStrike15_v2_Server2GCClientValidate.Builder> internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.Builder> internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Cstrike15Gcmessages() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "Chpjc3RyaWtlMTVfZ2NtZXNzYWdlcy5wcm90bxoTc3RlYW1tZXNzYWdlcy5w" + 
        "cm90byJiCg5HYW1lU2VydmVyUGluZxIVCg1nYW1lc2VydmVyX2lkGAEgASgE" + 
        "EgwKBHBpbmcYAiABKAUSCgoCaXAYAyABKA0SDAoEcG9ydBgEIAEoDRIRCglp" + 
        "bnN0YW5jZXMYBSABKA0iYAoXRGV0YWlsZWRTZWFyY2hTdGF0aXN0aWMSEQoJ" + 
        "Z2FtZV90eXBlGAEgASgNEhcKD3NlYXJjaF90aW1lX2F2ZxgCIAEoDRIZChFw" + 
        "bGF5ZXJzX3NlYXJjaGluZxgEIAEoDSKnAQoQVG91cm5hbWVudFBsYXllchIS" + 
        "CgphY2NvdW50X2lkGAEgASgNEhMKC3BsYXllcl9uaWNrGAIgASgJEhMKC3Bs" + 
        "YXllcl9uYW1lGAMgASgJEhIKCnBsYXllcl9kb2IYBCABKA0SEwoLcGxheWVy" + 
        "X2ZsYWcYBSABKAkSFwoPcGxheWVyX2xvY2F0aW9uGAYgASgJEhMKC3BsYXll" + 
        "cl9kZXNjGAcgASgJIn0KDlRvdXJuYW1lbnRUZWFtEg8KB3RlYW1faWQYASAB" + 
        "KAUSEAoIdGVhbV90YWcYAiABKAkSEQoJdGVhbV9mbGFnGAMgASgJEhEKCXRl" + 
        "YW1fbmFtZRgEIAEoCRIiCgdwbGF5ZXJzGAUgAygLMhEuVG91cm5hbWVudFBs" + 
        "YXllciLfAQoPVG91cm5hbWVudEV2ZW50EhAKCGV2ZW50X2lkGAEgASgFEhEK" + 
        "CWV2ZW50X3RhZxgCIAEoCRISCgpldmVudF9uYW1lGAMgASgJEhgKEGV2ZW50" + 
        "X3RpbWVfc3RhcnQYBCABKA0SFgoOZXZlbnRfdGltZV9lbmQYBSABKA0SFAoM" + 
        "ZXZlbnRfcHVibGljGAYgASgFEhYKDmV2ZW50X3N0YWdlX2lkGAcgASgFEhgK" + 
        "EGV2ZW50X3N0YWdlX25hbWUYCCABKAkSGQoRYWN0aXZlX3NlY3Rpb25faWQY" + 
        "CSABKA0ijwMKEEdsb2JhbFN0YXRpc3RpY3MSFgoOcGxheWVyc19vbmxpbmUY" + 
        "ASABKA0SFgoOc2VydmVyc19vbmxpbmUYAiABKA0SGQoRcGxheWVyc19zZWFy" + 
        "Y2hpbmcYAyABKA0SGQoRc2VydmVyc19hdmFpbGFibGUYBCABKA0SFwoPb25n" + 
        "b2luZ19tYXRjaGVzGAUgASgNEhcKD3NlYXJjaF90aW1lX2F2ZxgGIAEoDRIz" + 
        "ChFzZWFyY2hfc3RhdGlzdGljcxgHIAMoCzIYLkRldGFpbGVkU2VhcmNoU3Rh" + 
        "dGlzdGljEhUKDW1haW5fcG9zdF91cmwYCCABKAkSHgoWcmVxdWlyZWRfYXBw" + 
        "aWRfdmVyc2lvbhgJIAEoDRIaChJwcmljZXNoZWV0X3ZlcnNpb24YCiABKA0S" + 
        "HgoWdHdpdGNoX3N0cmVhbXNfdmVyc2lvbhgLIAEoDRIhChlhY3RpdmVfdG91" + 
        "cm5hbWVudF9ldmVudGlkGAwgASgNEhgKEGFjdGl2ZV9zdXJ2ZXlfaWQYDSAB" + 
        "KA0iPgofT3BlcmF0aW9uYWxTdGF0aXN0aWNEZXNjcmlwdGlvbhIMCgRuYW1l" + 
        "GAEgASgJEg0KBWlka2V5GAIgASgNIjwKG09wZXJhdGlvbmFsU3RhdGlzdGlj" + 
        "RWxlbWVudBINCgVpZGtleRgBIAEoDRIOCgZ2YWx1ZXMYAiADKAUicgobT3Bl" + 
        "cmF0aW9uYWxTdGF0aXN0aWNzUGFja2V0EhAKCHBhY2tldGlkGAEgASgFEhMK" + 
        "C21zdGltZXN0YW1wGAIgASgFEiwKBnZhbHVlcxgDIAMoCzIcLk9wZXJhdGlv" + 
        "bmFsU3RhdGlzdGljRWxlbWVudCJbChFQbGF5ZXJSYW5raW5nSW5mbxISCgph" + 
        "Y2NvdW50X2lkGAEgASgNEg8KB3JhbmtfaWQYAiABKA0SDAoEd2lucxgDIAEo" + 
        "DRITCgtyYW5rX2NoYW5nZRgEIAEoAiJYChZQbGF5ZXJDb21tZW5kYXRpb25J" + 
        "bmZvEhQKDGNtZF9mcmllbmRseRgBIAEoDRIUCgxjbWRfdGVhY2hpbmcYAiAB" + 
        "KA0SEgoKY21kX2xlYWRlchgEIAEoDSLhAQoQUGxheWVyTWVkYWxzSW5mbxIS" + 
        "CgptZWRhbF90ZWFtGAEgASgNEhQKDG1lZGFsX2NvbWJhdBgCIAEoDRIUCgxt" + 
        "ZWRhbF93ZWFwb24YAyABKA0SFAoMbWVkYWxfZ2xvYmFsGAQgASgNEhIKCm1l" + 
        "ZGFsX2FybXMYBSABKA0SHwoXbGVnYWN5X19jb2luX29wX3BheWJhY2sYBiAB" + 
        "KA0SHAoUZGlzcGxheV9pdGVtc19kZWZpZHgYByADKA0SJAocZmVhdHVyZWRf" + 
        "ZGlzcGxheV9pdGVtX2RlZmlkeBgIIAEoDSI+Cg9BY2NvdW50QWN0aXZpdHkS" + 
        "EAoIYWN0aXZpdHkYASABKA0SDAoEbW9kZRgCIAEoDRILCgNtYXAYAyABKA0i" + 
        "ZwoUVG91cm5hbWVudE1hdGNoU2V0dXASEAoIZXZlbnRfaWQYASABKAUSEgoK" + 
        "dGVhbV9pZF9jdBgCIAEoBRIRCgl0ZWFtX2lkX3QYAyABKAUSFgoOZXZlbnRf" + 
        "c3RhZ2VfaWQYBCABKAUiwAMKDlNlcnZlckhsdHZJbmZvEhMKC3R2X3VkcF9w" + 
        "b3J0GAEgASgNEhQKDHR2X3dhdGNoX2tleRgCIAEoBBIQCgh0dl9zbG90cxgD" + 
        "IAEoDRISCgp0dl9jbGllbnRzGAQgASgNEhIKCnR2X3Byb3hpZXMYBSABKA0S" + 
        "DwoHdHZfdGltZRgGIAEoDRIRCglnYW1lX21vZGUYCCABKA0SFQoNZ2FtZV9t" + 
        "YXBncm91cBgJIAEoCRIQCghnYW1lX21hcBgKIAEoCRIZChF0dl9tYXN0ZXJf" + 
        "c3RlYW1pZBgLIAEoBBIWCg50dl9sb2NhbF9zbG90cxgMIAEoDRIYChB0dl9s" + 
        "b2NhbF9jbGllbnRzGA0gASgNEhgKEHR2X2xvY2FsX3Byb3hpZXMYDiABKA0S" + 
        "FgoOdHZfcmVsYXlfc2xvdHMYDyABKA0SGAoQdHZfcmVsYXlfY2xpZW50cxgQ" + 
        "IAEoDRIYChB0dl9yZWxheV9wcm94aWVzGBEgASgNEhgKEHR2X3JlbGF5X2Fk" + 
        "ZHJlc3MYEiABKA0SFQoNdHZfcmVsYXlfcG9ydBgTIAEoDRIYChB0dl9yZWxh" + 
        "eV9zdGVhbWlkGBQgASgEIlgKDUlwQWRkcmVzc01hc2sSCQoBYRgBIAEoDRIJ" + 
        "CgFiGAIgASgNEgkKAWMYAyABKA0SCQoBZBgEIAEoDRIMCgRiaXRzGAUgASgN" + 
        "Eg0KBXRva2VuGAYgASgNIqcBCjBDTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2ht" + 
        "YWtpbmdHQ09wZXJhdGlvbmFsU3RhdHMSEAoIcGFja2V0aWQYASABKAUSMgoI" + 
        "bmFtZWtleXMYAiADKAsyIC5PcGVyYXRpb25hbFN0YXRpc3RpY0Rlc2NyaXB0" + 
        "aW9uEi0KB3BhY2tldHMYAyADKAsyHC5PcGVyYXRpb25hbFN0YXRpc3RpY3NQ" + 
        "YWNrZXQiYAouQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nR0MyU2Vy" + 
        "dmVyQ29uZmlybRINCgV0b2tlbhgBIAEoDRINCgVzdGFtcBgCIAEoDRIQCghl" + 
        "eGNoYW5nZRgDIAEoBCJvCi1DTXNnR0NDU3RyaWtlMTVfdjJfR0MyU2VydmVy" + 
        "UmVzZXJ2YXRpb25VcGRhdGUSHgoWdmlld2Vyc19leHRlcm5hbF90b3RhbBgB" + 
        "IAEoDRIeChZ2aWV3ZXJzX2V4dGVybmFsX3N0ZWFtGAIgASgNIqsBCiNDTXNn" + 
        "R0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdTdGFydBITCgthY2NvdW50X2lk" + 
        "cxgBIAMoDRIRCglnYW1lX3R5cGUYAiABKA0SEwoLdGlja2V0X2RhdGEYAyAB" + 
        "KAkSFgoOY2xpZW50X3ZlcnNpb24YBCABKA0SLwoQdG91cm5hbWVudF9tYXRj" + 
        "aBgFIAEoCzIVLlRvdXJuYW1lbnRNYXRjaFNldHVwIjUKIkNNc2dHQ0NTdHJp" + 
        "a2UxNV92Ml9NYXRjaG1ha2luZ1N0b3ASDwoHYWJhbmRvbhgBIAEoBSKGAQov" + 
        "Q01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nQ2xpZW50MlNlcnZlclBp" + 
        "bmcSKAoPZ2FtZXNlcnZlcnBpbmdzGAEgAygLMg8uR2FtZVNlcnZlclBpbmcS" + 
        "FAoMb2Zmc2V0X2luZGV4GAIgASgFEhMKC2ZpbmFsX2JhdGNoGAMgASgFIpMD" + 
        "Ci1DTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdHQzJDbGllbnRVcGRh" + 
        "dGUSEwoLbWF0Y2htYWtpbmcYASABKAUSIwobd2FpdGluZ19hY2NvdW50X2lk" + 
        "X3Nlc3Npb25zGAIgAygNEg0KBWVycm9yGAMgASgJEigKIG9uZ29pbmdtYXRj" + 
        "aF9hY2NvdW50X2lkX3Nlc3Npb25zGAYgAygNEicKDGdsb2JhbF9zdGF0cxgH" + 
        "IAEoCzIRLkdsb2JhbFN0YXRpc3RpY3MSJAocZmFpbHBpbmdfYWNjb3VudF9p" + 
        "ZF9zZXNzaW9ucxgIIAMoDRIjChtwZW5hbHR5X2FjY291bnRfaWRfc2Vzc2lv" + 
        "bnMYCSADKA0SJQodZmFpbHJlYWR5X2FjY291bnRfaWRfc2Vzc2lvbnMYCiAD" + 
        "KA0SJQoddmFjYmFubmVkX2FjY291bnRfaWRfc2Vzc2lvbnMYCyADKA0SLQoV" + 
        "c2VydmVyX2lwYWRkcmVzc19tYXNrGAwgASgLMg4uSXBBZGRyZXNzTWFzayLW" + 
        "AgooQ0RhdGFHQ0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50TWF0Y2hEcmFmdBIQ" + 
        "CghldmVudF9pZBgBIAEoBRIWCg5ldmVudF9zdGFnZV9pZBgCIAEoBRIRCgl0" + 
        "ZWFtX2lkXzAYAyABKAUSEQoJdGVhbV9pZF8xGAQgASgFEhIKCm1hcHNfY291" + 
        "bnQYBSABKAUSFAoMbWFwc19jdXJyZW50GAYgASgFEhUKDXRlYW1faWRfc3Rh" + 
        "cnQYByABKAUSFQoNdGVhbV9pZF92ZXRvMRgIIAEoBRIVCg10ZWFtX2lkX3Bp" + 
        "Y2tuGAkgASgFEj8KBmRyYWZ0cxgKIAMoCzIvLkNEYXRhR0NDU3RyaWtlMTVf" + 
        "djJfVG91cm5hbWVudE1hdGNoRHJhZnQuRW50cnkaKgoFRW50cnkSDQoFbWFw" + 
        "aWQYASABKAUSEgoKdGVhbV9pZF9jdBgCIAEoBSLtAQoRQ1ByZU1hdGNoSW5m" + 
        "b0RhdGESFwoPcHJlZGljdGlvbnNfcGN0GAEgASgFEjgKBWRyYWZ0GAQgASgL" + 
        "MikuQ0RhdGFHQ0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50TWF0Y2hEcmFmdBIr" + 
        "CgVzdGF0cxgFIAMoCzIcLkNQcmVNYXRjaEluZm9EYXRhLlRlYW1TdGF0cxpY" + 
        "CglUZWFtU3RhdHMSGQoRbWF0Y2hfaW5mb19pZHh0eHQYASABKAUSFgoObWF0" + 
        "Y2hfaW5mb190eHQYAiABKAkSGAoQbWF0Y2hfaW5mb190ZWFtcxgDIAMoCSLy" + 
        "AwouQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nR0MyU2VydmVyUmVz" + 
        "ZXJ2ZRITCgthY2NvdW50X2lkcxgBIAMoDRIRCglnYW1lX3R5cGUYAiABKA0S" + 
        "EAoIbWF0Y2hfaWQYAyABKAQSFgoOc2VydmVyX3ZlcnNpb24YBCABKA0SJAoI" + 
        "cmFua2luZ3MYBSADKAsyEi5QbGF5ZXJSYW5raW5nSW5mbxIWCg5lbmNyeXB0" + 
        "aW9uX2tleRgGIAEoBBIaChJlbmNyeXB0aW9uX2tleV9wdWIYByABKAQSEQoJ" + 
        "cGFydHlfaWRzGAggAygNEiEKCXdoaXRlbGlzdBgJIAMoCzIOLklwQWRkcmVz" + 
        "c01hc2sSGQoRdHZfbWFzdGVyX3N0ZWFtaWQYCiABKAQSKgoQdG91cm5hbWVu" + 
        "dF9ldmVudBgLIAEoCzIQLlRvdXJuYW1lbnRFdmVudBIpChB0b3VybmFtZW50" + 
        "X3RlYW1zGAwgAygLMg8uVG91cm5hbWVudFRlYW0SJgoedG91cm5hbWVudF9j" + 
        "YXN0ZXJzX2FjY291bnRfaWRzGA0gAygNEhgKEHR2X3JlbGF5X3N0ZWFtaWQY" + 
        "DiABKAQSKgoOcHJlX21hdGNoX2RhdGEYDyABKAsyEi5DUHJlTWF0Y2hJbmZv" + 
        "RGF0YSLRAwo3Q01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nU2VydmVy" + 
        "UmVzZXJ2YXRpb25SZXNwb25zZRIVCg1yZXNlcnZhdGlvbmlkGAEgASgEEkQK" + 
        "C3Jlc2VydmF0aW9uGAIgASgLMi8uQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNo" + 
        "bWFraW5nR0MyU2VydmVyUmVzZXJ2ZRILCgNtYXAYAyABKAkSGwoTZ2NfcmVz" + 
        "ZXJ2YXRpb25fc2VudBgEIAEoBBIWCg5zZXJ2ZXJfdmVyc2lvbhgFIAEoDRIg" + 
        "Cgd0dl9pbmZvGAYgASgLMg8uU2VydmVySGx0dkluZm8SHgoWcmV3YXJkX3Bs" + 
        "YXllcl9hY2NvdW50cxgHIAMoDRIcChRpZGxlX3BsYXllcl9hY2NvdW50cxgI" + 
        "IAMoDRIgChhyZXdhcmRfaXRlbV9hdHRyX2RlZl9pZHgYCSABKA0SHgoWcmV3" + 
        "YXJkX2l0ZW1fYXR0cl92YWx1ZRgKIAEoDRIjChtyZXdhcmRfaXRlbV9hdHRy" + 
        "X3Jld2FyZF9pZHgYCyABKA0SGAoQcmV3YXJkX2Ryb3BfbGlzdBgMIAEoDRIW" + 
        "Cg50b3VybmFtZW50X3RhZxgNIAEoCSLSAQouQ01zZ0dDQ1N0cmlrZTE1X3Yy" + 
        "X01hdGNobWFraW5nR0MyQ2xpZW50UmVzZXJ2ZRIQCghzZXJ2ZXJpZBgBIAEo" + 
        "BBIQCghzZXJ2ZXJpcBgCIAEoDRISCgpzZXJ2ZXJwb3J0GAMgASgNEhUKDXJl" + 
        "c2VydmF0aW9uaWQYBCABKAQSRAoLcmVzZXJ2YXRpb24YBSABKAsyLy5DTXNn" + 
        "R0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdHQzJTZXJ2ZXJSZXNlcnZlEgsK" + 
        "A21hcBgGIAEoCSL4BAouQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5n" + 
        "U2VydmVyUm91bmRTdGF0cxIVCg1yZXNlcnZhdGlvbmlkGAEgASgEEkQKC3Jl" + 
        "c2VydmF0aW9uGAIgASgLMi8uQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFr" + 
        "aW5nR0MyU2VydmVyUmVzZXJ2ZRILCgNtYXAYAyABKAkSDQoFcm91bmQYBCAB" + 
        "KAUSDQoFa2lsbHMYBSADKAUSDwoHYXNzaXN0cxgGIAMoBRIOCgZkZWF0aHMY" + 
        "ByADKAUSDgoGc2NvcmVzGAggAygFEg0KBXBpbmdzGAkgAygFEhQKDHJvdW5k" + 
        "X3Jlc3VsdBgKIAEoBRIUCgxtYXRjaF9yZXN1bHQYCyABKAUSEwoLdGVhbV9z" + 
        "Y29yZXMYDCADKAUSQAoHY29uZmlybRgNIAEoCzIvLkNNc2dHQ0NTdHJpa2Ux" + 
        "NV92Ml9NYXRjaG1ha2luZ0dDMlNlcnZlckNvbmZpcm0SGQoRcmVzZXJ2YXRp" + 
        "b25fc3RhZ2UYDiABKAUSFgoObWF0Y2hfZHVyYXRpb24YDyABKAUSEwoLZW5l" + 
        "bXlfa2lsbHMYECADKAUSFwoPZW5lbXlfaGVhZHNob3RzGBEgAygFEhEKCWVu" + 
        "ZW15XzNrcxgSIAMoBRIRCgllbmVteV80a3MYEyADKAUSEQoJZW5lbXlfNWtz" + 
        "GBQgAygFEgwKBG12cHMYFSADKAUSGAoQc3BlY3RhdG9yc19jb3VudBgWIAEo" + 
        "DRIbChNzcGVjdGF0b3JzX2NvdW50X3R2GBcgASgNEhwKFHNwZWN0YXRvcnNf" + 
        "Y291bnRfbG5rGBggASgNIokCCixDTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2ht" + 
        "YWtpbmdTZXJ2ZXJNYXRjaEVuZBI+CgVzdGF0cxgBIAEoCzIvLkNNc2dHQ0NT" + 
        "dHJpa2UxNV92Ml9NYXRjaG1ha2luZ1NlcnZlclJvdW5kU3RhdHMSQAoHY29u" + 
        "ZmlybRgDIAEoCzIvLkNNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ0dD" + 
        "MlNlcnZlckNvbmZpcm0SDwoHcmVtYXRjaBgEIAEoBBIUCgxyZXBsYXlfdG9r" + 
        "ZW4YBSABKA0SGQoRcmVwbGF5X2NsdXN0ZXJfaWQYBiABKA0SFQoNYWJvcnRl" + 
        "ZF9tYXRjaBgHIAEoCCIuCixDTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtp" + 
        "bmdDbGllbnQyR0NIZWxsbyLhBAosQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNo" + 
        "bWFraW5nR0MyQ2xpZW50SGVsbG8SEgoKYWNjb3VudF9pZBgBIAEoDRJFCgxv" + 
        "bmdvaW5nbWF0Y2gYAiABKAsyLy5DTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2ht" + 
        "YWtpbmdHQzJDbGllbnRSZXNlcnZlEicKDGdsb2JhbF9zdGF0cxgDIAEoCzIR" + 
        "Lkdsb2JhbFN0YXRpc3RpY3MSFwoPcGVuYWx0eV9zZWNvbmRzGAQgASgNEhYK" + 
        "DnBlbmFsdHlfcmVhc29uGAUgASgNEhIKCnZhY19iYW5uZWQYBiABKAUSIwoH" + 
        "cmFua2luZxgHIAEoCzISLlBsYXllclJhbmtpbmdJbmZvEi0KDGNvbW1lbmRh" + 
        "dGlvbhgIIAEoCzIXLlBsYXllckNvbW1lbmRhdGlvbkluZm8SIQoGbWVkYWxz" + 
        "GAkgASgLMhEuUGxheWVyTWVkYWxzSW5mbxIqChBteV9jdXJyZW50X2V2ZW50" + 
        "GAogASgLMhAuVG91cm5hbWVudEV2ZW50Ei8KFm15X2N1cnJlbnRfZXZlbnRf" + 
        "dGVhbXMYCyADKAsyDy5Ub3VybmFtZW50VGVhbRIoCg9teV9jdXJyZW50X3Rl" + 
        "YW0YDCABKAsyDy5Ub3VybmFtZW50VGVhbRIxChdteV9jdXJyZW50X2V2ZW50" + 
        "X3N0YWdlcxgNIAMoCzIQLlRvdXJuYW1lbnRFdmVudBITCgtzdXJ2ZXlfdm90" + 
        "ZRgOIAEoDRIiCghhY3Rpdml0eRgPIAEoCzIQLkFjY291bnRBY3Rpdml0eSKp" + 
        "AQopQ01zZ0dDQ1N0cmlrZTE1X3YyX0FjY291bnRQcml2YWN5U2V0dGluZ3MS" + 
        "RAoIc2V0dGluZ3MYASADKAsyMi5DTXNnR0NDU3RyaWtlMTVfdjJfQWNjb3Vu" + 
        "dFByaXZhY3lTZXR0aW5ncy5TZXR0aW5nGjYKB1NldHRpbmcSFAoMc2V0dGlu" + 
        "Z190eXBlGAEgASgNEhUKDXNldHRpbmdfdmFsdWUYAiABKA0ipwEKLkNNc2dH" + 
        "Q0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ0dDMkNsaWVudEFiYW5kb24SEgoK" + 
        "YWNjb3VudF9pZBgBIAEoDRJICg9hYmFuZG9uZWRfbWF0Y2gYAiABKAsyLy5D" + 
        "TXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdHQzJDbGllbnRSZXNlcnZl" + 
        "EhcKD3BlbmFsdHlfc2Vjb25kcxgDIAEoDSKXAQorQ01zZ0dDQ1N0cmlrZTE1" + 
        "X3YyX01hdGNobWFraW5nU2VydmVyMkdDS2ljaxISCgphY2NvdW50X2lkGAEg" + 
        "ASgNEkQKC3Jlc2VydmF0aW9uGAIgASgLMi8uQ01zZ0dDQ1N0cmlrZTE1X3Yy" + 
        "X01hdGNobWFraW5nR0MyU2VydmVyUmVzZXJ2ZRIOCgZyZWFzb24YAyABKA0i" + 
        "rwIKLENEYXRhR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdMb2NrZWRJbk1h" + 
        "dGNoEksKEmNsaWVudF9yZXNlcnZhdGlvbhgBIAEoCzIvLkNNc2dHQ0NTdHJp" + 
        "a2UxNV92Ml9NYXRjaG1ha2luZ0dDMkNsaWVudFJlc2VydmUSRQoMc2VydmVy" + 
        "X3N0YXRzGAIgASgLMi8uQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5n" + 
        "U2VydmVyUm91bmRTdGF0cxIbChNydGltZTMyX3NlcnZlcl9pbmZvGAMgASgN" + 
        "Ek4KFWxhc3Rfcm91bmRfc3RhdHNfdGVtcBgEIAEoCzIvLkNNc2dHQ0NTdHJp" + 
        "a2UxNV92Ml9NYXRjaG1ha2luZ1NlcnZlclJvdW5kU3RhdHMiawoxQ01zZ0dD" + 
        "Q1N0cmlrZTE1X3YyX01hdGNobWFraW5nR0MyU2VydmVyUmFua1VwZGF0ZRIk" + 
        "CghyYW5raW5ncxgBIAMoCzISLlBsYXllclJhbmtpbmdJbmZvEhAKCG1hdGNo" + 
        "X2lkGAIgASgEIkwKM0NNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ09w" + 
        "ZXJhdG9yMkdDQmxvZ1VwZGF0ZRIVCg1tYWluX3Bvc3RfdXJsGAEgASgJImoK" + 
        "M0NNc2dHQ0NTdHJpa2UxNV92Ml9TZXJ2ZXJOb3RpZmljYXRpb25Gb3JVc2Vy" + 
        "UGVuYWx0eRISCgphY2NvdW50X2lkGAEgASgNEg4KBnJlYXNvbhgCIAEoDRIP" + 
        "CgdzZWNvbmRzGAMgASgNItMBCiVDTXNnR0NDU3RyaWtlMTVfdjJfQ2xpZW50" + 
        "UmVwb3J0UGxheWVyEhIKCmFjY291bnRfaWQYASABKA0SEgoKcnB0X2FpbWJv" + 
        "dBgCIAEoDRIUCgxycHRfd2FsbGhhY2sYAyABKA0SFQoNcnB0X3NwZWVkaGFj" + 
        "axgEIAEoDRIUCgxycHRfdGVhbWhhcm0YBSABKA0SFQoNcnB0X3RleHRhYnVz" + 
        "ZRgGIAEoDRIWCg5ycHRfdm9pY2VhYnVzZRgHIAEoDRIQCghtYXRjaF9pZBgI" + 
        "IAEoBCKNAQomQ01zZ0dDQ1N0cmlrZTE1X3YyX0NsaWVudENvbW1lbmRQbGF5" + 
        "ZXISEgoKYWNjb3VudF9pZBgBIAEoDRIQCghtYXRjaF9pZBgIIAEoBBItCgxj" + 
        "b21tZW5kYXRpb24YCSABKAsyFy5QbGF5ZXJDb21tZW5kYXRpb25JbmZvEg4K" + 
        "BnRva2VucxgKIAEoDSKZAQolQ01zZ0dDQ1N0cmlrZTE1X3YyX0NsaWVudFJl" + 
        "cG9ydFNlcnZlchIUCgxycHRfcG9vcnBlcmYYASABKA0SGQoRcnB0X2FidXNp" + 
        "dmVtb2RlbHMYAiABKA0SEwoLcnB0X2JhZG1vdGQYAyABKA0SGAoQcnB0X2xp" + 
        "c3RpbmdhYnVzZRgEIAEoDRIQCghtYXRjaF9pZBgIIAEoBCKpAQonQ01zZ0dD" + 
        "Q1N0cmlrZTE1X3YyX0NsaWVudFJlcG9ydFJlc3BvbnNlEhcKD2NvbmZpcm1h" + 
        "dGlvbl9pZBgBIAEoBBISCgphY2NvdW50X2lkGAIgASgNEhEKCXNlcnZlcl9p" + 
        "cBgDIAEoDRIVCg1yZXNwb25zZV90eXBlGAQgASgNEhcKD3Jlc3BvbnNlX3Jl" + 
        "c3VsdBgFIAEoDRIOCgZ0b2tlbnMYBiABKA0ifgowQ01zZ0dDQ1N0cmlrZTE1" + 
        "X3YyX0NsaWVudFJlcXVlc3RXYXRjaEluZm9GcmllbmRzEhIKCnJlcXVlc3Rf" + 
        "aWQYASABKA0SEwoLYWNjb3VudF9pZHMYAiADKA0SEAoIc2VydmVyaWQYAyAB" + 
        "KAQSDwoHbWF0Y2hpZBgEIAEoBCKwAgoSV2F0Y2hhYmxlTWF0Y2hJbmZvEhEK" + 
        "CXNlcnZlcl9pcBgBIAEoDRIPCgd0dl9wb3J0GAIgASgNEhUKDXR2X3NwZWN0" + 
        "YXRvcnMYAyABKA0SDwoHdHZfdGltZRgEIAEoDRIZChF0dl93YXRjaF9wYXNz" + 
        "d29yZBgFIAEoDBIaChJjbF9kZWNyeXB0ZGF0YV9rZXkYBiABKAQSHgoWY2xf" + 
        "ZGVjcnlwdGRhdGFfa2V5X3B1YhgHIAEoBBIRCglnYW1lX21vZGUYCCABKA0S" + 
        "FQoNZ2FtZV9tYXBncm91cBgJIAEoCRIQCghnYW1lX21hcBgKIAEoCRIRCglz" + 
        "ZXJ2ZXJfaWQYCyABKAQSEAoIbWF0Y2hfaWQYDCABKAQSFgoOcmVzZXJ2YXRp" + 
        "b25faWQYDSABKAQimgEKIUNNc2dHQ0NTdHJpa2UxNV92Ml9XYXRjaEluZm9V" + 
        "c2VycxISCgpyZXF1ZXN0X2lkGAEgASgNEhMKC2FjY291bnRfaWRzGAIgAygN" + 
        "EjIKFXdhdGNoYWJsZV9tYXRjaF9pbmZvcxgDIAMoCzITLldhdGNoYWJsZU1h" + 
        "dGNoSW5mbxIYChBleHRlbmRlZF90aW1lb3V0GAUgASgNIlkKLkNNc2dHQ0NT" + 
        "dHJpa2UxNV92Ml9DbGllbnRSZXF1ZXN0UGxheWVyc1Byb2ZpbGUSEgoKcmVx" + 
        "dWVzdF9pZBgBIAEoDRITCgthY2NvdW50X2lkcxgCIAMoDSKAAQohQ01zZ0dD" + 
        "Q1N0cmlrZTE1X3YyX1BsYXllcnNQcm9maWxlEhIKCnJlcXVlc3RfaWQYASAB" + 
        "KA0SRwoQYWNjb3VudF9wcm9maWxlcxgCIAMoCzItLkNNc2dHQ0NTdHJpa2Ux" + 
        "NV92Ml9NYXRjaG1ha2luZ0dDMkNsaWVudEhlbGxvIosBCjFDTXNnR0NDU3Ry" + 
        "aWtlMTVfdjJfUGxheWVyRWFybmVkUmV3YXJkTm90aWZpY2F0aW9uEhIKCmFj" + 
        "Y291bnRfaWQYASABKA0SFgoOaXRlbV9kZWZfaW5kZXgYAiABKA0SFgoOYXR0" + 
        "cl9kZWZfaW5kZXgYAyABKA0SEgoKYXR0cl92YWx1ZRgEIAEoDSLUAQosQ01z" + 
        "Z0dDQ1N0cmlrZTE1X3YyX1BsYXllck92ZXJ3YXRjaENhc2VVcGRhdGUSDgoG" + 
        "Y2FzZWlkGAEgASgEEhYKDnZlcmRpY3RfbGVnYWN5GAIgASgNEhEKCXN1c3Bl" + 
        "Y3RpZBgDIAEoDRISCgpmcmFjdGlvbmlkGAQgASgNEhIKCnJwdF9haW1ib3QY" + 
        "BSABKA0SFAoMcnB0X3dhbGxoYWNrGAYgASgNEhUKDXJwdF9zcGVlZGhhY2sY" + 
        "ByABKA0SFAoMcnB0X3RlYW1oYXJtGAggASgNIv0BCjBDTXNnR0NDU3RyaWtl" + 
        "MTVfdjJfUGxheWVyT3ZlcndhdGNoQ2FzZUFzc2lnbm1lbnQSDgoGY2FzZWlk" + 
        "GAEgASgEEg8KB2Nhc2V1cmwYAiABKAkSDwoHdmVyZGljdBgDIAEoDRIRCgl0" + 
        "aW1lc3RhbXAYBCABKA0SFwoPdGhyb3R0bGVzZWNvbmRzGAUgASgNEhEKCXN1" + 
        "c3BlY3RpZBgGIAEoDRISCgpmcmFjdGlvbmlkGAcgASgNEhEKCW51bXJvdW5k" + 
        "cxgIIAEoDRIWCg5mcmFjdGlvbnJvdW5kcxgJIAEoDRIZChFzdHJlYWtjb252" + 
        "aWN0aW9ucxgKIAEoBSJQCixDTXNnR0NDU3RyaWtlMTVfdjJfUGxheWVyT3Zl" + 
        "cndhdGNoQ2FzZVN0YXR1cxIOCgZjYXNlaWQYASABKAQSEAoIc3RhdHVzaWQY" + 
        "AiABKA0iQwoeQ0NsaWVudEhlYWRlck92ZXJ3YXRjaEV2aWRlbmNlEhEKCWFj" + 
        "Y291bnRpZBgBIAEoDRIOCgZjYXNlaWQYAiABKAQiUAojQ01zZ0dDQ1N0cmlr" + 
        "ZTE1X3YyX0dDMkNsaWVudFRleHRNc2cSCgoCaWQYASABKA0SDAoEdHlwZRgC" + 
        "IAEoDRIPCgdwYXlsb2FkGAMgASgMIj8KI0NNc2dHQ0NTdHJpa2UxNV92Ml9D" + 
        "bGllbnQyR0NUZXh0TXNnEgoKAmlkGAEgASgNEgwKBGFyZ3MYAiADKAwiswIK" + 
        "HENNc2dHQ19TZXJ2ZXJRdWVzdFVwZGF0ZURhdGESSAoRcGxheWVyX3F1ZXN0" + 
        "X2RhdGEYASADKAsyLS5DTXNnR0NfU2VydmVyUXVlc3RVcGRhdGVEYXRhLlBs" + 
        "YXllclF1ZXN0RGF0YRrIAQoPUGxheWVyUXVlc3REYXRhEhoKEnF1ZXN0ZXJf" + 
        "YWNjb3VudF9pZBgBIAEoDRJUCg9xdWVzdF9pdGVtX2RhdGEYAiADKAsyOy5D" + 
        "TXNnR0NfU2VydmVyUXVlc3RVcGRhdGVEYXRhLlBsYXllclF1ZXN0RGF0YS5R" + 
        "dWVzdEl0ZW1EYXRhGkMKDVF1ZXN0SXRlbURhdGESFQoNcXVlc3RfaXRlbV9p" + 
        "ZBgBIAEoBBIbChNxdWVzdF9wb2ludHNfZWFybmVkGAIgASgFIrYBCilDTXNn" + 
        "R0NDU3RyaWtlMTVfdjJfTWF0Y2hFbmRSdW5SZXdhcmREcm9wcxJMCgpzZXJ2" + 
        "ZXJpbmZvGAMgASgLMjguQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5n" + 
        "U2VydmVyUmVzZXJ2YXRpb25SZXNwb25zZRI7ChRtYXRjaF9lbmRfcXVlc3Rf" + 
        "ZGF0YRgEIAEoCzIdLkNNc2dHQ19TZXJ2ZXJRdWVzdFVwZGF0ZURhdGEiuQMK" + 
        "GUNFY29uSXRlbVByZXZpZXdEYXRhQmxvY2sSEQoJYWNjb3VudGlkGAEgASgN" + 
        "Eg4KBml0ZW1pZBgCIAEoBBIQCghkZWZpbmRleBgDIAEoDRISCgpwYWludGlu" + 
        "ZGV4GAQgASgNEg4KBnJhcml0eRgFIAEoDRIPCgdxdWFsaXR5GAYgASgNEhEK" + 
        "CXBhaW50d2VhchgHIAEoDRIRCglwYWludHNlZWQYCCABKA0SGgoSa2lsbGVh" + 
        "dGVyc2NvcmV0eXBlGAkgASgNEhYKDmtpbGxlYXRlcnZhbHVlGAogASgNEhIK" + 
        "CmN1c3RvbW5hbWUYCyABKAkSNAoIc3RpY2tlcnMYDCADKAsyIi5DRWNvbkl0" + 
        "ZW1QcmV2aWV3RGF0YUJsb2NrLlN0aWNrZXISEQoJaW52ZW50b3J5GA0gASgN" + 
        "Eg4KBm9yaWdpbhgOIAEoDRIPCgdxdWVzdGlkGA8gASgNGloKB1N0aWNrZXIS" + 
        "DAoEc2xvdBgBIAEoDRISCgpzdGlja2VyX2lkGAIgASgNEgwKBHdlYXIYAyAB" + 
        "KAISDQoFc2NhbGUYBCABKAISEAoIcm90YXRpb24YBSABKAIiYgoyQ01zZ0dD" + 
        "Q1N0cmlrZTE1X3YyX01hdGNoRW5kUmV3YXJkRHJvcHNOb3RpZmljYXRpb24S" + 
        "LAoIaXRlbWluZm8YBiABKAsyGi5DRWNvbkl0ZW1QcmV2aWV3RGF0YUJsb2Nr" + 
        "IkQKFENNc2dJdGVtQWNrbm93bGVkZ2VkEiwKCGl0ZW1pbmZvGAEgASgLMhou" + 
        "Q0Vjb25JdGVtUHJldmlld0RhdGFCbG9jayJsCjdDTXNnR0NDU3RyaWtlMTVf" + 
        "djJfQ2xpZW50MkdDRWNvblByZXZpZXdEYXRhQmxvY2tSZXF1ZXN0Eg8KB3Bh" + 
        "cmFtX3MYASABKAQSDwoHcGFyYW1fYRgCIAEoBBIPCgdwYXJhbV9kGAMgASgE" + 
        "ImgKOENNc2dHQ0NTdHJpa2UxNV92Ml9DbGllbnQyR0NFY29uUHJldmlld0Rh" + 
        "dGFCbG9ja1Jlc3BvbnNlEiwKCGl0ZW1pbmZvGAEgASgLMhouQ0Vjb25JdGVt" + 
        "UHJldmlld0RhdGFCbG9jayJzCjlDTXNnR0NDU3RyaWtlMTVfdjJfVG91cm5h" + 
        "bWVudE1hdGNoUmV3YXJkRHJvcHNOb3RpZmljYXRpb24SEAoIbWF0Y2hfaWQY" + 
        "ASABKAQSEAoIZGVmaW5kZXgYAiABKA0SEgoKYWNjb3VudGlkcxgDIAMoDSI1" + 
        "CjNDTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2hMaXN0UmVxdWVzdEN1cnJlbnRM" + 
        "aXZlR2FtZXMiRwoyQ01zZ0dDQ1N0cmlrZTE1X3YyX01hdGNoTGlzdFJlcXVl" + 
        "c3RMaXZlR2FtZUZvclVzZXISEQoJYWNjb3VudGlkGAEgASgNIkcKMkNNc2dH" + 
        "Q0NTdHJpa2UxNV92Ml9NYXRjaExpc3RSZXF1ZXN0UmVjZW50VXNlckdhbWVz" + 
        "EhEKCWFjY291bnRpZBgBIAEoDSJFCjJDTXNnR0NDU3RyaWtlMTVfdjJfTWF0" + 
        "Y2hMaXN0UmVxdWVzdFRvdXJuYW1lbnRHYW1lcxIPCgdldmVudGlkGAEgASgF" + 
        "ImQKL0NNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaExpc3RSZXF1ZXN0RnVsbEdh" + 
        "bWVJbmZvEg8KB21hdGNoaWQYASABKAQSEQoJb3V0Y29tZWlkGAIgASgEEg0K" + 
        "BXRva2VuGAMgASgNIrkBCh1DRGF0YUdDQ1N0cmlrZTE1X3YyX01hdGNoSW5m" + 
        "bxIPCgdtYXRjaGlkGAEgASgEEhEKCW1hdGNodGltZRgCIAEoDRIvChJ3YXRj" + 
        "aGFibGVtYXRjaGluZm8YAyABKAsyEy5XYXRjaGFibGVNYXRjaEluZm8SQwoK" + 
        "cm91bmRzdGF0cxgEIAEoCzIvLkNNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1h" + 
        "a2luZ1NlcnZlclJvdW5kU3RhdHMiXgonQ0RhdGFHQ0NTdHJpa2UxNV92Ml9U" + 
        "b3VybmFtZW50R3JvdXBUZWFtEg8KB3RlYW1faWQYASABKAUSDQoFc2NvcmUY" + 
        "AiABKAUSEwoLY29ycmVjdHBpY2sYAyABKAgi+AEKI0NEYXRhR0NDU3RyaWtl" + 
        "MTVfdjJfVG91cm5hbWVudEdyb3VwEg8KB2dyb3VwaWQYASABKA0SDAoEbmFt" + 
        "ZRgCIAEoCRIMCgRkZXNjGAMgASgJEg0KBXBpY2tzGAQgASgNEjcKBXRlYW1z" + 
        "GAUgAygLMiguQ0RhdGFHQ0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50R3JvdXBU" + 
        "ZWFtEhEKCXN0YWdlX2lkcxgGIAMoBRIZChFwaWNrbG9ja3VudGlsdGltZRgH" + 
        "IAEoDRIVCg1waWNrYWJsZXRlYW1zGAggASgNEhcKD3BvaW50c19wZXJfcGlj" + 
        "axgJIAEoDSKMAQolQ0RhdGFHQ0NTdHJpa2UxNV92Ml9Ub3VybmFtZW50U2Vj" + 
        "dGlvbhIRCglzZWN0aW9uaWQYASABKA0SDAoEbmFtZRgCIAEoCRIMCgRkZXNj" + 
        "GAMgASgJEjQKBmdyb3VwcxgEIAMoCzIkLkNEYXRhR0NDU3RyaWtlMTVfdjJf" + 
        "VG91cm5hbWVudEdyb3VwIrUBCiJDRGF0YUdDQ1N0cmlrZTE1X3YyX1RvdXJu" + 
        "YW1lbnRJbmZvEjgKCHNlY3Rpb25zGAEgAygLMiYuQ0RhdGFHQ0NTdHJpa2Ux" + 
        "NV92Ml9Ub3VybmFtZW50U2VjdGlvbhIqChB0b3VybmFtZW50X2V2ZW50GAIg" + 
        "ASgLMhAuVG91cm5hbWVudEV2ZW50EikKEHRvdXJuYW1lbnRfdGVhbXMYAyAD" + 
        "KAsyDy5Ub3VybmFtZW50VGVhbSLrAQocQ01zZ0dDQ1N0cmlrZTE1X3YyX01h" + 
        "dGNoTGlzdBIUCgxtc2dyZXF1ZXN0aWQYASABKA0SEQoJYWNjb3VudGlkGAIg" + 
        "ASgNEhIKCnNlcnZlcnRpbWUYAyABKA0SLwoHbWF0Y2hlcxgEIAMoCzIeLkNE" + 
        "YXRhR0NDU3RyaWtlMTVfdjJfTWF0Y2hJbmZvEiAKB3N0cmVhbXMYBSADKAsy" + 
        "Dy5Ub3VybmFtZW50VGVhbRI7Cg50b3VybmFtZW50aW5mbxgGIAEoCzIjLkNE" + 
        "YXRhR0NDU3RyaWtlMTVfdjJfVG91cm5hbWVudEluZm8i7wEKHkNNc2dHQ0NT" + 
        "dHJpa2UxNV92Ml9QcmVkaWN0aW9ucxIQCghldmVudF9pZBgBIAEoDRJSChZn" + 
        "cm91cF9tYXRjaF90ZWFtX3BpY2tzGAIgAygLMjIuQ01zZ0dDQ1N0cmlrZTE1" + 
        "X3YyX1ByZWRpY3Rpb25zLkdyb3VwTWF0Y2hUZWFtUGljaxpnChJHcm91cE1h" + 
        "dGNoVGVhbVBpY2sSEQoJc2VjdGlvbmlkGAEgASgFEg8KB2dyb3VwaWQYAiAB" + 
        "KAUSDQoFaW5kZXgYAyABKAUSDgoGdGVhbWlkGAQgASgFEg4KBml0ZW1pZBgF" + 
        "IAEoBCIiChFDQXR0cmlidXRlX1N0cmluZxINCgV2YWx1ZRgBIAEoCSIaChhD" + 
        "TXNnR0NUb0dDUmVsb2FkVmVyc2lvbnMingEKFENNc2dDU3RyaWtlMTVXZWxj" + 
        "b21lEhcKD3N0b3JlX2l0ZW1faGFzaBgFIAEoDRIfChd0aW1lcGxheWVkY29u" + 
        "c2VjdXRpdmVseRgGIAEoDRIZChF0aW1lX2ZpcnN0X3BsYXllZBgKIAEoDRIY" + 
        "ChBsYXN0X3RpbWVfcGxheWVkGAwgASgNEhcKD2xhc3RfaXBfYWRkcmVzcxgN" + 
        "IAEoDSKEAQoxQ01zZ0dDQ1N0cmlrZTE1X3YyX0NsaWVudFZhclZhbHVlTm90" + 
        "aWZpY2F0aW9uSW5mbxISCgp2YWx1ZV9uYW1lGAEgASgJEhEKCXZhbHVlX2lu" + 
        "dBgCIAEoBRITCgtzZXJ2ZXJfYWRkchgDIAEoDRITCgtzZXJ2ZXJfcG9ydBgE" + 
        "IAEoDSJaCjFDTXNnR0NDU3RyaWtlMTVfdjJfU2VydmVyVmFyVmFsdWVOb3Rp" + 
        "ZmljYXRpb25JbmZvEhEKCWFjY291bnRpZBgBIAEoDRISCgp2aWV3YW5nbGVz" + 
        "GAIgAygNIiwKKkNNc2dHQ0NTdHJpa2UxNV92Ml9HaWZ0c0xlYWRlcmJvYXJk" + 
        "UmVxdWVzdCKdAgorQ01zZ0dDQ1N0cmlrZTE1X3YyX0dpZnRzTGVhZGVyYm9h" + 
        "cmRSZXNwb25zZRISCgpzZXJ2ZXJ0aW1lGAEgASgNEhsKE3RpbWVfcGVyaW9k" + 
        "X3NlY29uZHMYAiABKA0SGQoRdG90YWxfZ2lmdHNfZ2l2ZW4YAyABKA0SFAoM" + 
        "dG90YWxfZ2l2ZXJzGAQgASgNElIKB2VudHJpZXMYBSADKAsyQS5DTXNnR0ND" + 
        "U3RyaWtlMTVfdjJfR2lmdHNMZWFkZXJib2FyZFJlc3BvbnNlLkdpZnRMZWFk" + 
        "ZXJib2FyZEVudHJ5GjgKFEdpZnRMZWFkZXJib2FyZEVudHJ5EhEKCWFjY291" + 
        "bnRpZBgBIAEoDRINCgVnaWZ0cxgCIAEoDSJMCilDTXNnR0NDU3RyaWtlMTVf" + 
        "djJfQ2xpZW50U3VibWl0U3VydmV5Vm90ZRIRCglzdXJ2ZXlfaWQYASABKA0S" + 
        "DAoEdm90ZRgCIAEoDSI/CipDTXNnR0NDU3RyaWtlMTVfdjJfU2VydmVyMkdD" + 
        "Q2xpZW50VmFsaWRhdGUSEQoJYWNjb3VudGlkGAEgASgNIrsBCjdDTXNnR0ND" + 
        "U3RyaWtlMTVfdjJfU2VydmVyMkdDUHVyZVNlcnZlclZhbGlkYXRpb25GYWls" + 
        "dXJlEhEKCWFjY291bnRpZBgBIAEoDRIMCgRwYXRoGAIgASgJEgwKBGZpbGUY" + 
        "AyABKAkSCwoDY3JjGAQgASgNEgwKBGhhc2gYBSABKAUSCwoDbGVuGAYgASgF" + 
        "EhMKC3BhY2tfbnVtYmVyGAcgASgFEhQKDHBhY2tfZmlsZV9pZBgIIAEoBSqr" + 
        "GQoKRUNzZ29HQ01zZxIeChlrX0VNc2dHQ0NTdHJpa2UxNV92Ml9CYXNlEIxH" + 
        "EioKJWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nU3RhcnQQjUcS" + 
        "KQoka19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdTdG9wEI5HEjYK" + 
        "MWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nQ2xpZW50MlNlcnZl" + 
        "clBpbmcQj0cSNAova19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtpbmdH" + 
        "QzJDbGllbnRVcGRhdGUQkEcSNQowa19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0" + 
        "Y2htYWtpbmdHQzJTZXJ2ZXJSZXNlcnZlEJFHEj4KOWtfRU1zZ0dDQ1N0cmlr" + 
        "ZTE1X3YyX01hdGNobWFraW5nU2VydmVyUmVzZXJ2YXRpb25SZXNwb25zZRCS" + 
        "RxI1CjBrX0VNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ0dDMkNsaWVu" + 
        "dFJlc2VydmUQk0cSNQowa19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2htYWtp" + 
        "bmdTZXJ2ZXJSb3VuZFN0YXRzEJRHEjMKLmtfRU1zZ0dDQ1N0cmlrZTE1X3Yy" + 
        "X01hdGNobWFraW5nQ2xpZW50MkdDSGVsbG8QlUcSMwoua19FTXNnR0NDU3Ry" + 
        "aWtlMTVfdjJfTWF0Y2htYWtpbmdHQzJDbGllbnRIZWxsbxCWRxIzCi5rX0VN" + 
        "c2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ1NlcnZlck1hdGNoRW5kEJdH" + 
        "EjUKMGtfRU1zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nR0MyQ2xpZW50" + 
        "QWJhbmRvbhCYRxIyCi1rX0VNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1ha2lu" + 
        "Z1NlcnZlcjJHQ0tpY2sQmUcSNQowa19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0" + 
        "Y2htYWtpbmdHQzJTZXJ2ZXJDb25maXJtEJpHEjcKMmtfRU1zZ0dDQ1N0cmlr" + 
        "ZTE1X3YyX01hdGNobWFraW5nR0NPcGVyYXRpb25hbFN0YXRzEJtHEjgKM2tf" + 
        "RU1zZ0dDQ1N0cmlrZTE1X3YyX01hdGNobWFraW5nR0MyU2VydmVyUmFua1Vw" + 
        "ZGF0ZRCcRxI6CjVrX0VNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaG1ha2luZ09w" + 
        "ZXJhdG9yMkdDQmxvZ1VwZGF0ZRCdRxI6CjVrX0VNc2dHQ0NTdHJpa2UxNV92" + 
        "Ml9TZXJ2ZXJOb3RpZmljYXRpb25Gb3JVc2VyUGVuYWx0eRCeRxIsCidrX0VN" + 
        "c2dHQ0NTdHJpa2UxNV92Ml9DbGllbnRSZXBvcnRQbGF5ZXIQn0cSLAona19F" + 
        "TXNnR0NDU3RyaWtlMTVfdjJfQ2xpZW50UmVwb3J0U2VydmVyEKBHEi0KKGtf" + 
        "RU1zZ0dDQ1N0cmlrZTE1X3YyX0NsaWVudENvbW1lbmRQbGF5ZXIQoUcSLgop" + 
        "a19FTXNnR0NDU3RyaWtlMTVfdjJfQ2xpZW50UmVwb3J0UmVzcG9uc2UQokcS" + 
        "Mgota19FTXNnR0NDU3RyaWtlMTVfdjJfQ2xpZW50Q29tbWVuZFBsYXllclF1" + 
        "ZXJ5EKNHEjoKNWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX0NsaWVudENvbW1lbmRQ" + 
        "bGF5ZXJRdWVyeVJlc3BvbnNlEKRHEigKI2tfRU1zZ0dDQ1N0cmlrZTE1X3Yy" + 
        "X1dhdGNoSW5mb1VzZXJzEKZHEjUKMGtfRU1zZ0dDQ1N0cmlrZTE1X3YyX0Ns" + 
        "aWVudFJlcXVlc3RQbGF5ZXJzUHJvZmlsZRCnRxIoCiNrX0VNc2dHQ0NTdHJp" + 
        "a2UxNV92Ml9QbGF5ZXJzUHJvZmlsZRCoRxIpCiRrX0VNc2dHQ0NTdHJpa2Ux" + 
        "NV92Ml9TZXRNeU1lZGFsc0luZm8QqUcSOAoza19FTXNnR0NDU3RyaWtlMTVf" + 
        "djJfUGxheWVyRWFybmVkUmV3YXJkTm90aWZpY2F0aW9uEKpHEjMKLmtfRU1z" + 
        "Z0dDQ1N0cmlrZTE1X3YyX1BsYXllck92ZXJ3YXRjaENhc2VVcGRhdGUQq0cS" + 
        "Nwoya19FTXNnR0NDU3RyaWtlMTVfdjJfUGxheWVyT3ZlcndhdGNoQ2FzZUFz" + 
        "c2lnbm1lbnQQrEcSMwoua19FTXNnR0NDU3RyaWtlMTVfdjJfUGxheWVyT3Zl" + 
        "cndhdGNoQ2FzZVN0YXR1cxCtRxIqCiVrX0VNc2dHQ0NTdHJpa2UxNV92Ml9H" + 
        "QzJDbGllbnRUZXh0TXNnEK5HEioKJWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX0Ns" + 
        "aWVudDJHQ1RleHRNc2cQr0cSMAora19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0" + 
        "Y2hFbmRSdW5SZXdhcmREcm9wcxCwRxI5CjRrX0VNc2dHQ0NTdHJpa2UxNV92" + 
        "Ml9NYXRjaEVuZFJld2FyZERyb3BzTm90aWZpY2F0aW9uELFHEjgKM2tfRU1z" + 
        "Z0dDQ1N0cmlrZTE1X3YyX0NsaWVudFJlcXVlc3RXYXRjaEluZm9GcmllbmRz" + 
        "MhCyRxIjCh5rX0VNc2dHQ0NTdHJpa2UxNV92Ml9NYXRjaExpc3QQs0cSOgo1" + 
        "a19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2hMaXN0UmVxdWVzdEN1cnJlbnRM" + 
        "aXZlR2FtZXMQtEcSOQo0a19FTXNnR0NDU3RyaWtlMTVfdjJfTWF0Y2hMaXN0" + 
        "UmVxdWVzdFJlY2VudFVzZXJHYW1lcxC1RxI0Ci9rX0VNc2dHQ0NTdHJpa2Ux" + 
        "NV92Ml9HQzJTZXJ2ZXJSZXNlcnZhdGlvblVwZGF0ZRC2RxI4CjNrX0VNc2dH" + 
        "Q0NTdHJpa2UxNV92Ml9DbGllbnRWYXJWYWx1ZU5vdGlmaWNhdGlvbkluZm8Q" + 
        "uEcSQAo7a19FTXNnR0NDU3RyaWtlMTVfdjJfVG91cm5hbWVudE1hdGNoUmV3" + 
        "YXJkRHJvcHNOb3RpZmljYXRpb24QuUcSOQo0a19FTXNnR0NDU3RyaWtlMTVf" + 
        "djJfTWF0Y2hMaXN0UmVxdWVzdFRvdXJuYW1lbnRHYW1lcxC6RxI2CjFrX0VN" + 
        "c2dHQ0NTdHJpa2UxNV92Ml9NYXRjaExpc3RSZXF1ZXN0RnVsbEdhbWVJbmZv" + 
        "ELtHEjEKLGtfRU1zZ0dDQ1N0cmlrZTE1X3YyX0dpZnRzTGVhZGVyYm9hcmRS" + 
        "ZXF1ZXN0ELxHEjIKLWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX0dpZnRzTGVhZGVy" + 
        "Ym9hcmRSZXNwb25zZRC9RxI4CjNrX0VNc2dHQ0NTdHJpa2UxNV92Ml9TZXJ2" + 
        "ZXJWYXJWYWx1ZU5vdGlmaWNhdGlvbkluZm8QvkcSHwoaa19FTXNnR0NUb0dD" + 
        "UmVsb2FkVmVyc2lvbnMQv0cSMAora19FTXNnR0NDU3RyaWtlMTVfdjJfQ2xp" + 
        "ZW50U3VibWl0U3VydmV5Vm90ZRDARxIxCixrX0VNc2dHQ0NTdHJpa2UxNV92" + 
        "Ml9TZXJ2ZXIyR0NDbGllbnRWYWxpZGF0ZRDBRxI5CjRrX0VNc2dHQ0NTdHJp" + 
        "a2UxNV92Ml9NYXRjaExpc3RSZXF1ZXN0TGl2ZUdhbWVGb3JVc2VyEMJHEj4K" + 
        "OWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX1NlcnZlcjJHQ1B1cmVTZXJ2ZXJWYWxp" + 
        "ZGF0aW9uRmFpbHVyZRDDRxI+CjlrX0VNc2dHQ0NTdHJpa2UxNV92Ml9DbGll" + 
        "bnQyR0NFY29uUHJldmlld0RhdGFCbG9ja1JlcXVlc3QQxEcSPwo6a19FTXNn" + 
        "R0NDU3RyaWtlMTVfdjJfQ2xpZW50MkdDRWNvblByZXZpZXdEYXRhQmxvY2tS" + 
        "ZXNwb25zZRDFRxIwCitrX0VNc2dHQ0NTdHJpa2UxNV92Ml9BY2NvdW50UHJp" + 
        "dmFjeVNldHRpbmdzEMZHEisKJmtfRU1zZ0dDQ1N0cmlrZTE1X3YyX1NldE15" + 
        "QWN0aXZpdHlJbmZvEMdHEj8KOmtfRU1zZ0dDQ1N0cmlrZTE1X3YyX01hdGNo" + 
        "TGlzdFJlcXVlc3RUb3VybmFtZW50UHJlZGljdGlvbnMQyEcSPgo5a19FTXNn" + 
        "R0NDU3RyaWtlMTVfdjJfTWF0Y2hMaXN0VXBsb2FkVG91cm5hbWVudFByZWRp" + 
        "Y3Rpb25zEMlHEiYKIWtfRU1zZ0dDQ1N0cmlrZTE1X3YyX0RyYWZ0U3VtbWFy" + 
        "eRDKRw==");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_GameServerPing__Descriptor = Descriptor.MessageTypes[0];
      internal__static_GameServerPing__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GameServerPing, global::GameServerPing.Builder>(internal__static_GameServerPing__Descriptor,
              new string[] { "GameserverId", "Ping", "Ip", "Port", "Instances", });
      internal__static_DetailedSearchStatistic__Descriptor = Descriptor.MessageTypes[1];
      internal__static_DetailedSearchStatistic__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::DetailedSearchStatistic, global::DetailedSearchStatistic.Builder>(internal__static_DetailedSearchStatistic__Descriptor,
              new string[] { "GameType", "SearchTimeAvg", "PlayersSearching", });
      internal__static_TournamentPlayer__Descriptor = Descriptor.MessageTypes[2];
      internal__static_TournamentPlayer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TournamentPlayer, global::TournamentPlayer.Builder>(internal__static_TournamentPlayer__Descriptor,
              new string[] { "AccountId", "PlayerNick", "PlayerName", "PlayerDob", "PlayerFlag", "PlayerLocation", "PlayerDesc", });
      internal__static_TournamentTeam__Descriptor = Descriptor.MessageTypes[3];
      internal__static_TournamentTeam__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TournamentTeam, global::TournamentTeam.Builder>(internal__static_TournamentTeam__Descriptor,
              new string[] { "TeamId", "TeamTag", "TeamFlag", "TeamName", "Players", });
      internal__static_TournamentEvent__Descriptor = Descriptor.MessageTypes[4];
      internal__static_TournamentEvent__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TournamentEvent, global::TournamentEvent.Builder>(internal__static_TournamentEvent__Descriptor,
              new string[] { "EventId", "EventTag", "EventName", "EventTimeStart", "EventTimeEnd", "EventPublic", "EventStageId", "EventStageName", "ActiveSectionId", });
      internal__static_GlobalStatistics__Descriptor = Descriptor.MessageTypes[5];
      internal__static_GlobalStatistics__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::GlobalStatistics, global::GlobalStatistics.Builder>(internal__static_GlobalStatistics__Descriptor,
              new string[] { "PlayersOnline", "ServersOnline", "PlayersSearching", "ServersAvailable", "OngoingMatches", "SearchTimeAvg", "SearchStatistics", "MainPostUrl", "RequiredAppidVersion", "PricesheetVersion", "TwitchStreamsVersion", "ActiveTournamentEventid", "ActiveSurveyId", });
      internal__static_OperationalStatisticDescription__Descriptor = Descriptor.MessageTypes[6];
      internal__static_OperationalStatisticDescription__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::OperationalStatisticDescription, global::OperationalStatisticDescription.Builder>(internal__static_OperationalStatisticDescription__Descriptor,
              new string[] { "Name", "Idkey", });
      internal__static_OperationalStatisticElement__Descriptor = Descriptor.MessageTypes[7];
      internal__static_OperationalStatisticElement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::OperationalStatisticElement, global::OperationalStatisticElement.Builder>(internal__static_OperationalStatisticElement__Descriptor,
              new string[] { "Idkey", "Values", });
      internal__static_OperationalStatisticsPacket__Descriptor = Descriptor.MessageTypes[8];
      internal__static_OperationalStatisticsPacket__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::OperationalStatisticsPacket, global::OperationalStatisticsPacket.Builder>(internal__static_OperationalStatisticsPacket__Descriptor,
              new string[] { "Packetid", "Mstimestamp", "Values", });
      internal__static_PlayerRankingInfo__Descriptor = Descriptor.MessageTypes[9];
      internal__static_PlayerRankingInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerRankingInfo, global::PlayerRankingInfo.Builder>(internal__static_PlayerRankingInfo__Descriptor,
              new string[] { "AccountId", "RankId", "Wins", "RankChange", });
      internal__static_PlayerCommendationInfo__Descriptor = Descriptor.MessageTypes[10];
      internal__static_PlayerCommendationInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerCommendationInfo, global::PlayerCommendationInfo.Builder>(internal__static_PlayerCommendationInfo__Descriptor,
              new string[] { "CmdFriendly", "CmdTeaching", "CmdLeader", });
      internal__static_PlayerMedalsInfo__Descriptor = Descriptor.MessageTypes[11];
      internal__static_PlayerMedalsInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::PlayerMedalsInfo, global::PlayerMedalsInfo.Builder>(internal__static_PlayerMedalsInfo__Descriptor,
              new string[] { "MedalTeam", "MedalCombat", "MedalWeapon", "MedalGlobal", "MedalArms", "LegacyCoinOpPayback", "DisplayItemsDefidx", "FeaturedDisplayItemDefidx", });
      internal__static_AccountActivity__Descriptor = Descriptor.MessageTypes[12];
      internal__static_AccountActivity__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::AccountActivity, global::AccountActivity.Builder>(internal__static_AccountActivity__Descriptor,
              new string[] { "Activity", "Mode", "Map", });
      internal__static_TournamentMatchSetup__Descriptor = Descriptor.MessageTypes[13];
      internal__static_TournamentMatchSetup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::TournamentMatchSetup, global::TournamentMatchSetup.Builder>(internal__static_TournamentMatchSetup__Descriptor,
              new string[] { "EventId", "TeamIdCt", "TeamIdT", "EventStageId", });
      internal__static_ServerHltvInfo__Descriptor = Descriptor.MessageTypes[14];
      internal__static_ServerHltvInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::ServerHltvInfo, global::ServerHltvInfo.Builder>(internal__static_ServerHltvInfo__Descriptor,
              new string[] { "TvUdpPort", "TvWatchKey", "TvSlots", "TvClients", "TvProxies", "TvTime", "GameMode", "GameMapgroup", "GameMap", "TvMasterSteamid", "TvLocalSlots", "TvLocalClients", "TvLocalProxies", "TvRelaySlots", "TvRelayClients", "TvRelayProxies", "TvRelayAddress", "TvRelayPort", "TvRelaySteamid", });
      internal__static_IpAddressMask__Descriptor = Descriptor.MessageTypes[15];
      internal__static_IpAddressMask__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::IpAddressMask, global::IpAddressMask.Builder>(internal__static_IpAddressMask__Descriptor,
              new string[] { "A", "B", "C", "D", "Bits", "Token", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__Descriptor = Descriptor.MessageTypes[16];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__Descriptor,
              new string[] { "Packetid", "Namekeys", "Packets", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__Descriptor = Descriptor.MessageTypes[17];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__Descriptor,
              new string[] { "Token", "Stamp", "Exchange", });
      internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__Descriptor = Descriptor.MessageTypes[18];
      internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate, global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate.Builder>(internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__Descriptor,
              new string[] { "ViewersExternalTotal", "ViewersExternalSteam", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingStart__Descriptor = Descriptor.MessageTypes[19];
      internal__static_CMsgGCCStrike15_v2_MatchmakingStart__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingStart, global::CMsgGCCStrike15_v2_MatchmakingStart.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingStart__Descriptor,
              new string[] { "AccountIds", "GameType", "TicketData", "ClientVersion", "TournamentMatch", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingStop__Descriptor = Descriptor.MessageTypes[20];
      internal__static_CMsgGCCStrike15_v2_MatchmakingStop__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingStop, global::CMsgGCCStrike15_v2_MatchmakingStop.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingStop__Descriptor,
              new string[] { "Abandon", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__Descriptor = Descriptor.MessageTypes[21];
      internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__Descriptor,
              new string[] { "Gameserverpings", "OffsetIndex", "FinalBatch", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__Descriptor = Descriptor.MessageTypes[22];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__Descriptor,
              new string[] { "Matchmaking", "WaitingAccountIdSessions", "Error", "OngoingmatchAccountIdSessions", "GlobalStats", "FailpingAccountIdSessions", "PenaltyAccountIdSessions", "FailreadyAccountIdSessions", "VacbannedAccountIdSessions", "ServerIpaddressMask", });
      internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__Descriptor = Descriptor.MessageTypes[23];
      internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentMatchDraft, global::CDataGCCStrike15_v2_TournamentMatchDraft.Builder>(internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__Descriptor,
              new string[] { "EventId", "EventStageId", "TeamId0", "TeamId1", "MapsCount", "MapsCurrent", "TeamIdStart", "TeamIdVeto1", "TeamIdPickn", "Drafts", });
      internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__Descriptor = internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__Descriptor.NestedTypes[0];
      internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry, global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Builder>(internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__Descriptor,
              new string[] { "Mapid", "TeamIdCt", });
      internal__static_CPreMatchInfoData__Descriptor = Descriptor.MessageTypes[24];
      internal__static_CPreMatchInfoData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CPreMatchInfoData, global::CPreMatchInfoData.Builder>(internal__static_CPreMatchInfoData__Descriptor,
              new string[] { "PredictionsPct", "Draft", "Stats", });
      internal__static_CPreMatchInfoData_TeamStats__Descriptor = internal__static_CPreMatchInfoData__Descriptor.NestedTypes[0];
      internal__static_CPreMatchInfoData_TeamStats__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CPreMatchInfoData.Types.TeamStats, global::CPreMatchInfoData.Types.TeamStats.Builder>(internal__static_CPreMatchInfoData_TeamStats__Descriptor,
              new string[] { "MatchInfoIdxtxt", "MatchInfoTxt", "MatchInfoTeams", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__Descriptor = Descriptor.MessageTypes[25];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__Descriptor,
              new string[] { "AccountIds", "GameType", "MatchId", "ServerVersion", "Rankings", "EncryptionKey", "EncryptionKeyPub", "PartyIds", "Whitelist", "TvMasterSteamid", "TournamentEvent", "TournamentTeams", "TournamentCastersAccountIds", "TvRelaySteamid", "PreMatchData", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__Descriptor = Descriptor.MessageTypes[26];
      internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__Descriptor,
              new string[] { "Reservationid", "Reservation", "Map", "GcReservationSent", "ServerVersion", "TvInfo", "RewardPlayerAccounts", "IdlePlayerAccounts", "RewardItemAttrDefIdx", "RewardItemAttrValue", "RewardItemAttrRewardIdx", "RewardDropList", "TournamentTag", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__Descriptor = Descriptor.MessageTypes[27];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__Descriptor,
              new string[] { "Serverid", "Serverip", "Serverport", "Reservationid", "Reservation", "Map", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__Descriptor = Descriptor.MessageTypes[28];
      internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats, global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__Descriptor,
              new string[] { "Reservationid", "Reservation", "Map", "Round", "Kills", "Assists", "Deaths", "Scores", "Pings", "RoundResult", "MatchResult", "TeamScores", "Confirm", "ReservationStage", "MatchDuration", "EnemyKills", "EnemyHeadshots", "Enemy3Ks", "Enemy4Ks", "Enemy5Ks", "Mvps", "SpectatorsCount", "SpectatorsCountTv", "SpectatorsCountLnk", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__Descriptor = Descriptor.MessageTypes[29];
      internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__Descriptor,
              new string[] { "Stats", "Confirm", "Rematch", "ReplayToken", "ReplayClusterId", "AbortedMatch", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__Descriptor = Descriptor.MessageTypes[30];
      internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello, global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__Descriptor,
              new string[] { });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__Descriptor = Descriptor.MessageTypes[31];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__Descriptor,
              new string[] { "AccountId", "Ongoingmatch", "GlobalStats", "PenaltySeconds", "PenaltyReason", "VacBanned", "Ranking", "Commendation", "Medals", "MyCurrentEvent", "MyCurrentEventTeams", "MyCurrentTeam", "MyCurrentEventStages", "SurveyVote", "Activity", });
      internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__Descriptor = Descriptor.MessageTypes[32];
      internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_AccountPrivacySettings, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Builder>(internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__Descriptor,
              new string[] { "Settings", });
      internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__Descriptor = internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__Descriptor.NestedTypes[0];
      internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.Builder>(internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__Descriptor,
              new string[] { "SettingType", "SettingValue", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__Descriptor = Descriptor.MessageTypes[33];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__Descriptor,
              new string[] { "AccountId", "AbandonedMatch", "PenaltySeconds", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__Descriptor = Descriptor.MessageTypes[34];
      internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick, global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__Descriptor,
              new string[] { "AccountId", "Reservation", "Reason", });
      internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__Descriptor = Descriptor.MessageTypes[35];
      internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_MatchmakingLockedInMatch, global::CDataGCCStrike15_v2_MatchmakingLockedInMatch.Builder>(internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__Descriptor,
              new string[] { "ClientReservation", "ServerStats", "Rtime32ServerInfo", "LastRoundStatsTemp", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__Descriptor = Descriptor.MessageTypes[36];
      internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__Descriptor,
              new string[] { "Rankings", "MatchId", });
      internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__Descriptor = Descriptor.MessageTypes[37];
      internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.Builder>(internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__Descriptor,
              new string[] { "MainPostUrl", });
      internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__Descriptor = Descriptor.MessageTypes[38];
      internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.Builder>(internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__Descriptor,
              new string[] { "AccountId", "Reason", "Seconds", });
      internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__Descriptor = Descriptor.MessageTypes[39];
      internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientReportPlayer, global::CMsgGCCStrike15_v2_ClientReportPlayer.Builder>(internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__Descriptor,
              new string[] { "AccountId", "RptAimbot", "RptWallhack", "RptSpeedhack", "RptTeamharm", "RptTextabuse", "RptVoiceabuse", "MatchId", });
      internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__Descriptor = Descriptor.MessageTypes[40];
      internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientCommendPlayer, global::CMsgGCCStrike15_v2_ClientCommendPlayer.Builder>(internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__Descriptor,
              new string[] { "AccountId", "MatchId", "Commendation", "Tokens", });
      internal__static_CMsgGCCStrike15_v2_ClientReportServer__Descriptor = Descriptor.MessageTypes[41];
      internal__static_CMsgGCCStrike15_v2_ClientReportServer__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientReportServer, global::CMsgGCCStrike15_v2_ClientReportServer.Builder>(internal__static_CMsgGCCStrike15_v2_ClientReportServer__Descriptor,
              new string[] { "RptPoorperf", "RptAbusivemodels", "RptBadmotd", "RptListingabuse", "MatchId", });
      internal__static_CMsgGCCStrike15_v2_ClientReportResponse__Descriptor = Descriptor.MessageTypes[42];
      internal__static_CMsgGCCStrike15_v2_ClientReportResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientReportResponse, global::CMsgGCCStrike15_v2_ClientReportResponse.Builder>(internal__static_CMsgGCCStrike15_v2_ClientReportResponse__Descriptor,
              new string[] { "ConfirmationId", "AccountId", "ServerIp", "ResponseType", "ResponseResult", "Tokens", });
      internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__Descriptor = Descriptor.MessageTypes[43];
      internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.Builder>(internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__Descriptor,
              new string[] { "RequestId", "AccountIds", "Serverid", "Matchid", });
      internal__static_WatchableMatchInfo__Descriptor = Descriptor.MessageTypes[44];
      internal__static_WatchableMatchInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::WatchableMatchInfo, global::WatchableMatchInfo.Builder>(internal__static_WatchableMatchInfo__Descriptor,
              new string[] { "ServerIp", "TvPort", "TvSpectators", "TvTime", "TvWatchPassword", "ClDecryptdataKey", "ClDecryptdataKeyPub", "GameMode", "GameMapgroup", "GameMap", "ServerId", "MatchId", "ReservationId", });
      internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__Descriptor = Descriptor.MessageTypes[45];
      internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_WatchInfoUsers, global::CMsgGCCStrike15_v2_WatchInfoUsers.Builder>(internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__Descriptor,
              new string[] { "RequestId", "AccountIds", "WatchableMatchInfos", "ExtendedTimeout", });
      internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__Descriptor = Descriptor.MessageTypes[46];
      internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile, global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile.Builder>(internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__Descriptor,
              new string[] { "RequestId", "AccountIds", });
      internal__static_CMsgGCCStrike15_v2_PlayersProfile__Descriptor = Descriptor.MessageTypes[47];
      internal__static_CMsgGCCStrike15_v2_PlayersProfile__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayersProfile, global::CMsgGCCStrike15_v2_PlayersProfile.Builder>(internal__static_CMsgGCCStrike15_v2_PlayersProfile__Descriptor,
              new string[] { "RequestId", "AccountProfiles", });
      internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__Descriptor = Descriptor.MessageTypes[48];
      internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification, global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.Builder>(internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__Descriptor,
              new string[] { "AccountId", "ItemDefIndex", "AttrDefIndex", "AttrValue", });
      internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__Descriptor = Descriptor.MessageTypes[49];
      internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.Builder>(internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__Descriptor,
              new string[] { "Caseid", "VerdictLegacy", "Suspectid", "Fractionid", "RptAimbot", "RptWallhack", "RptSpeedhack", "RptTeamharm", });
      internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__Descriptor = Descriptor.MessageTypes[50];
      internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.Builder>(internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__Descriptor,
              new string[] { "Caseid", "Caseurl", "Verdict", "Timestamp", "Throttleseconds", "Suspectid", "Fractionid", "Numrounds", "Fractionrounds", "Streakconvictions", });
      internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__Descriptor = Descriptor.MessageTypes[51];
      internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.Builder>(internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__Descriptor,
              new string[] { "Caseid", "Statusid", });
      internal__static_CClientHeaderOverwatchEvidence__Descriptor = Descriptor.MessageTypes[52];
      internal__static_CClientHeaderOverwatchEvidence__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CClientHeaderOverwatchEvidence, global::CClientHeaderOverwatchEvidence.Builder>(internal__static_CClientHeaderOverwatchEvidence__Descriptor,
              new string[] { "Accountid", "Caseid", });
      internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__Descriptor = Descriptor.MessageTypes[53];
      internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GC2ClientTextMsg, global::CMsgGCCStrike15_v2_GC2ClientTextMsg.Builder>(internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__Descriptor,
              new string[] { "Id", "Type", "Payload", });
      internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__Descriptor = Descriptor.MessageTypes[54];
      internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Client2GCTextMsg, global::CMsgGCCStrike15_v2_Client2GCTextMsg.Builder>(internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__Descriptor,
              new string[] { "Id", "Args", });
      internal__static_CMsgGC_ServerQuestUpdateData__Descriptor = Descriptor.MessageTypes[55];
      internal__static_CMsgGC_ServerQuestUpdateData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGC_ServerQuestUpdateData, global::CMsgGC_ServerQuestUpdateData.Builder>(internal__static_CMsgGC_ServerQuestUpdateData__Descriptor,
              new string[] { "PlayerQuestData", });
      internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__Descriptor = internal__static_CMsgGC_ServerQuestUpdateData__Descriptor.NestedTypes[0];
      internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Builder>(internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__Descriptor,
              new string[] { "QuesterAccountId", "QuestItemData", });
      internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__Descriptor = internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__Descriptor.NestedTypes[0];
      internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.Builder>(internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__Descriptor,
              new string[] { "QuestItemId", "QuestPointsEarned", });
      internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__Descriptor = Descriptor.MessageTypes[56];
      internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops, global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops.Builder>(internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__Descriptor,
              new string[] { "Serverinfo", "MatchEndQuestData", });
      internal__static_CEconItemPreviewDataBlock__Descriptor = Descriptor.MessageTypes[57];
      internal__static_CEconItemPreviewDataBlock__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CEconItemPreviewDataBlock, global::CEconItemPreviewDataBlock.Builder>(internal__static_CEconItemPreviewDataBlock__Descriptor,
              new string[] { "Accountid", "Itemid", "Defindex", "Paintindex", "Rarity", "Quality", "Paintwear", "Paintseed", "Killeaterscoretype", "Killeatervalue", "Customname", "Stickers", "Inventory", "Origin", "Questid", });
      internal__static_CEconItemPreviewDataBlock_Sticker__Descriptor = internal__static_CEconItemPreviewDataBlock__Descriptor.NestedTypes[0];
      internal__static_CEconItemPreviewDataBlock_Sticker__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CEconItemPreviewDataBlock.Types.Sticker, global::CEconItemPreviewDataBlock.Types.Sticker.Builder>(internal__static_CEconItemPreviewDataBlock_Sticker__Descriptor,
              new string[] { "Slot", "StickerId", "Wear", "Scale", "Rotation", });
      internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__Descriptor = Descriptor.MessageTypes[58];
      internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.Builder>(internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__Descriptor,
              new string[] { "Iteminfo", });
      internal__static_CMsgItemAcknowledged__Descriptor = Descriptor.MessageTypes[59];
      internal__static_CMsgItemAcknowledged__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgItemAcknowledged, global::CMsgItemAcknowledged.Builder>(internal__static_CMsgItemAcknowledged__Descriptor,
              new string[] { "Iteminfo", });
      internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__Descriptor = Descriptor.MessageTypes[60];
      internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.Builder>(internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__Descriptor,
              new string[] { "ParamS", "ParamA", "ParamD", });
      internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__Descriptor = Descriptor.MessageTypes[61];
      internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.Builder>(internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__Descriptor,
              new string[] { "Iteminfo", });
      internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__Descriptor = Descriptor.MessageTypes[62];
      internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.Builder>(internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__Descriptor,
              new string[] { "MatchId", "Defindex", "Accountids", });
      internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__Descriptor = Descriptor.MessageTypes[63];
      internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.Builder>(internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__Descriptor,
              new string[] { });
      internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__Descriptor = Descriptor.MessageTypes[64];
      internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.Builder>(internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__Descriptor,
              new string[] { "Accountid", });
      internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__Descriptor = Descriptor.MessageTypes[65];
      internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.Builder>(internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__Descriptor,
              new string[] { "Accountid", });
      internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__Descriptor = Descriptor.MessageTypes[66];
      internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames, global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames.Builder>(internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__Descriptor,
              new string[] { "Eventid", });
      internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__Descriptor = Descriptor.MessageTypes[67];
      internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.Builder>(internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__Descriptor,
              new string[] { "Matchid", "Outcomeid", "Token", });
      internal__static_CDataGCCStrike15_v2_MatchInfo__Descriptor = Descriptor.MessageTypes[68];
      internal__static_CDataGCCStrike15_v2_MatchInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_MatchInfo, global::CDataGCCStrike15_v2_MatchInfo.Builder>(internal__static_CDataGCCStrike15_v2_MatchInfo__Descriptor,
              new string[] { "Matchid", "Matchtime", "Watchablematchinfo", "Roundstats", });
      internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__Descriptor = Descriptor.MessageTypes[69];
      internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentGroupTeam, global::CDataGCCStrike15_v2_TournamentGroupTeam.Builder>(internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__Descriptor,
              new string[] { "TeamId", "Score", "Correctpick", });
      internal__static_CDataGCCStrike15_v2_TournamentGroup__Descriptor = Descriptor.MessageTypes[70];
      internal__static_CDataGCCStrike15_v2_TournamentGroup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentGroup, global::CDataGCCStrike15_v2_TournamentGroup.Builder>(internal__static_CDataGCCStrike15_v2_TournamentGroup__Descriptor,
              new string[] { "Groupid", "Name", "Desc", "Picks", "Teams", "StageIds", "Picklockuntiltime", "Pickableteams", "PointsPerPick", });
      internal__static_CDataGCCStrike15_v2_TournamentSection__Descriptor = Descriptor.MessageTypes[71];
      internal__static_CDataGCCStrike15_v2_TournamentSection__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentSection, global::CDataGCCStrike15_v2_TournamentSection.Builder>(internal__static_CDataGCCStrike15_v2_TournamentSection__Descriptor,
              new string[] { "Sectionid", "Name", "Desc", "Groups", });
      internal__static_CDataGCCStrike15_v2_TournamentInfo__Descriptor = Descriptor.MessageTypes[72];
      internal__static_CDataGCCStrike15_v2_TournamentInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CDataGCCStrike15_v2_TournamentInfo, global::CDataGCCStrike15_v2_TournamentInfo.Builder>(internal__static_CDataGCCStrike15_v2_TournamentInfo__Descriptor,
              new string[] { "Sections", "TournamentEvent", "TournamentTeams", });
      internal__static_CMsgGCCStrike15_v2_MatchList__Descriptor = Descriptor.MessageTypes[73];
      internal__static_CMsgGCCStrike15_v2_MatchList__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_MatchList, global::CMsgGCCStrike15_v2_MatchList.Builder>(internal__static_CMsgGCCStrike15_v2_MatchList__Descriptor,
              new string[] { "Msgrequestid", "Accountid", "Servertime", "Matches", "Streams", "Tournamentinfo", });
      internal__static_CMsgGCCStrike15_v2_Predictions__Descriptor = Descriptor.MessageTypes[74];
      internal__static_CMsgGCCStrike15_v2_Predictions__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Predictions, global::CMsgGCCStrike15_v2_Predictions.Builder>(internal__static_CMsgGCCStrike15_v2_Predictions__Descriptor,
              new string[] { "EventId", "GroupMatchTeamPicks", });
      internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__Descriptor = internal__static_CMsgGCCStrike15_v2_Predictions__Descriptor.NestedTypes[0];
      internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick, global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.Builder>(internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__Descriptor,
              new string[] { "Sectionid", "Groupid", "Index", "Teamid", "Itemid", });
      internal__static_CAttribute_String__Descriptor = Descriptor.MessageTypes[75];
      internal__static_CAttribute_String__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CAttribute_String, global::CAttribute_String.Builder>(internal__static_CAttribute_String__Descriptor,
              new string[] { "Value", });
      internal__static_CMsgGCToGCReloadVersions__Descriptor = Descriptor.MessageTypes[76];
      internal__static_CMsgGCToGCReloadVersions__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCToGCReloadVersions, global::CMsgGCToGCReloadVersions.Builder>(internal__static_CMsgGCToGCReloadVersions__Descriptor,
              new string[] { });
      internal__static_CMsgCStrike15Welcome__Descriptor = Descriptor.MessageTypes[77];
      internal__static_CMsgCStrike15Welcome__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgCStrike15Welcome, global::CMsgCStrike15Welcome.Builder>(internal__static_CMsgCStrike15Welcome__Descriptor,
              new string[] { "StoreItemHash", "Timeplayedconsecutively", "TimeFirstPlayed", "LastTimePlayed", "LastIpAddress", });
      internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__Descriptor = Descriptor.MessageTypes[78];
      internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.Builder>(internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__Descriptor,
              new string[] { "ValueName", "ValueInt", "ServerAddr", "ServerPort", });
      internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__Descriptor = Descriptor.MessageTypes[79];
      internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.Builder>(internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__Descriptor,
              new string[] { "Accountid", "Viewangles", });
      internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__Descriptor = Descriptor.MessageTypes[80];
      internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest, global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest.Builder>(internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__Descriptor,
              new string[] { });
      internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__Descriptor = Descriptor.MessageTypes[81];
      internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Builder>(internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__Descriptor,
              new string[] { "Servertime", "TimePeriodSeconds", "TotalGiftsGiven", "TotalGivers", "Entries", });
      internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__Descriptor = internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__Descriptor.NestedTypes[0];
      internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.Builder>(internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__Descriptor,
              new string[] { "Accountid", "Gifts", });
      internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__Descriptor = Descriptor.MessageTypes[82];
      internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote, global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote.Builder>(internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__Descriptor,
              new string[] { "SurveyId", "Vote", });
      internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__Descriptor = Descriptor.MessageTypes[83];
      internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Server2GCClientValidate, global::CMsgGCCStrike15_v2_Server2GCClientValidate.Builder>(internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__Descriptor,
              new string[] { "Accountid", });
      internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__Descriptor = Descriptor.MessageTypes[84];
      internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.Builder>(internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__Descriptor,
              new string[] { "Accountid", "Path", "File", "Crc", "Hash", "Len", "PackNumber", "PackFileId", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        global::Steammessages.Descriptor, 
        }, assigner);
  }
  #endregion
  
}
#region Enums
public enum ECsgoGCMsg {
  k_EMsgGCCStrike15_v2_Base = 9100,
  k_EMsgGCCStrike15_v2_MatchmakingStart = 9101,
  k_EMsgGCCStrike15_v2_MatchmakingStop = 9102,
  k_EMsgGCCStrike15_v2_MatchmakingClient2ServerPing = 9103,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate = 9104,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerReserve = 9105,
  k_EMsgGCCStrike15_v2_MatchmakingServerReservationResponse = 9106,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientReserve = 9107,
  k_EMsgGCCStrike15_v2_MatchmakingServerRoundStats = 9108,
  k_EMsgGCCStrike15_v2_MatchmakingClient2GCHello = 9109,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientHello = 9110,
  k_EMsgGCCStrike15_v2_MatchmakingServerMatchEnd = 9111,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon = 9112,
  k_EMsgGCCStrike15_v2_MatchmakingServer2GCKick = 9113,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm = 9114,
  k_EMsgGCCStrike15_v2_MatchmakingGCOperationalStats = 9115,
  k_EMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate = 9116,
  k_EMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate = 9117,
  k_EMsgGCCStrike15_v2_ServerNotificationForUserPenalty = 9118,
  k_EMsgGCCStrike15_v2_ClientReportPlayer = 9119,
  k_EMsgGCCStrike15_v2_ClientReportServer = 9120,
  k_EMsgGCCStrike15_v2_ClientCommendPlayer = 9121,
  k_EMsgGCCStrike15_v2_ClientReportResponse = 9122,
  k_EMsgGCCStrike15_v2_ClientCommendPlayerQuery = 9123,
  k_EMsgGCCStrike15_v2_ClientCommendPlayerQueryResponse = 9124,
  k_EMsgGCCStrike15_v2_WatchInfoUsers = 9126,
  k_EMsgGCCStrike15_v2_ClientRequestPlayersProfile = 9127,
  k_EMsgGCCStrike15_v2_PlayersProfile = 9128,
  k_EMsgGCCStrike15_v2_SetMyMedalsInfo = 9129,
  k_EMsgGCCStrike15_v2_PlayerEarnedRewardNotification = 9130,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate = 9131,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment = 9132,
  k_EMsgGCCStrike15_v2_PlayerOverwatchCaseStatus = 9133,
  k_EMsgGCCStrike15_v2_GC2ClientTextMsg = 9134,
  k_EMsgGCCStrike15_v2_Client2GCTextMsg = 9135,
  k_EMsgGCCStrike15_v2_MatchEndRunRewardDrops = 9136,
  k_EMsgGCCStrike15_v2_MatchEndRewardDropsNotification = 9137,
  k_EMsgGCCStrike15_v2_ClientRequestWatchInfoFriends2 = 9138,
  k_EMsgGCCStrike15_v2_MatchList = 9139,
  k_EMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames = 9140,
  k_EMsgGCCStrike15_v2_MatchListRequestRecentUserGames = 9141,
  k_EMsgGCCStrike15_v2_GC2ServerReservationUpdate = 9142,
  k_EMsgGCCStrike15_v2_ClientVarValueNotificationInfo = 9144,
  k_EMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification = 9145,
  k_EMsgGCCStrike15_v2_MatchListRequestTournamentGames = 9146,
  k_EMsgGCCStrike15_v2_MatchListRequestFullGameInfo = 9147,
  k_EMsgGCCStrike15_v2_GiftsLeaderboardRequest = 9148,
  k_EMsgGCCStrike15_v2_GiftsLeaderboardResponse = 9149,
  k_EMsgGCCStrike15_v2_ServerVarValueNotificationInfo = 9150,
  k_EMsgGCToGCReloadVersions = 9151,
  k_EMsgGCCStrike15_v2_ClientSubmitSurveyVote = 9152,
  k_EMsgGCCStrike15_v2_Server2GCClientValidate = 9153,
  k_EMsgGCCStrike15_v2_MatchListRequestLiveGameForUser = 9154,
  k_EMsgGCCStrike15_v2_Server2GCPureServerValidationFailure = 9155,
  k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest = 9156,
  k_EMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse = 9157,
  k_EMsgGCCStrike15_v2_AccountPrivacySettings = 9158,
  k_EMsgGCCStrike15_v2_SetMyActivityInfo = 9159,
  k_EMsgGCCStrike15_v2_MatchListRequestTournamentPredictions = 9160,
  k_EMsgGCCStrike15_v2_MatchListUploadTournamentPredictions = 9161,
  k_EMsgGCCStrike15_v2_DraftSummary = 9162,
}

#endregion

#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GameServerPing : pb::GeneratedMessage<GameServerPing, GameServerPing.Builder> {
  private GameServerPing() { }
  private static readonly GameServerPing defaultInstance = new GameServerPing().MakeReadOnly();
  private static readonly string[] _gameServerPingFieldNames = new string[] { "gameserver_id", "instances", "ip", "ping", "port" };
  private static readonly uint[] _gameServerPingFieldTags = new uint[] { 8, 40, 24, 16, 32 };
  public static GameServerPing DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GameServerPing DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GameServerPing ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_GameServerPing__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GameServerPing, GameServerPing.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_GameServerPing__FieldAccessorTable; }
  }
  
  public const int GameserverIdFieldNumber = 1;
  private bool hasGameserverId;
  private ulong gameserverId_;
  public bool HasGameserverId {
    get { return hasGameserverId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong GameserverId {
    get { return gameserverId_; }
  }
  
  public const int PingFieldNumber = 2;
  private bool hasPing;
  private int ping_;
  public bool HasPing {
    get { return hasPing; }
  }
  public int Ping {
    get { return ping_; }
  }
  
  public const int IpFieldNumber = 3;
  private bool hasIp;
  private uint ip_;
  public bool HasIp {
    get { return hasIp; }
  }
  [global::System.CLSCompliant(false)]
  public uint Ip {
    get { return ip_; }
  }
  
  public const int PortFieldNumber = 4;
  private bool hasPort;
  private uint port_;
  public bool HasPort {
    get { return hasPort; }
  }
  [global::System.CLSCompliant(false)]
  public uint Port {
    get { return port_; }
  }
  
  public const int InstancesFieldNumber = 5;
  private bool hasInstances;
  private uint instances_;
  public bool HasInstances {
    get { return hasInstances; }
  }
  [global::System.CLSCompliant(false)]
  public uint Instances {
    get { return instances_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _gameServerPingFieldNames;
    if (hasGameserverId) {
      output.WriteUInt64(1, field_names[0], GameserverId);
    }
    if (hasPing) {
      output.WriteInt32(2, field_names[3], Ping);
    }
    if (hasIp) {
      output.WriteUInt32(3, field_names[2], Ip);
    }
    if (hasPort) {
      output.WriteUInt32(4, field_names[4], Port);
    }
    if (hasInstances) {
      output.WriteUInt32(5, field_names[1], Instances);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameserverId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, GameserverId);
      }
      if (hasPing) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Ping);
      }
      if (hasIp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Ip);
      }
      if (hasPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Port);
      }
      if (hasInstances) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Instances);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static GameServerPing ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GameServerPing ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GameServerPing ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GameServerPing ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GameServerPing ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GameServerPing ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GameServerPing ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GameServerPing ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GameServerPing ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GameServerPing ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GameServerPing MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GameServerPing prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GameServerPing, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GameServerPing cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GameServerPing result;
    
    private GameServerPing PrepareBuilder() {
      if (resultIsReadOnly) {
        GameServerPing original = result;
        result = new GameServerPing();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GameServerPing MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GameServerPing.Descriptor; }
    }
    
    public override GameServerPing DefaultInstanceForType {
      get { return global::GameServerPing.DefaultInstance; }
    }
    
    public override GameServerPing BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GameServerPing) {
        return MergeFrom((GameServerPing) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GameServerPing other) {
      if (other == global::GameServerPing.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGameserverId) {
        GameserverId = other.GameserverId;
      }
      if (other.HasPing) {
        Ping = other.Ping;
      }
      if (other.HasIp) {
        Ip = other.Ip;
      }
      if (other.HasPort) {
        Port = other.Port;
      }
      if (other.HasInstances) {
        Instances = other.Instances;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_gameServerPingFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _gameServerPingFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGameserverId = input.ReadUInt64(ref result.gameserverId_);
            break;
          }
          case 16: {
            result.hasPing = input.ReadInt32(ref result.ping_);
            break;
          }
          case 24: {
            result.hasIp = input.ReadUInt32(ref result.ip_);
            break;
          }
          case 32: {
            result.hasPort = input.ReadUInt32(ref result.port_);
            break;
          }
          case 40: {
            result.hasInstances = input.ReadUInt32(ref result.instances_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGameserverId {
      get { return result.hasGameserverId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong GameserverId {
      get { return result.GameserverId; }
      set { SetGameserverId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGameserverId(ulong value) {
      PrepareBuilder();
      result.hasGameserverId = true;
      result.gameserverId_ = value;
      return this;
    }
    public Builder ClearGameserverId() {
      PrepareBuilder();
      result.hasGameserverId = false;
      result.gameserverId_ = 0UL;
      return this;
    }
    
    public bool HasPing {
      get { return result.hasPing; }
    }
    public int Ping {
      get { return result.Ping; }
      set { SetPing(value); }
    }
    public Builder SetPing(int value) {
      PrepareBuilder();
      result.hasPing = true;
      result.ping_ = value;
      return this;
    }
    public Builder ClearPing() {
      PrepareBuilder();
      result.hasPing = false;
      result.ping_ = 0;
      return this;
    }
    
    public bool HasIp {
      get { return result.hasIp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Ip {
      get { return result.Ip; }
      set { SetIp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetIp(uint value) {
      PrepareBuilder();
      result.hasIp = true;
      result.ip_ = value;
      return this;
    }
    public Builder ClearIp() {
      PrepareBuilder();
      result.hasIp = false;
      result.ip_ = 0;
      return this;
    }
    
    public bool HasPort {
      get { return result.hasPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint Port {
      get { return result.Port; }
      set { SetPort(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPort(uint value) {
      PrepareBuilder();
      result.hasPort = true;
      result.port_ = value;
      return this;
    }
    public Builder ClearPort() {
      PrepareBuilder();
      result.hasPort = false;
      result.port_ = 0;
      return this;
    }
    
    public bool HasInstances {
      get { return result.hasInstances; }
    }
    [global::System.CLSCompliant(false)]
    public uint Instances {
      get { return result.Instances; }
      set { SetInstances(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetInstances(uint value) {
      PrepareBuilder();
      result.hasInstances = true;
      result.instances_ = value;
      return this;
    }
    public Builder ClearInstances() {
      PrepareBuilder();
      result.hasInstances = false;
      result.instances_ = 0;
      return this;
    }
  }
  static GameServerPing() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class DetailedSearchStatistic : pb::GeneratedMessage<DetailedSearchStatistic, DetailedSearchStatistic.Builder> {
  private DetailedSearchStatistic() { }
  private static readonly DetailedSearchStatistic defaultInstance = new DetailedSearchStatistic().MakeReadOnly();
  private static readonly string[] _detailedSearchStatisticFieldNames = new string[] { "game_type", "players_searching", "search_time_avg" };
  private static readonly uint[] _detailedSearchStatisticFieldTags = new uint[] { 8, 32, 16 };
  public static DetailedSearchStatistic DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override DetailedSearchStatistic DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override DetailedSearchStatistic ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_DetailedSearchStatistic__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<DetailedSearchStatistic, DetailedSearchStatistic.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_DetailedSearchStatistic__FieldAccessorTable; }
  }
  
  public const int GameTypeFieldNumber = 1;
  private bool hasGameType;
  private uint gameType_;
  public bool HasGameType {
    get { return hasGameType; }
  }
  [global::System.CLSCompliant(false)]
  public uint GameType {
    get { return gameType_; }
  }
  
  public const int SearchTimeAvgFieldNumber = 2;
  private bool hasSearchTimeAvg;
  private uint searchTimeAvg_;
  public bool HasSearchTimeAvg {
    get { return hasSearchTimeAvg; }
  }
  [global::System.CLSCompliant(false)]
  public uint SearchTimeAvg {
    get { return searchTimeAvg_; }
  }
  
  public const int PlayersSearchingFieldNumber = 4;
  private bool hasPlayersSearching;
  private uint playersSearching_;
  public bool HasPlayersSearching {
    get { return hasPlayersSearching; }
  }
  [global::System.CLSCompliant(false)]
  public uint PlayersSearching {
    get { return playersSearching_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _detailedSearchStatisticFieldNames;
    if (hasGameType) {
      output.WriteUInt32(1, field_names[0], GameType);
    }
    if (hasSearchTimeAvg) {
      output.WriteUInt32(2, field_names[2], SearchTimeAvg);
    }
    if (hasPlayersSearching) {
      output.WriteUInt32(4, field_names[1], PlayersSearching);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, GameType);
      }
      if (hasSearchTimeAvg) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, SearchTimeAvg);
      }
      if (hasPlayersSearching) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, PlayersSearching);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static DetailedSearchStatistic ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static DetailedSearchStatistic ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static DetailedSearchStatistic ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private DetailedSearchStatistic MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(DetailedSearchStatistic prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<DetailedSearchStatistic, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(DetailedSearchStatistic cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private DetailedSearchStatistic result;
    
    private DetailedSearchStatistic PrepareBuilder() {
      if (resultIsReadOnly) {
        DetailedSearchStatistic original = result;
        result = new DetailedSearchStatistic();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override DetailedSearchStatistic MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::DetailedSearchStatistic.Descriptor; }
    }
    
    public override DetailedSearchStatistic DefaultInstanceForType {
      get { return global::DetailedSearchStatistic.DefaultInstance; }
    }
    
    public override DetailedSearchStatistic BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is DetailedSearchStatistic) {
        return MergeFrom((DetailedSearchStatistic) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(DetailedSearchStatistic other) {
      if (other == global::DetailedSearchStatistic.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasSearchTimeAvg) {
        SearchTimeAvg = other.SearchTimeAvg;
      }
      if (other.HasPlayersSearching) {
        PlayersSearching = other.PlayersSearching;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_detailedSearchStatisticFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _detailedSearchStatisticFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGameType = input.ReadUInt32(ref result.gameType_);
            break;
          }
          case 16: {
            result.hasSearchTimeAvg = input.ReadUInt32(ref result.searchTimeAvg_);
            break;
          }
          case 32: {
            result.hasPlayersSearching = input.ReadUInt32(ref result.playersSearching_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGameType {
      get { return result.hasGameType; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameType {
      get { return result.GameType; }
      set { SetGameType(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGameType(uint value) {
      PrepareBuilder();
      result.hasGameType = true;
      result.gameType_ = value;
      return this;
    }
    public Builder ClearGameType() {
      PrepareBuilder();
      result.hasGameType = false;
      result.gameType_ = 0;
      return this;
    }
    
    public bool HasSearchTimeAvg {
      get { return result.hasSearchTimeAvg; }
    }
    [global::System.CLSCompliant(false)]
    public uint SearchTimeAvg {
      get { return result.SearchTimeAvg; }
      set { SetSearchTimeAvg(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSearchTimeAvg(uint value) {
      PrepareBuilder();
      result.hasSearchTimeAvg = true;
      result.searchTimeAvg_ = value;
      return this;
    }
    public Builder ClearSearchTimeAvg() {
      PrepareBuilder();
      result.hasSearchTimeAvg = false;
      result.searchTimeAvg_ = 0;
      return this;
    }
    
    public bool HasPlayersSearching {
      get { return result.hasPlayersSearching; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayersSearching {
      get { return result.PlayersSearching; }
      set { SetPlayersSearching(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPlayersSearching(uint value) {
      PrepareBuilder();
      result.hasPlayersSearching = true;
      result.playersSearching_ = value;
      return this;
    }
    public Builder ClearPlayersSearching() {
      PrepareBuilder();
      result.hasPlayersSearching = false;
      result.playersSearching_ = 0;
      return this;
    }
  }
  static DetailedSearchStatistic() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TournamentPlayer : pb::GeneratedMessage<TournamentPlayer, TournamentPlayer.Builder> {
  private TournamentPlayer() { }
  private static readonly TournamentPlayer defaultInstance = new TournamentPlayer().MakeReadOnly();
  private static readonly string[] _tournamentPlayerFieldNames = new string[] { "account_id", "player_desc", "player_dob", "player_flag", "player_location", "player_name", "player_nick" };
  private static readonly uint[] _tournamentPlayerFieldTags = new uint[] { 8, 58, 32, 42, 50, 26, 18 };
  public static TournamentPlayer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TournamentPlayer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TournamentPlayer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentPlayer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TournamentPlayer, TournamentPlayer.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentPlayer__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int PlayerNickFieldNumber = 2;
  private bool hasPlayerNick;
  private string playerNick_ = "";
  public bool HasPlayerNick {
    get { return hasPlayerNick; }
  }
  public string PlayerNick {
    get { return playerNick_; }
  }
  
  public const int PlayerNameFieldNumber = 3;
  private bool hasPlayerName;
  private string playerName_ = "";
  public bool HasPlayerName {
    get { return hasPlayerName; }
  }
  public string PlayerName {
    get { return playerName_; }
  }
  
  public const int PlayerDobFieldNumber = 4;
  private bool hasPlayerDob;
  private uint playerDob_;
  public bool HasPlayerDob {
    get { return hasPlayerDob; }
  }
  [global::System.CLSCompliant(false)]
  public uint PlayerDob {
    get { return playerDob_; }
  }
  
  public const int PlayerFlagFieldNumber = 5;
  private bool hasPlayerFlag;
  private string playerFlag_ = "";
  public bool HasPlayerFlag {
    get { return hasPlayerFlag; }
  }
  public string PlayerFlag {
    get { return playerFlag_; }
  }
  
  public const int PlayerLocationFieldNumber = 6;
  private bool hasPlayerLocation;
  private string playerLocation_ = "";
  public bool HasPlayerLocation {
    get { return hasPlayerLocation; }
  }
  public string PlayerLocation {
    get { return playerLocation_; }
  }
  
  public const int PlayerDescFieldNumber = 7;
  private bool hasPlayerDesc;
  private string playerDesc_ = "";
  public bool HasPlayerDesc {
    get { return hasPlayerDesc; }
  }
  public string PlayerDesc {
    get { return playerDesc_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _tournamentPlayerFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasPlayerNick) {
      output.WriteString(2, field_names[6], PlayerNick);
    }
    if (hasPlayerName) {
      output.WriteString(3, field_names[5], PlayerName);
    }
    if (hasPlayerDob) {
      output.WriteUInt32(4, field_names[2], PlayerDob);
    }
    if (hasPlayerFlag) {
      output.WriteString(5, field_names[3], PlayerFlag);
    }
    if (hasPlayerLocation) {
      output.WriteString(6, field_names[4], PlayerLocation);
    }
    if (hasPlayerDesc) {
      output.WriteString(7, field_names[1], PlayerDesc);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasPlayerNick) {
        size += pb::CodedOutputStream.ComputeStringSize(2, PlayerNick);
      }
      if (hasPlayerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PlayerName);
      }
      if (hasPlayerDob) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, PlayerDob);
      }
      if (hasPlayerFlag) {
        size += pb::CodedOutputStream.ComputeStringSize(5, PlayerFlag);
      }
      if (hasPlayerLocation) {
        size += pb::CodedOutputStream.ComputeStringSize(6, PlayerLocation);
      }
      if (hasPlayerDesc) {
        size += pb::CodedOutputStream.ComputeStringSize(7, PlayerDesc);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TournamentPlayer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TournamentPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TournamentPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TournamentPlayer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TournamentPlayer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TournamentPlayer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TournamentPlayer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TournamentPlayer result;
    
    private TournamentPlayer PrepareBuilder() {
      if (resultIsReadOnly) {
        TournamentPlayer original = result;
        result = new TournamentPlayer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TournamentPlayer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TournamentPlayer.Descriptor; }
    }
    
    public override TournamentPlayer DefaultInstanceForType {
      get { return global::TournamentPlayer.DefaultInstance; }
    }
    
    public override TournamentPlayer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TournamentPlayer) {
        return MergeFrom((TournamentPlayer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TournamentPlayer other) {
      if (other == global::TournamentPlayer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasPlayerNick) {
        PlayerNick = other.PlayerNick;
      }
      if (other.HasPlayerName) {
        PlayerName = other.PlayerName;
      }
      if (other.HasPlayerDob) {
        PlayerDob = other.PlayerDob;
      }
      if (other.HasPlayerFlag) {
        PlayerFlag = other.PlayerFlag;
      }
      if (other.HasPlayerLocation) {
        PlayerLocation = other.PlayerLocation;
      }
      if (other.HasPlayerDesc) {
        PlayerDesc = other.PlayerDesc;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_tournamentPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _tournamentPlayerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 18: {
            result.hasPlayerNick = input.ReadString(ref result.playerNick_);
            break;
          }
          case 26: {
            result.hasPlayerName = input.ReadString(ref result.playerName_);
            break;
          }
          case 32: {
            result.hasPlayerDob = input.ReadUInt32(ref result.playerDob_);
            break;
          }
          case 42: {
            result.hasPlayerFlag = input.ReadString(ref result.playerFlag_);
            break;
          }
          case 50: {
            result.hasPlayerLocation = input.ReadString(ref result.playerLocation_);
            break;
          }
          case 58: {
            result.hasPlayerDesc = input.ReadString(ref result.playerDesc_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasPlayerNick {
      get { return result.hasPlayerNick; }
    }
    public string PlayerNick {
      get { return result.PlayerNick; }
      set { SetPlayerNick(value); }
    }
    public Builder SetPlayerNick(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerNick = true;
      result.playerNick_ = value;
      return this;
    }
    public Builder ClearPlayerNick() {
      PrepareBuilder();
      result.hasPlayerNick = false;
      result.playerNick_ = "";
      return this;
    }
    
    public bool HasPlayerName {
      get { return result.hasPlayerName; }
    }
    public string PlayerName {
      get { return result.PlayerName; }
      set { SetPlayerName(value); }
    }
    public Builder SetPlayerName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerName = true;
      result.playerName_ = value;
      return this;
    }
    public Builder ClearPlayerName() {
      PrepareBuilder();
      result.hasPlayerName = false;
      result.playerName_ = "";
      return this;
    }
    
    public bool HasPlayerDob {
      get { return result.hasPlayerDob; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayerDob {
      get { return result.PlayerDob; }
      set { SetPlayerDob(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPlayerDob(uint value) {
      PrepareBuilder();
      result.hasPlayerDob = true;
      result.playerDob_ = value;
      return this;
    }
    public Builder ClearPlayerDob() {
      PrepareBuilder();
      result.hasPlayerDob = false;
      result.playerDob_ = 0;
      return this;
    }
    
    public bool HasPlayerFlag {
      get { return result.hasPlayerFlag; }
    }
    public string PlayerFlag {
      get { return result.PlayerFlag; }
      set { SetPlayerFlag(value); }
    }
    public Builder SetPlayerFlag(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerFlag = true;
      result.playerFlag_ = value;
      return this;
    }
    public Builder ClearPlayerFlag() {
      PrepareBuilder();
      result.hasPlayerFlag = false;
      result.playerFlag_ = "";
      return this;
    }
    
    public bool HasPlayerLocation {
      get { return result.hasPlayerLocation; }
    }
    public string PlayerLocation {
      get { return result.PlayerLocation; }
      set { SetPlayerLocation(value); }
    }
    public Builder SetPlayerLocation(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerLocation = true;
      result.playerLocation_ = value;
      return this;
    }
    public Builder ClearPlayerLocation() {
      PrepareBuilder();
      result.hasPlayerLocation = false;
      result.playerLocation_ = "";
      return this;
    }
    
    public bool HasPlayerDesc {
      get { return result.hasPlayerDesc; }
    }
    public string PlayerDesc {
      get { return result.PlayerDesc; }
      set { SetPlayerDesc(value); }
    }
    public Builder SetPlayerDesc(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPlayerDesc = true;
      result.playerDesc_ = value;
      return this;
    }
    public Builder ClearPlayerDesc() {
      PrepareBuilder();
      result.hasPlayerDesc = false;
      result.playerDesc_ = "";
      return this;
    }
  }
  static TournamentPlayer() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TournamentTeam : pb::GeneratedMessage<TournamentTeam, TournamentTeam.Builder> {
  private TournamentTeam() { }
  private static readonly TournamentTeam defaultInstance = new TournamentTeam().MakeReadOnly();
  private static readonly string[] _tournamentTeamFieldNames = new string[] { "players", "team_flag", "team_id", "team_name", "team_tag" };
  private static readonly uint[] _tournamentTeamFieldTags = new uint[] { 42, 26, 8, 34, 18 };
  public static TournamentTeam DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TournamentTeam DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TournamentTeam ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentTeam__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TournamentTeam, TournamentTeam.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentTeam__FieldAccessorTable; }
  }
  
  public const int TeamIdFieldNumber = 1;
  private bool hasTeamId;
  private int teamId_;
  public bool HasTeamId {
    get { return hasTeamId; }
  }
  public int TeamId {
    get { return teamId_; }
  }
  
  public const int TeamTagFieldNumber = 2;
  private bool hasTeamTag;
  private string teamTag_ = "";
  public bool HasTeamTag {
    get { return hasTeamTag; }
  }
  public string TeamTag {
    get { return teamTag_; }
  }
  
  public const int TeamFlagFieldNumber = 3;
  private bool hasTeamFlag;
  private string teamFlag_ = "";
  public bool HasTeamFlag {
    get { return hasTeamFlag; }
  }
  public string TeamFlag {
    get { return teamFlag_; }
  }
  
  public const int TeamNameFieldNumber = 4;
  private bool hasTeamName;
  private string teamName_ = "";
  public bool HasTeamName {
    get { return hasTeamName; }
  }
  public string TeamName {
    get { return teamName_; }
  }
  
  public const int PlayersFieldNumber = 5;
  private pbc::PopsicleList<global::TournamentPlayer> players_ = new pbc::PopsicleList<global::TournamentPlayer>();
  public scg::IList<global::TournamentPlayer> PlayersList {
    get { return players_; }
  }
  public int PlayersCount {
    get { return players_.Count; }
  }
  public global::TournamentPlayer GetPlayers(int index) {
    return players_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _tournamentTeamFieldNames;
    if (hasTeamId) {
      output.WriteInt32(1, field_names[2], TeamId);
    }
    if (hasTeamTag) {
      output.WriteString(2, field_names[4], TeamTag);
    }
    if (hasTeamFlag) {
      output.WriteString(3, field_names[1], TeamFlag);
    }
    if (hasTeamName) {
      output.WriteString(4, field_names[3], TeamName);
    }
    if (players_.Count > 0) {
      output.WriteMessageArray(5, field_names[0], players_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, TeamId);
      }
      if (hasTeamTag) {
        size += pb::CodedOutputStream.ComputeStringSize(2, TeamTag);
      }
      if (hasTeamFlag) {
        size += pb::CodedOutputStream.ComputeStringSize(3, TeamFlag);
      }
      if (hasTeamName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, TeamName);
      }
      foreach (global::TournamentPlayer element in PlayersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TournamentTeam ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentTeam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentTeam ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentTeam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentTeam ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentTeam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TournamentTeam ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TournamentTeam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TournamentTeam ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentTeam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TournamentTeam MakeReadOnly() {
    players_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TournamentTeam prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TournamentTeam, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TournamentTeam cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TournamentTeam result;
    
    private TournamentTeam PrepareBuilder() {
      if (resultIsReadOnly) {
        TournamentTeam original = result;
        result = new TournamentTeam();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TournamentTeam MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TournamentTeam.Descriptor; }
    }
    
    public override TournamentTeam DefaultInstanceForType {
      get { return global::TournamentTeam.DefaultInstance; }
    }
    
    public override TournamentTeam BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TournamentTeam) {
        return MergeFrom((TournamentTeam) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TournamentTeam other) {
      if (other == global::TournamentTeam.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasTeamTag) {
        TeamTag = other.TeamTag;
      }
      if (other.HasTeamFlag) {
        TeamFlag = other.TeamFlag;
      }
      if (other.HasTeamName) {
        TeamName = other.TeamName;
      }
      if (other.players_.Count != 0) {
        result.players_.Add(other.players_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_tournamentTeamFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _tournamentTeamFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTeamId = input.ReadInt32(ref result.teamId_);
            break;
          }
          case 18: {
            result.hasTeamTag = input.ReadString(ref result.teamTag_);
            break;
          }
          case 26: {
            result.hasTeamFlag = input.ReadString(ref result.teamFlag_);
            break;
          }
          case 34: {
            result.hasTeamName = input.ReadString(ref result.teamName_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.players_, global::TournamentPlayer.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTeamId {
      get { return result.hasTeamId; }
    }
    public int TeamId {
      get { return result.TeamId; }
      set { SetTeamId(value); }
    }
    public Builder SetTeamId(int value) {
      PrepareBuilder();
      result.hasTeamId = true;
      result.teamId_ = value;
      return this;
    }
    public Builder ClearTeamId() {
      PrepareBuilder();
      result.hasTeamId = false;
      result.teamId_ = 0;
      return this;
    }
    
    public bool HasTeamTag {
      get { return result.hasTeamTag; }
    }
    public string TeamTag {
      get { return result.TeamTag; }
      set { SetTeamTag(value); }
    }
    public Builder SetTeamTag(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTeamTag = true;
      result.teamTag_ = value;
      return this;
    }
    public Builder ClearTeamTag() {
      PrepareBuilder();
      result.hasTeamTag = false;
      result.teamTag_ = "";
      return this;
    }
    
    public bool HasTeamFlag {
      get { return result.hasTeamFlag; }
    }
    public string TeamFlag {
      get { return result.TeamFlag; }
      set { SetTeamFlag(value); }
    }
    public Builder SetTeamFlag(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTeamFlag = true;
      result.teamFlag_ = value;
      return this;
    }
    public Builder ClearTeamFlag() {
      PrepareBuilder();
      result.hasTeamFlag = false;
      result.teamFlag_ = "";
      return this;
    }
    
    public bool HasTeamName {
      get { return result.hasTeamName; }
    }
    public string TeamName {
      get { return result.TeamName; }
      set { SetTeamName(value); }
    }
    public Builder SetTeamName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTeamName = true;
      result.teamName_ = value;
      return this;
    }
    public Builder ClearTeamName() {
      PrepareBuilder();
      result.hasTeamName = false;
      result.teamName_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::TournamentPlayer> PlayersList {
      get { return PrepareBuilder().players_; }
    }
    public int PlayersCount {
      get { return result.PlayersCount; }
    }
    public global::TournamentPlayer GetPlayers(int index) {
      return result.GetPlayers(index);
    }
    public Builder SetPlayers(int index, global::TournamentPlayer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.players_[index] = value;
      return this;
    }
    public Builder SetPlayers(int index, global::TournamentPlayer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.players_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayers(global::TournamentPlayer value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.players_.Add(value);
      return this;
    }
    public Builder AddPlayers(global::TournamentPlayer.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.players_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayers(scg::IEnumerable<global::TournamentPlayer> values) {
      PrepareBuilder();
      result.players_.Add(values);
      return this;
    }
    public Builder ClearPlayers() {
      PrepareBuilder();
      result.players_.Clear();
      return this;
    }
  }
  static TournamentTeam() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TournamentEvent : pb::GeneratedMessage<TournamentEvent, TournamentEvent.Builder> {
  private TournamentEvent() { }
  private static readonly TournamentEvent defaultInstance = new TournamentEvent().MakeReadOnly();
  private static readonly string[] _tournamentEventFieldNames = new string[] { "active_section_id", "event_id", "event_name", "event_public", "event_stage_id", "event_stage_name", "event_tag", "event_time_end", "event_time_start" };
  private static readonly uint[] _tournamentEventFieldTags = new uint[] { 72, 8, 26, 48, 56, 66, 18, 40, 32 };
  public static TournamentEvent DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TournamentEvent DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TournamentEvent ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentEvent__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TournamentEvent, TournamentEvent.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentEvent__FieldAccessorTable; }
  }
  
  public const int EventIdFieldNumber = 1;
  private bool hasEventId;
  private int eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public int EventId {
    get { return eventId_; }
  }
  
  public const int EventTagFieldNumber = 2;
  private bool hasEventTag;
  private string eventTag_ = "";
  public bool HasEventTag {
    get { return hasEventTag; }
  }
  public string EventTag {
    get { return eventTag_; }
  }
  
  public const int EventNameFieldNumber = 3;
  private bool hasEventName;
  private string eventName_ = "";
  public bool HasEventName {
    get { return hasEventName; }
  }
  public string EventName {
    get { return eventName_; }
  }
  
  public const int EventTimeStartFieldNumber = 4;
  private bool hasEventTimeStart;
  private uint eventTimeStart_;
  public bool HasEventTimeStart {
    get { return hasEventTimeStart; }
  }
  [global::System.CLSCompliant(false)]
  public uint EventTimeStart {
    get { return eventTimeStart_; }
  }
  
  public const int EventTimeEndFieldNumber = 5;
  private bool hasEventTimeEnd;
  private uint eventTimeEnd_;
  public bool HasEventTimeEnd {
    get { return hasEventTimeEnd; }
  }
  [global::System.CLSCompliant(false)]
  public uint EventTimeEnd {
    get { return eventTimeEnd_; }
  }
  
  public const int EventPublicFieldNumber = 6;
  private bool hasEventPublic;
  private int eventPublic_;
  public bool HasEventPublic {
    get { return hasEventPublic; }
  }
  public int EventPublic {
    get { return eventPublic_; }
  }
  
  public const int EventStageIdFieldNumber = 7;
  private bool hasEventStageId;
  private int eventStageId_;
  public bool HasEventStageId {
    get { return hasEventStageId; }
  }
  public int EventStageId {
    get { return eventStageId_; }
  }
  
  public const int EventStageNameFieldNumber = 8;
  private bool hasEventStageName;
  private string eventStageName_ = "";
  public bool HasEventStageName {
    get { return hasEventStageName; }
  }
  public string EventStageName {
    get { return eventStageName_; }
  }
  
  public const int ActiveSectionIdFieldNumber = 9;
  private bool hasActiveSectionId;
  private uint activeSectionId_;
  public bool HasActiveSectionId {
    get { return hasActiveSectionId; }
  }
  [global::System.CLSCompliant(false)]
  public uint ActiveSectionId {
    get { return activeSectionId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _tournamentEventFieldNames;
    if (hasEventId) {
      output.WriteInt32(1, field_names[1], EventId);
    }
    if (hasEventTag) {
      output.WriteString(2, field_names[6], EventTag);
    }
    if (hasEventName) {
      output.WriteString(3, field_names[2], EventName);
    }
    if (hasEventTimeStart) {
      output.WriteUInt32(4, field_names[8], EventTimeStart);
    }
    if (hasEventTimeEnd) {
      output.WriteUInt32(5, field_names[7], EventTimeEnd);
    }
    if (hasEventPublic) {
      output.WriteInt32(6, field_names[3], EventPublic);
    }
    if (hasEventStageId) {
      output.WriteInt32(7, field_names[4], EventStageId);
    }
    if (hasEventStageName) {
      output.WriteString(8, field_names[5], EventStageName);
    }
    if (hasActiveSectionId) {
      output.WriteUInt32(9, field_names[0], ActiveSectionId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, EventId);
      }
      if (hasEventTag) {
        size += pb::CodedOutputStream.ComputeStringSize(2, EventTag);
      }
      if (hasEventName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, EventName);
      }
      if (hasEventTimeStart) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, EventTimeStart);
      }
      if (hasEventTimeEnd) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, EventTimeEnd);
      }
      if (hasEventPublic) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, EventPublic);
      }
      if (hasEventStageId) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, EventStageId);
      }
      if (hasEventStageName) {
        size += pb::CodedOutputStream.ComputeStringSize(8, EventStageName);
      }
      if (hasActiveSectionId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, ActiveSectionId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TournamentEvent ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentEvent ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentEvent ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentEvent ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentEvent ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentEvent ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TournamentEvent ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TournamentEvent ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TournamentEvent ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentEvent ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TournamentEvent MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TournamentEvent prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TournamentEvent, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TournamentEvent cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TournamentEvent result;
    
    private TournamentEvent PrepareBuilder() {
      if (resultIsReadOnly) {
        TournamentEvent original = result;
        result = new TournamentEvent();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TournamentEvent MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TournamentEvent.Descriptor; }
    }
    
    public override TournamentEvent DefaultInstanceForType {
      get { return global::TournamentEvent.DefaultInstance; }
    }
    
    public override TournamentEvent BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TournamentEvent) {
        return MergeFrom((TournamentEvent) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TournamentEvent other) {
      if (other == global::TournamentEvent.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasEventTag) {
        EventTag = other.EventTag;
      }
      if (other.HasEventName) {
        EventName = other.EventName;
      }
      if (other.HasEventTimeStart) {
        EventTimeStart = other.EventTimeStart;
      }
      if (other.HasEventTimeEnd) {
        EventTimeEnd = other.EventTimeEnd;
      }
      if (other.HasEventPublic) {
        EventPublic = other.EventPublic;
      }
      if (other.HasEventStageId) {
        EventStageId = other.EventStageId;
      }
      if (other.HasEventStageName) {
        EventStageName = other.EventStageName;
      }
      if (other.HasActiveSectionId) {
        ActiveSectionId = other.ActiveSectionId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_tournamentEventFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _tournamentEventFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventId = input.ReadInt32(ref result.eventId_);
            break;
          }
          case 18: {
            result.hasEventTag = input.ReadString(ref result.eventTag_);
            break;
          }
          case 26: {
            result.hasEventName = input.ReadString(ref result.eventName_);
            break;
          }
          case 32: {
            result.hasEventTimeStart = input.ReadUInt32(ref result.eventTimeStart_);
            break;
          }
          case 40: {
            result.hasEventTimeEnd = input.ReadUInt32(ref result.eventTimeEnd_);
            break;
          }
          case 48: {
            result.hasEventPublic = input.ReadInt32(ref result.eventPublic_);
            break;
          }
          case 56: {
            result.hasEventStageId = input.ReadInt32(ref result.eventStageId_);
            break;
          }
          case 66: {
            result.hasEventStageName = input.ReadString(ref result.eventStageName_);
            break;
          }
          case 72: {
            result.hasActiveSectionId = input.ReadUInt32(ref result.activeSectionId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public int EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(int value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0;
      return this;
    }
    
    public bool HasEventTag {
      get { return result.hasEventTag; }
    }
    public string EventTag {
      get { return result.EventTag; }
      set { SetEventTag(value); }
    }
    public Builder SetEventTag(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEventTag = true;
      result.eventTag_ = value;
      return this;
    }
    public Builder ClearEventTag() {
      PrepareBuilder();
      result.hasEventTag = false;
      result.eventTag_ = "";
      return this;
    }
    
    public bool HasEventName {
      get { return result.hasEventName; }
    }
    public string EventName {
      get { return result.EventName; }
      set { SetEventName(value); }
    }
    public Builder SetEventName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEventName = true;
      result.eventName_ = value;
      return this;
    }
    public Builder ClearEventName() {
      PrepareBuilder();
      result.hasEventName = false;
      result.eventName_ = "";
      return this;
    }
    
    public bool HasEventTimeStart {
      get { return result.hasEventTimeStart; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventTimeStart {
      get { return result.EventTimeStart; }
      set { SetEventTimeStart(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetEventTimeStart(uint value) {
      PrepareBuilder();
      result.hasEventTimeStart = true;
      result.eventTimeStart_ = value;
      return this;
    }
    public Builder ClearEventTimeStart() {
      PrepareBuilder();
      result.hasEventTimeStart = false;
      result.eventTimeStart_ = 0;
      return this;
    }
    
    public bool HasEventTimeEnd {
      get { return result.hasEventTimeEnd; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventTimeEnd {
      get { return result.EventTimeEnd; }
      set { SetEventTimeEnd(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetEventTimeEnd(uint value) {
      PrepareBuilder();
      result.hasEventTimeEnd = true;
      result.eventTimeEnd_ = value;
      return this;
    }
    public Builder ClearEventTimeEnd() {
      PrepareBuilder();
      result.hasEventTimeEnd = false;
      result.eventTimeEnd_ = 0;
      return this;
    }
    
    public bool HasEventPublic {
      get { return result.hasEventPublic; }
    }
    public int EventPublic {
      get { return result.EventPublic; }
      set { SetEventPublic(value); }
    }
    public Builder SetEventPublic(int value) {
      PrepareBuilder();
      result.hasEventPublic = true;
      result.eventPublic_ = value;
      return this;
    }
    public Builder ClearEventPublic() {
      PrepareBuilder();
      result.hasEventPublic = false;
      result.eventPublic_ = 0;
      return this;
    }
    
    public bool HasEventStageId {
      get { return result.hasEventStageId; }
    }
    public int EventStageId {
      get { return result.EventStageId; }
      set { SetEventStageId(value); }
    }
    public Builder SetEventStageId(int value) {
      PrepareBuilder();
      result.hasEventStageId = true;
      result.eventStageId_ = value;
      return this;
    }
    public Builder ClearEventStageId() {
      PrepareBuilder();
      result.hasEventStageId = false;
      result.eventStageId_ = 0;
      return this;
    }
    
    public bool HasEventStageName {
      get { return result.hasEventStageName; }
    }
    public string EventStageName {
      get { return result.EventStageName; }
      set { SetEventStageName(value); }
    }
    public Builder SetEventStageName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasEventStageName = true;
      result.eventStageName_ = value;
      return this;
    }
    public Builder ClearEventStageName() {
      PrepareBuilder();
      result.hasEventStageName = false;
      result.eventStageName_ = "";
      return this;
    }
    
    public bool HasActiveSectionId {
      get { return result.hasActiveSectionId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ActiveSectionId {
      get { return result.ActiveSectionId; }
      set { SetActiveSectionId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetActiveSectionId(uint value) {
      PrepareBuilder();
      result.hasActiveSectionId = true;
      result.activeSectionId_ = value;
      return this;
    }
    public Builder ClearActiveSectionId() {
      PrepareBuilder();
      result.hasActiveSectionId = false;
      result.activeSectionId_ = 0;
      return this;
    }
  }
  static TournamentEvent() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class GlobalStatistics : pb::GeneratedMessage<GlobalStatistics, GlobalStatistics.Builder> {
  private GlobalStatistics() { }
  private static readonly GlobalStatistics defaultInstance = new GlobalStatistics().MakeReadOnly();
  private static readonly string[] _globalStatisticsFieldNames = new string[] { "active_survey_id", "active_tournament_eventid", "main_post_url", "ongoing_matches", "players_online", "players_searching", "pricesheet_version", "required_appid_version", "search_statistics", "search_time_avg", "servers_available", "servers_online", "twitch_streams_version" };
  private static readonly uint[] _globalStatisticsFieldTags = new uint[] { 104, 96, 66, 40, 8, 24, 80, 72, 58, 48, 32, 16, 88 };
  public static GlobalStatistics DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override GlobalStatistics DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override GlobalStatistics ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_GlobalStatistics__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<GlobalStatistics, GlobalStatistics.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_GlobalStatistics__FieldAccessorTable; }
  }
  
  public const int PlayersOnlineFieldNumber = 1;
  private bool hasPlayersOnline;
  private uint playersOnline_;
  public bool HasPlayersOnline {
    get { return hasPlayersOnline; }
  }
  [global::System.CLSCompliant(false)]
  public uint PlayersOnline {
    get { return playersOnline_; }
  }
  
  public const int ServersOnlineFieldNumber = 2;
  private bool hasServersOnline;
  private uint serversOnline_;
  public bool HasServersOnline {
    get { return hasServersOnline; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServersOnline {
    get { return serversOnline_; }
  }
  
  public const int PlayersSearchingFieldNumber = 3;
  private bool hasPlayersSearching;
  private uint playersSearching_;
  public bool HasPlayersSearching {
    get { return hasPlayersSearching; }
  }
  [global::System.CLSCompliant(false)]
  public uint PlayersSearching {
    get { return playersSearching_; }
  }
  
  public const int ServersAvailableFieldNumber = 4;
  private bool hasServersAvailable;
  private uint serversAvailable_;
  public bool HasServersAvailable {
    get { return hasServersAvailable; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServersAvailable {
    get { return serversAvailable_; }
  }
  
  public const int OngoingMatchesFieldNumber = 5;
  private bool hasOngoingMatches;
  private uint ongoingMatches_;
  public bool HasOngoingMatches {
    get { return hasOngoingMatches; }
  }
  [global::System.CLSCompliant(false)]
  public uint OngoingMatches {
    get { return ongoingMatches_; }
  }
  
  public const int SearchTimeAvgFieldNumber = 6;
  private bool hasSearchTimeAvg;
  private uint searchTimeAvg_;
  public bool HasSearchTimeAvg {
    get { return hasSearchTimeAvg; }
  }
  [global::System.CLSCompliant(false)]
  public uint SearchTimeAvg {
    get { return searchTimeAvg_; }
  }
  
  public const int SearchStatisticsFieldNumber = 7;
  private pbc::PopsicleList<global::DetailedSearchStatistic> searchStatistics_ = new pbc::PopsicleList<global::DetailedSearchStatistic>();
  public scg::IList<global::DetailedSearchStatistic> SearchStatisticsList {
    get { return searchStatistics_; }
  }
  public int SearchStatisticsCount {
    get { return searchStatistics_.Count; }
  }
  public global::DetailedSearchStatistic GetSearchStatistics(int index) {
    return searchStatistics_[index];
  }
  
  public const int MainPostUrlFieldNumber = 8;
  private bool hasMainPostUrl;
  private string mainPostUrl_ = "";
  public bool HasMainPostUrl {
    get { return hasMainPostUrl; }
  }
  public string MainPostUrl {
    get { return mainPostUrl_; }
  }
  
  public const int RequiredAppidVersionFieldNumber = 9;
  private bool hasRequiredAppidVersion;
  private uint requiredAppidVersion_;
  public bool HasRequiredAppidVersion {
    get { return hasRequiredAppidVersion; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequiredAppidVersion {
    get { return requiredAppidVersion_; }
  }
  
  public const int PricesheetVersionFieldNumber = 10;
  private bool hasPricesheetVersion;
  private uint pricesheetVersion_;
  public bool HasPricesheetVersion {
    get { return hasPricesheetVersion; }
  }
  [global::System.CLSCompliant(false)]
  public uint PricesheetVersion {
    get { return pricesheetVersion_; }
  }
  
  public const int TwitchStreamsVersionFieldNumber = 11;
  private bool hasTwitchStreamsVersion;
  private uint twitchStreamsVersion_;
  public bool HasTwitchStreamsVersion {
    get { return hasTwitchStreamsVersion; }
  }
  [global::System.CLSCompliant(false)]
  public uint TwitchStreamsVersion {
    get { return twitchStreamsVersion_; }
  }
  
  public const int ActiveTournamentEventidFieldNumber = 12;
  private bool hasActiveTournamentEventid;
  private uint activeTournamentEventid_;
  public bool HasActiveTournamentEventid {
    get { return hasActiveTournamentEventid; }
  }
  [global::System.CLSCompliant(false)]
  public uint ActiveTournamentEventid {
    get { return activeTournamentEventid_; }
  }
  
  public const int ActiveSurveyIdFieldNumber = 13;
  private bool hasActiveSurveyId;
  private uint activeSurveyId_;
  public bool HasActiveSurveyId {
    get { return hasActiveSurveyId; }
  }
  [global::System.CLSCompliant(false)]
  public uint ActiveSurveyId {
    get { return activeSurveyId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _globalStatisticsFieldNames;
    if (hasPlayersOnline) {
      output.WriteUInt32(1, field_names[4], PlayersOnline);
    }
    if (hasServersOnline) {
      output.WriteUInt32(2, field_names[11], ServersOnline);
    }
    if (hasPlayersSearching) {
      output.WriteUInt32(3, field_names[5], PlayersSearching);
    }
    if (hasServersAvailable) {
      output.WriteUInt32(4, field_names[10], ServersAvailable);
    }
    if (hasOngoingMatches) {
      output.WriteUInt32(5, field_names[3], OngoingMatches);
    }
    if (hasSearchTimeAvg) {
      output.WriteUInt32(6, field_names[9], SearchTimeAvg);
    }
    if (searchStatistics_.Count > 0) {
      output.WriteMessageArray(7, field_names[8], searchStatistics_);
    }
    if (hasMainPostUrl) {
      output.WriteString(8, field_names[2], MainPostUrl);
    }
    if (hasRequiredAppidVersion) {
      output.WriteUInt32(9, field_names[7], RequiredAppidVersion);
    }
    if (hasPricesheetVersion) {
      output.WriteUInt32(10, field_names[6], PricesheetVersion);
    }
    if (hasTwitchStreamsVersion) {
      output.WriteUInt32(11, field_names[12], TwitchStreamsVersion);
    }
    if (hasActiveTournamentEventid) {
      output.WriteUInt32(12, field_names[1], ActiveTournamentEventid);
    }
    if (hasActiveSurveyId) {
      output.WriteUInt32(13, field_names[0], ActiveSurveyId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPlayersOnline) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, PlayersOnline);
      }
      if (hasServersOnline) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ServersOnline);
      }
      if (hasPlayersSearching) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, PlayersSearching);
      }
      if (hasServersAvailable) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ServersAvailable);
      }
      if (hasOngoingMatches) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, OngoingMatches);
      }
      if (hasSearchTimeAvg) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, SearchTimeAvg);
      }
      foreach (global::DetailedSearchStatistic element in SearchStatisticsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, element);
      }
      if (hasMainPostUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(8, MainPostUrl);
      }
      if (hasRequiredAppidVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, RequiredAppidVersion);
      }
      if (hasPricesheetVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, PricesheetVersion);
      }
      if (hasTwitchStreamsVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, TwitchStreamsVersion);
      }
      if (hasActiveTournamentEventid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, ActiveTournamentEventid);
      }
      if (hasActiveSurveyId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, ActiveSurveyId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static GlobalStatistics ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static GlobalStatistics ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static GlobalStatistics ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static GlobalStatistics ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private GlobalStatistics MakeReadOnly() {
    searchStatistics_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(GlobalStatistics prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<GlobalStatistics, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(GlobalStatistics cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private GlobalStatistics result;
    
    private GlobalStatistics PrepareBuilder() {
      if (resultIsReadOnly) {
        GlobalStatistics original = result;
        result = new GlobalStatistics();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override GlobalStatistics MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::GlobalStatistics.Descriptor; }
    }
    
    public override GlobalStatistics DefaultInstanceForType {
      get { return global::GlobalStatistics.DefaultInstance; }
    }
    
    public override GlobalStatistics BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is GlobalStatistics) {
        return MergeFrom((GlobalStatistics) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(GlobalStatistics other) {
      if (other == global::GlobalStatistics.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPlayersOnline) {
        PlayersOnline = other.PlayersOnline;
      }
      if (other.HasServersOnline) {
        ServersOnline = other.ServersOnline;
      }
      if (other.HasPlayersSearching) {
        PlayersSearching = other.PlayersSearching;
      }
      if (other.HasServersAvailable) {
        ServersAvailable = other.ServersAvailable;
      }
      if (other.HasOngoingMatches) {
        OngoingMatches = other.OngoingMatches;
      }
      if (other.HasSearchTimeAvg) {
        SearchTimeAvg = other.SearchTimeAvg;
      }
      if (other.searchStatistics_.Count != 0) {
        result.searchStatistics_.Add(other.searchStatistics_);
      }
      if (other.HasMainPostUrl) {
        MainPostUrl = other.MainPostUrl;
      }
      if (other.HasRequiredAppidVersion) {
        RequiredAppidVersion = other.RequiredAppidVersion;
      }
      if (other.HasPricesheetVersion) {
        PricesheetVersion = other.PricesheetVersion;
      }
      if (other.HasTwitchStreamsVersion) {
        TwitchStreamsVersion = other.TwitchStreamsVersion;
      }
      if (other.HasActiveTournamentEventid) {
        ActiveTournamentEventid = other.ActiveTournamentEventid;
      }
      if (other.HasActiveSurveyId) {
        ActiveSurveyId = other.ActiveSurveyId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_globalStatisticsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _globalStatisticsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPlayersOnline = input.ReadUInt32(ref result.playersOnline_);
            break;
          }
          case 16: {
            result.hasServersOnline = input.ReadUInt32(ref result.serversOnline_);
            break;
          }
          case 24: {
            result.hasPlayersSearching = input.ReadUInt32(ref result.playersSearching_);
            break;
          }
          case 32: {
            result.hasServersAvailable = input.ReadUInt32(ref result.serversAvailable_);
            break;
          }
          case 40: {
            result.hasOngoingMatches = input.ReadUInt32(ref result.ongoingMatches_);
            break;
          }
          case 48: {
            result.hasSearchTimeAvg = input.ReadUInt32(ref result.searchTimeAvg_);
            break;
          }
          case 58: {
            input.ReadMessageArray(tag, field_name, result.searchStatistics_, global::DetailedSearchStatistic.DefaultInstance, extensionRegistry);
            break;
          }
          case 66: {
            result.hasMainPostUrl = input.ReadString(ref result.mainPostUrl_);
            break;
          }
          case 72: {
            result.hasRequiredAppidVersion = input.ReadUInt32(ref result.requiredAppidVersion_);
            break;
          }
          case 80: {
            result.hasPricesheetVersion = input.ReadUInt32(ref result.pricesheetVersion_);
            break;
          }
          case 88: {
            result.hasTwitchStreamsVersion = input.ReadUInt32(ref result.twitchStreamsVersion_);
            break;
          }
          case 96: {
            result.hasActiveTournamentEventid = input.ReadUInt32(ref result.activeTournamentEventid_);
            break;
          }
          case 104: {
            result.hasActiveSurveyId = input.ReadUInt32(ref result.activeSurveyId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPlayersOnline {
      get { return result.hasPlayersOnline; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayersOnline {
      get { return result.PlayersOnline; }
      set { SetPlayersOnline(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPlayersOnline(uint value) {
      PrepareBuilder();
      result.hasPlayersOnline = true;
      result.playersOnline_ = value;
      return this;
    }
    public Builder ClearPlayersOnline() {
      PrepareBuilder();
      result.hasPlayersOnline = false;
      result.playersOnline_ = 0;
      return this;
    }
    
    public bool HasServersOnline {
      get { return result.hasServersOnline; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServersOnline {
      get { return result.ServersOnline; }
      set { SetServersOnline(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServersOnline(uint value) {
      PrepareBuilder();
      result.hasServersOnline = true;
      result.serversOnline_ = value;
      return this;
    }
    public Builder ClearServersOnline() {
      PrepareBuilder();
      result.hasServersOnline = false;
      result.serversOnline_ = 0;
      return this;
    }
    
    public bool HasPlayersSearching {
      get { return result.hasPlayersSearching; }
    }
    [global::System.CLSCompliant(false)]
    public uint PlayersSearching {
      get { return result.PlayersSearching; }
      set { SetPlayersSearching(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPlayersSearching(uint value) {
      PrepareBuilder();
      result.hasPlayersSearching = true;
      result.playersSearching_ = value;
      return this;
    }
    public Builder ClearPlayersSearching() {
      PrepareBuilder();
      result.hasPlayersSearching = false;
      result.playersSearching_ = 0;
      return this;
    }
    
    public bool HasServersAvailable {
      get { return result.hasServersAvailable; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServersAvailable {
      get { return result.ServersAvailable; }
      set { SetServersAvailable(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServersAvailable(uint value) {
      PrepareBuilder();
      result.hasServersAvailable = true;
      result.serversAvailable_ = value;
      return this;
    }
    public Builder ClearServersAvailable() {
      PrepareBuilder();
      result.hasServersAvailable = false;
      result.serversAvailable_ = 0;
      return this;
    }
    
    public bool HasOngoingMatches {
      get { return result.hasOngoingMatches; }
    }
    [global::System.CLSCompliant(false)]
    public uint OngoingMatches {
      get { return result.OngoingMatches; }
      set { SetOngoingMatches(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetOngoingMatches(uint value) {
      PrepareBuilder();
      result.hasOngoingMatches = true;
      result.ongoingMatches_ = value;
      return this;
    }
    public Builder ClearOngoingMatches() {
      PrepareBuilder();
      result.hasOngoingMatches = false;
      result.ongoingMatches_ = 0;
      return this;
    }
    
    public bool HasSearchTimeAvg {
      get { return result.hasSearchTimeAvg; }
    }
    [global::System.CLSCompliant(false)]
    public uint SearchTimeAvg {
      get { return result.SearchTimeAvg; }
      set { SetSearchTimeAvg(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSearchTimeAvg(uint value) {
      PrepareBuilder();
      result.hasSearchTimeAvg = true;
      result.searchTimeAvg_ = value;
      return this;
    }
    public Builder ClearSearchTimeAvg() {
      PrepareBuilder();
      result.hasSearchTimeAvg = false;
      result.searchTimeAvg_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::DetailedSearchStatistic> SearchStatisticsList {
      get { return PrepareBuilder().searchStatistics_; }
    }
    public int SearchStatisticsCount {
      get { return result.SearchStatisticsCount; }
    }
    public global::DetailedSearchStatistic GetSearchStatistics(int index) {
      return result.GetSearchStatistics(index);
    }
    public Builder SetSearchStatistics(int index, global::DetailedSearchStatistic value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.searchStatistics_[index] = value;
      return this;
    }
    public Builder SetSearchStatistics(int index, global::DetailedSearchStatistic.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.searchStatistics_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSearchStatistics(global::DetailedSearchStatistic value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.searchStatistics_.Add(value);
      return this;
    }
    public Builder AddSearchStatistics(global::DetailedSearchStatistic.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.searchStatistics_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSearchStatistics(scg::IEnumerable<global::DetailedSearchStatistic> values) {
      PrepareBuilder();
      result.searchStatistics_.Add(values);
      return this;
    }
    public Builder ClearSearchStatistics() {
      PrepareBuilder();
      result.searchStatistics_.Clear();
      return this;
    }
    
    public bool HasMainPostUrl {
      get { return result.hasMainPostUrl; }
    }
    public string MainPostUrl {
      get { return result.MainPostUrl; }
      set { SetMainPostUrl(value); }
    }
    public Builder SetMainPostUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMainPostUrl = true;
      result.mainPostUrl_ = value;
      return this;
    }
    public Builder ClearMainPostUrl() {
      PrepareBuilder();
      result.hasMainPostUrl = false;
      result.mainPostUrl_ = "";
      return this;
    }
    
    public bool HasRequiredAppidVersion {
      get { return result.hasRequiredAppidVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequiredAppidVersion {
      get { return result.RequiredAppidVersion; }
      set { SetRequiredAppidVersion(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequiredAppidVersion(uint value) {
      PrepareBuilder();
      result.hasRequiredAppidVersion = true;
      result.requiredAppidVersion_ = value;
      return this;
    }
    public Builder ClearRequiredAppidVersion() {
      PrepareBuilder();
      result.hasRequiredAppidVersion = false;
      result.requiredAppidVersion_ = 0;
      return this;
    }
    
    public bool HasPricesheetVersion {
      get { return result.hasPricesheetVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint PricesheetVersion {
      get { return result.PricesheetVersion; }
      set { SetPricesheetVersion(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPricesheetVersion(uint value) {
      PrepareBuilder();
      result.hasPricesheetVersion = true;
      result.pricesheetVersion_ = value;
      return this;
    }
    public Builder ClearPricesheetVersion() {
      PrepareBuilder();
      result.hasPricesheetVersion = false;
      result.pricesheetVersion_ = 0;
      return this;
    }
    
    public bool HasTwitchStreamsVersion {
      get { return result.hasTwitchStreamsVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint TwitchStreamsVersion {
      get { return result.TwitchStreamsVersion; }
      set { SetTwitchStreamsVersion(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTwitchStreamsVersion(uint value) {
      PrepareBuilder();
      result.hasTwitchStreamsVersion = true;
      result.twitchStreamsVersion_ = value;
      return this;
    }
    public Builder ClearTwitchStreamsVersion() {
      PrepareBuilder();
      result.hasTwitchStreamsVersion = false;
      result.twitchStreamsVersion_ = 0;
      return this;
    }
    
    public bool HasActiveTournamentEventid {
      get { return result.hasActiveTournamentEventid; }
    }
    [global::System.CLSCompliant(false)]
    public uint ActiveTournamentEventid {
      get { return result.ActiveTournamentEventid; }
      set { SetActiveTournamentEventid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetActiveTournamentEventid(uint value) {
      PrepareBuilder();
      result.hasActiveTournamentEventid = true;
      result.activeTournamentEventid_ = value;
      return this;
    }
    public Builder ClearActiveTournamentEventid() {
      PrepareBuilder();
      result.hasActiveTournamentEventid = false;
      result.activeTournamentEventid_ = 0;
      return this;
    }
    
    public bool HasActiveSurveyId {
      get { return result.hasActiveSurveyId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ActiveSurveyId {
      get { return result.ActiveSurveyId; }
      set { SetActiveSurveyId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetActiveSurveyId(uint value) {
      PrepareBuilder();
      result.hasActiveSurveyId = true;
      result.activeSurveyId_ = value;
      return this;
    }
    public Builder ClearActiveSurveyId() {
      PrepareBuilder();
      result.hasActiveSurveyId = false;
      result.activeSurveyId_ = 0;
      return this;
    }
  }
  static GlobalStatistics() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class OperationalStatisticDescription : pb::GeneratedMessage<OperationalStatisticDescription, OperationalStatisticDescription.Builder> {
  private OperationalStatisticDescription() { }
  private static readonly OperationalStatisticDescription defaultInstance = new OperationalStatisticDescription().MakeReadOnly();
  private static readonly string[] _operationalStatisticDescriptionFieldNames = new string[] { "idkey", "name" };
  private static readonly uint[] _operationalStatisticDescriptionFieldTags = new uint[] { 16, 10 };
  public static OperationalStatisticDescription DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override OperationalStatisticDescription DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override OperationalStatisticDescription ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_OperationalStatisticDescription__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<OperationalStatisticDescription, OperationalStatisticDescription.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_OperationalStatisticDescription__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int IdkeyFieldNumber = 2;
  private bool hasIdkey;
  private uint idkey_;
  public bool HasIdkey {
    get { return hasIdkey; }
  }
  [global::System.CLSCompliant(false)]
  public uint Idkey {
    get { return idkey_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _operationalStatisticDescriptionFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[1], Name);
    }
    if (hasIdkey) {
      output.WriteUInt32(2, field_names[0], Idkey);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasIdkey) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Idkey);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static OperationalStatisticDescription ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static OperationalStatisticDescription ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OperationalStatisticDescription ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private OperationalStatisticDescription MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(OperationalStatisticDescription prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<OperationalStatisticDescription, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(OperationalStatisticDescription cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private OperationalStatisticDescription result;
    
    private OperationalStatisticDescription PrepareBuilder() {
      if (resultIsReadOnly) {
        OperationalStatisticDescription original = result;
        result = new OperationalStatisticDescription();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override OperationalStatisticDescription MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::OperationalStatisticDescription.Descriptor; }
    }
    
    public override OperationalStatisticDescription DefaultInstanceForType {
      get { return global::OperationalStatisticDescription.DefaultInstance; }
    }
    
    public override OperationalStatisticDescription BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is OperationalStatisticDescription) {
        return MergeFrom((OperationalStatisticDescription) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(OperationalStatisticDescription other) {
      if (other == global::OperationalStatisticDescription.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasIdkey) {
        Idkey = other.Idkey;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_operationalStatisticDescriptionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _operationalStatisticDescriptionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 16: {
            result.hasIdkey = input.ReadUInt32(ref result.idkey_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasIdkey {
      get { return result.hasIdkey; }
    }
    [global::System.CLSCompliant(false)]
    public uint Idkey {
      get { return result.Idkey; }
      set { SetIdkey(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetIdkey(uint value) {
      PrepareBuilder();
      result.hasIdkey = true;
      result.idkey_ = value;
      return this;
    }
    public Builder ClearIdkey() {
      PrepareBuilder();
      result.hasIdkey = false;
      result.idkey_ = 0;
      return this;
    }
  }
  static OperationalStatisticDescription() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class OperationalStatisticElement : pb::GeneratedMessage<OperationalStatisticElement, OperationalStatisticElement.Builder> {
  private OperationalStatisticElement() { }
  private static readonly OperationalStatisticElement defaultInstance = new OperationalStatisticElement().MakeReadOnly();
  private static readonly string[] _operationalStatisticElementFieldNames = new string[] { "idkey", "values" };
  private static readonly uint[] _operationalStatisticElementFieldTags = new uint[] { 8, 16 };
  public static OperationalStatisticElement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override OperationalStatisticElement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override OperationalStatisticElement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_OperationalStatisticElement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<OperationalStatisticElement, OperationalStatisticElement.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_OperationalStatisticElement__FieldAccessorTable; }
  }
  
  public const int IdkeyFieldNumber = 1;
  private bool hasIdkey;
  private uint idkey_;
  public bool HasIdkey {
    get { return hasIdkey; }
  }
  [global::System.CLSCompliant(false)]
  public uint Idkey {
    get { return idkey_; }
  }
  
  public const int ValuesFieldNumber = 2;
  private pbc::PopsicleList<int> values_ = new pbc::PopsicleList<int>();
  public scg::IList<int> ValuesList {
    get { return pbc::Lists.AsReadOnly(values_); }
  }
  public int ValuesCount {
    get { return values_.Count; }
  }
  public int GetValues(int index) {
    return values_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _operationalStatisticElementFieldNames;
    if (hasIdkey) {
      output.WriteUInt32(1, field_names[0], Idkey);
    }
    if (values_.Count > 0) {
      output.WriteInt32Array(2, field_names[1], values_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIdkey) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Idkey);
      }
      {
        int dataSize = 0;
        foreach (int element in ValuesList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * values_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static OperationalStatisticElement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticElement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static OperationalStatisticElement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OperationalStatisticElement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private OperationalStatisticElement MakeReadOnly() {
    values_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(OperationalStatisticElement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<OperationalStatisticElement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(OperationalStatisticElement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private OperationalStatisticElement result;
    
    private OperationalStatisticElement PrepareBuilder() {
      if (resultIsReadOnly) {
        OperationalStatisticElement original = result;
        result = new OperationalStatisticElement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override OperationalStatisticElement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::OperationalStatisticElement.Descriptor; }
    }
    
    public override OperationalStatisticElement DefaultInstanceForType {
      get { return global::OperationalStatisticElement.DefaultInstance; }
    }
    
    public override OperationalStatisticElement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is OperationalStatisticElement) {
        return MergeFrom((OperationalStatisticElement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(OperationalStatisticElement other) {
      if (other == global::OperationalStatisticElement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIdkey) {
        Idkey = other.Idkey;
      }
      if (other.values_.Count != 0) {
        result.values_.Add(other.values_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_operationalStatisticElementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _operationalStatisticElementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasIdkey = input.ReadUInt32(ref result.idkey_);
            break;
          }
          case 18:
          case 16: {
            input.ReadInt32Array(tag, field_name, result.values_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIdkey {
      get { return result.hasIdkey; }
    }
    [global::System.CLSCompliant(false)]
    public uint Idkey {
      get { return result.Idkey; }
      set { SetIdkey(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetIdkey(uint value) {
      PrepareBuilder();
      result.hasIdkey = true;
      result.idkey_ = value;
      return this;
    }
    public Builder ClearIdkey() {
      PrepareBuilder();
      result.hasIdkey = false;
      result.idkey_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> ValuesList {
      get { return PrepareBuilder().values_; }
    }
    public int ValuesCount {
      get { return result.ValuesCount; }
    }
    public int GetValues(int index) {
      return result.GetValues(index);
    }
    public Builder SetValues(int index, int value) {
      PrepareBuilder();
      result.values_[index] = value;
      return this;
    }
    public Builder AddValues(int value) {
      PrepareBuilder();
      result.values_.Add(value);
      return this;
    }
    public Builder AddRangeValues(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.values_.Add(values);
      return this;
    }
    public Builder ClearValues() {
      PrepareBuilder();
      result.values_.Clear();
      return this;
    }
  }
  static OperationalStatisticElement() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class OperationalStatisticsPacket : pb::GeneratedMessage<OperationalStatisticsPacket, OperationalStatisticsPacket.Builder> {
  private OperationalStatisticsPacket() { }
  private static readonly OperationalStatisticsPacket defaultInstance = new OperationalStatisticsPacket().MakeReadOnly();
  private static readonly string[] _operationalStatisticsPacketFieldNames = new string[] { "mstimestamp", "packetid", "values" };
  private static readonly uint[] _operationalStatisticsPacketFieldTags = new uint[] { 16, 8, 26 };
  public static OperationalStatisticsPacket DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override OperationalStatisticsPacket DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override OperationalStatisticsPacket ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_OperationalStatisticsPacket__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<OperationalStatisticsPacket, OperationalStatisticsPacket.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_OperationalStatisticsPacket__FieldAccessorTable; }
  }
  
  public const int PacketidFieldNumber = 1;
  private bool hasPacketid;
  private int packetid_;
  public bool HasPacketid {
    get { return hasPacketid; }
  }
  public int Packetid {
    get { return packetid_; }
  }
  
  public const int MstimestampFieldNumber = 2;
  private bool hasMstimestamp;
  private int mstimestamp_;
  public bool HasMstimestamp {
    get { return hasMstimestamp; }
  }
  public int Mstimestamp {
    get { return mstimestamp_; }
  }
  
  public const int ValuesFieldNumber = 3;
  private pbc::PopsicleList<global::OperationalStatisticElement> values_ = new pbc::PopsicleList<global::OperationalStatisticElement>();
  public scg::IList<global::OperationalStatisticElement> ValuesList {
    get { return values_; }
  }
  public int ValuesCount {
    get { return values_.Count; }
  }
  public global::OperationalStatisticElement GetValues(int index) {
    return values_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _operationalStatisticsPacketFieldNames;
    if (hasPacketid) {
      output.WriteInt32(1, field_names[1], Packetid);
    }
    if (hasMstimestamp) {
      output.WriteInt32(2, field_names[0], Mstimestamp);
    }
    if (values_.Count > 0) {
      output.WriteMessageArray(3, field_names[2], values_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPacketid) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Packetid);
      }
      if (hasMstimestamp) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Mstimestamp);
      }
      foreach (global::OperationalStatisticElement element in ValuesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static OperationalStatisticsPacket ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static OperationalStatisticsPacket ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private OperationalStatisticsPacket MakeReadOnly() {
    values_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(OperationalStatisticsPacket prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<OperationalStatisticsPacket, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(OperationalStatisticsPacket cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private OperationalStatisticsPacket result;
    
    private OperationalStatisticsPacket PrepareBuilder() {
      if (resultIsReadOnly) {
        OperationalStatisticsPacket original = result;
        result = new OperationalStatisticsPacket();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override OperationalStatisticsPacket MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::OperationalStatisticsPacket.Descriptor; }
    }
    
    public override OperationalStatisticsPacket DefaultInstanceForType {
      get { return global::OperationalStatisticsPacket.DefaultInstance; }
    }
    
    public override OperationalStatisticsPacket BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is OperationalStatisticsPacket) {
        return MergeFrom((OperationalStatisticsPacket) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(OperationalStatisticsPacket other) {
      if (other == global::OperationalStatisticsPacket.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPacketid) {
        Packetid = other.Packetid;
      }
      if (other.HasMstimestamp) {
        Mstimestamp = other.Mstimestamp;
      }
      if (other.values_.Count != 0) {
        result.values_.Add(other.values_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_operationalStatisticsPacketFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _operationalStatisticsPacketFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPacketid = input.ReadInt32(ref result.packetid_);
            break;
          }
          case 16: {
            result.hasMstimestamp = input.ReadInt32(ref result.mstimestamp_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.values_, global::OperationalStatisticElement.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPacketid {
      get { return result.hasPacketid; }
    }
    public int Packetid {
      get { return result.Packetid; }
      set { SetPacketid(value); }
    }
    public Builder SetPacketid(int value) {
      PrepareBuilder();
      result.hasPacketid = true;
      result.packetid_ = value;
      return this;
    }
    public Builder ClearPacketid() {
      PrepareBuilder();
      result.hasPacketid = false;
      result.packetid_ = 0;
      return this;
    }
    
    public bool HasMstimestamp {
      get { return result.hasMstimestamp; }
    }
    public int Mstimestamp {
      get { return result.Mstimestamp; }
      set { SetMstimestamp(value); }
    }
    public Builder SetMstimestamp(int value) {
      PrepareBuilder();
      result.hasMstimestamp = true;
      result.mstimestamp_ = value;
      return this;
    }
    public Builder ClearMstimestamp() {
      PrepareBuilder();
      result.hasMstimestamp = false;
      result.mstimestamp_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::OperationalStatisticElement> ValuesList {
      get { return PrepareBuilder().values_; }
    }
    public int ValuesCount {
      get { return result.ValuesCount; }
    }
    public global::OperationalStatisticElement GetValues(int index) {
      return result.GetValues(index);
    }
    public Builder SetValues(int index, global::OperationalStatisticElement value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.values_[index] = value;
      return this;
    }
    public Builder SetValues(int index, global::OperationalStatisticElement.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.values_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddValues(global::OperationalStatisticElement value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.values_.Add(value);
      return this;
    }
    public Builder AddValues(global::OperationalStatisticElement.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.values_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeValues(scg::IEnumerable<global::OperationalStatisticElement> values) {
      PrepareBuilder();
      result.values_.Add(values);
      return this;
    }
    public Builder ClearValues() {
      PrepareBuilder();
      result.values_.Clear();
      return this;
    }
  }
  static OperationalStatisticsPacket() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerRankingInfo : pb::GeneratedMessage<PlayerRankingInfo, PlayerRankingInfo.Builder> {
  private PlayerRankingInfo() { }
  private static readonly PlayerRankingInfo defaultInstance = new PlayerRankingInfo().MakeReadOnly();
  private static readonly string[] _playerRankingInfoFieldNames = new string[] { "account_id", "rank_change", "rank_id", "wins" };
  private static readonly uint[] _playerRankingInfoFieldTags = new uint[] { 8, 37, 16, 24 };
  public static PlayerRankingInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerRankingInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerRankingInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_PlayerRankingInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerRankingInfo, PlayerRankingInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_PlayerRankingInfo__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int RankIdFieldNumber = 2;
  private bool hasRankId;
  private uint rankId_;
  public bool HasRankId {
    get { return hasRankId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RankId {
    get { return rankId_; }
  }
  
  public const int WinsFieldNumber = 3;
  private bool hasWins;
  private uint wins_;
  public bool HasWins {
    get { return hasWins; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wins {
    get { return wins_; }
  }
  
  public const int RankChangeFieldNumber = 4;
  private bool hasRankChange;
  private float rankChange_;
  public bool HasRankChange {
    get { return hasRankChange; }
  }
  public float RankChange {
    get { return rankChange_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerRankingInfoFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasRankId) {
      output.WriteUInt32(2, field_names[2], RankId);
    }
    if (hasWins) {
      output.WriteUInt32(3, field_names[3], Wins);
    }
    if (hasRankChange) {
      output.WriteFloat(4, field_names[1], RankChange);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasRankId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RankId);
      }
      if (hasWins) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Wins);
      }
      if (hasRankChange) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, RankChange);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerRankingInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerRankingInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerRankingInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerRankingInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerRankingInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerRankingInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerRankingInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerRankingInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerRankingInfo result;
    
    private PlayerRankingInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerRankingInfo original = result;
        result = new PlayerRankingInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerRankingInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerRankingInfo.Descriptor; }
    }
    
    public override PlayerRankingInfo DefaultInstanceForType {
      get { return global::PlayerRankingInfo.DefaultInstance; }
    }
    
    public override PlayerRankingInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerRankingInfo) {
        return MergeFrom((PlayerRankingInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerRankingInfo other) {
      if (other == global::PlayerRankingInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasRankId) {
        RankId = other.RankId;
      }
      if (other.HasWins) {
        Wins = other.Wins;
      }
      if (other.HasRankChange) {
        RankChange = other.RankChange;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerRankingInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerRankingInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 16: {
            result.hasRankId = input.ReadUInt32(ref result.rankId_);
            break;
          }
          case 24: {
            result.hasWins = input.ReadUInt32(ref result.wins_);
            break;
          }
          case 37: {
            result.hasRankChange = input.ReadFloat(ref result.rankChange_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasRankId {
      get { return result.hasRankId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RankId {
      get { return result.RankId; }
      set { SetRankId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRankId(uint value) {
      PrepareBuilder();
      result.hasRankId = true;
      result.rankId_ = value;
      return this;
    }
    public Builder ClearRankId() {
      PrepareBuilder();
      result.hasRankId = false;
      result.rankId_ = 0;
      return this;
    }
    
    public bool HasWins {
      get { return result.hasWins; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wins {
      get { return result.Wins; }
      set { SetWins(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWins(uint value) {
      PrepareBuilder();
      result.hasWins = true;
      result.wins_ = value;
      return this;
    }
    public Builder ClearWins() {
      PrepareBuilder();
      result.hasWins = false;
      result.wins_ = 0;
      return this;
    }
    
    public bool HasRankChange {
      get { return result.hasRankChange; }
    }
    public float RankChange {
      get { return result.RankChange; }
      set { SetRankChange(value); }
    }
    public Builder SetRankChange(float value) {
      PrepareBuilder();
      result.hasRankChange = true;
      result.rankChange_ = value;
      return this;
    }
    public Builder ClearRankChange() {
      PrepareBuilder();
      result.hasRankChange = false;
      result.rankChange_ = 0F;
      return this;
    }
  }
  static PlayerRankingInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerCommendationInfo : pb::GeneratedMessage<PlayerCommendationInfo, PlayerCommendationInfo.Builder> {
  private PlayerCommendationInfo() { }
  private static readonly PlayerCommendationInfo defaultInstance = new PlayerCommendationInfo().MakeReadOnly();
  private static readonly string[] _playerCommendationInfoFieldNames = new string[] { "cmd_friendly", "cmd_leader", "cmd_teaching" };
  private static readonly uint[] _playerCommendationInfoFieldTags = new uint[] { 8, 32, 16 };
  public static PlayerCommendationInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerCommendationInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerCommendationInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_PlayerCommendationInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerCommendationInfo, PlayerCommendationInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_PlayerCommendationInfo__FieldAccessorTable; }
  }
  
  public const int CmdFriendlyFieldNumber = 1;
  private bool hasCmdFriendly;
  private uint cmdFriendly_;
  public bool HasCmdFriendly {
    get { return hasCmdFriendly; }
  }
  [global::System.CLSCompliant(false)]
  public uint CmdFriendly {
    get { return cmdFriendly_; }
  }
  
  public const int CmdTeachingFieldNumber = 2;
  private bool hasCmdTeaching;
  private uint cmdTeaching_;
  public bool HasCmdTeaching {
    get { return hasCmdTeaching; }
  }
  [global::System.CLSCompliant(false)]
  public uint CmdTeaching {
    get { return cmdTeaching_; }
  }
  
  public const int CmdLeaderFieldNumber = 4;
  private bool hasCmdLeader;
  private uint cmdLeader_;
  public bool HasCmdLeader {
    get { return hasCmdLeader; }
  }
  [global::System.CLSCompliant(false)]
  public uint CmdLeader {
    get { return cmdLeader_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerCommendationInfoFieldNames;
    if (hasCmdFriendly) {
      output.WriteUInt32(1, field_names[0], CmdFriendly);
    }
    if (hasCmdTeaching) {
      output.WriteUInt32(2, field_names[2], CmdTeaching);
    }
    if (hasCmdLeader) {
      output.WriteUInt32(4, field_names[1], CmdLeader);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCmdFriendly) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, CmdFriendly);
      }
      if (hasCmdTeaching) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, CmdTeaching);
      }
      if (hasCmdLeader) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, CmdLeader);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerCommendationInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerCommendationInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerCommendationInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerCommendationInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerCommendationInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerCommendationInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerCommendationInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerCommendationInfo result;
    
    private PlayerCommendationInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerCommendationInfo original = result;
        result = new PlayerCommendationInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerCommendationInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerCommendationInfo.Descriptor; }
    }
    
    public override PlayerCommendationInfo DefaultInstanceForType {
      get { return global::PlayerCommendationInfo.DefaultInstance; }
    }
    
    public override PlayerCommendationInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerCommendationInfo) {
        return MergeFrom((PlayerCommendationInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerCommendationInfo other) {
      if (other == global::PlayerCommendationInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCmdFriendly) {
        CmdFriendly = other.CmdFriendly;
      }
      if (other.HasCmdTeaching) {
        CmdTeaching = other.CmdTeaching;
      }
      if (other.HasCmdLeader) {
        CmdLeader = other.CmdLeader;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerCommendationInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerCommendationInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCmdFriendly = input.ReadUInt32(ref result.cmdFriendly_);
            break;
          }
          case 16: {
            result.hasCmdTeaching = input.ReadUInt32(ref result.cmdTeaching_);
            break;
          }
          case 32: {
            result.hasCmdLeader = input.ReadUInt32(ref result.cmdLeader_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCmdFriendly {
      get { return result.hasCmdFriendly; }
    }
    [global::System.CLSCompliant(false)]
    public uint CmdFriendly {
      get { return result.CmdFriendly; }
      set { SetCmdFriendly(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCmdFriendly(uint value) {
      PrepareBuilder();
      result.hasCmdFriendly = true;
      result.cmdFriendly_ = value;
      return this;
    }
    public Builder ClearCmdFriendly() {
      PrepareBuilder();
      result.hasCmdFriendly = false;
      result.cmdFriendly_ = 0;
      return this;
    }
    
    public bool HasCmdTeaching {
      get { return result.hasCmdTeaching; }
    }
    [global::System.CLSCompliant(false)]
    public uint CmdTeaching {
      get { return result.CmdTeaching; }
      set { SetCmdTeaching(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCmdTeaching(uint value) {
      PrepareBuilder();
      result.hasCmdTeaching = true;
      result.cmdTeaching_ = value;
      return this;
    }
    public Builder ClearCmdTeaching() {
      PrepareBuilder();
      result.hasCmdTeaching = false;
      result.cmdTeaching_ = 0;
      return this;
    }
    
    public bool HasCmdLeader {
      get { return result.hasCmdLeader; }
    }
    [global::System.CLSCompliant(false)]
    public uint CmdLeader {
      get { return result.CmdLeader; }
      set { SetCmdLeader(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCmdLeader(uint value) {
      PrepareBuilder();
      result.hasCmdLeader = true;
      result.cmdLeader_ = value;
      return this;
    }
    public Builder ClearCmdLeader() {
      PrepareBuilder();
      result.hasCmdLeader = false;
      result.cmdLeader_ = 0;
      return this;
    }
  }
  static PlayerCommendationInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class PlayerMedalsInfo : pb::GeneratedMessage<PlayerMedalsInfo, PlayerMedalsInfo.Builder> {
  private PlayerMedalsInfo() { }
  private static readonly PlayerMedalsInfo defaultInstance = new PlayerMedalsInfo().MakeReadOnly();
  private static readonly string[] _playerMedalsInfoFieldNames = new string[] { "display_items_defidx", "featured_display_item_defidx", "legacy__coin_op_payback", "medal_arms", "medal_combat", "medal_global", "medal_team", "medal_weapon" };
  private static readonly uint[] _playerMedalsInfoFieldTags = new uint[] { 56, 64, 48, 40, 16, 32, 8, 24 };
  public static PlayerMedalsInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override PlayerMedalsInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override PlayerMedalsInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_PlayerMedalsInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<PlayerMedalsInfo, PlayerMedalsInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_PlayerMedalsInfo__FieldAccessorTable; }
  }
  
  public const int MedalTeamFieldNumber = 1;
  private bool hasMedalTeam;
  private uint medalTeam_;
  public bool HasMedalTeam {
    get { return hasMedalTeam; }
  }
  [global::System.CLSCompliant(false)]
  public uint MedalTeam {
    get { return medalTeam_; }
  }
  
  public const int MedalCombatFieldNumber = 2;
  private bool hasMedalCombat;
  private uint medalCombat_;
  public bool HasMedalCombat {
    get { return hasMedalCombat; }
  }
  [global::System.CLSCompliant(false)]
  public uint MedalCombat {
    get { return medalCombat_; }
  }
  
  public const int MedalWeaponFieldNumber = 3;
  private bool hasMedalWeapon;
  private uint medalWeapon_;
  public bool HasMedalWeapon {
    get { return hasMedalWeapon; }
  }
  [global::System.CLSCompliant(false)]
  public uint MedalWeapon {
    get { return medalWeapon_; }
  }
  
  public const int MedalGlobalFieldNumber = 4;
  private bool hasMedalGlobal;
  private uint medalGlobal_;
  public bool HasMedalGlobal {
    get { return hasMedalGlobal; }
  }
  [global::System.CLSCompliant(false)]
  public uint MedalGlobal {
    get { return medalGlobal_; }
  }
  
  public const int MedalArmsFieldNumber = 5;
  private bool hasMedalArms;
  private uint medalArms_;
  public bool HasMedalArms {
    get { return hasMedalArms; }
  }
  [global::System.CLSCompliant(false)]
  public uint MedalArms {
    get { return medalArms_; }
  }
  
  public const int LegacyCoinOpPaybackFieldNumber = 6;
  private bool hasLegacyCoinOpPayback;
  private uint legacyCoinOpPayback_;
  public bool HasLegacyCoinOpPayback {
    get { return hasLegacyCoinOpPayback; }
  }
  [global::System.CLSCompliant(false)]
  public uint LegacyCoinOpPayback {
    get { return legacyCoinOpPayback_; }
  }
  
  public const int DisplayItemsDefidxFieldNumber = 7;
  private pbc::PopsicleList<uint> displayItemsDefidx_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> DisplayItemsDefidxList {
    get { return pbc::Lists.AsReadOnly(displayItemsDefidx_); }
  }
  public int DisplayItemsDefidxCount {
    get { return displayItemsDefidx_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetDisplayItemsDefidx(int index) {
    return displayItemsDefidx_[index];
  }
  
  public const int FeaturedDisplayItemDefidxFieldNumber = 8;
  private bool hasFeaturedDisplayItemDefidx;
  private uint featuredDisplayItemDefidx_;
  public bool HasFeaturedDisplayItemDefidx {
    get { return hasFeaturedDisplayItemDefidx; }
  }
  [global::System.CLSCompliant(false)]
  public uint FeaturedDisplayItemDefidx {
    get { return featuredDisplayItemDefidx_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _playerMedalsInfoFieldNames;
    if (hasMedalTeam) {
      output.WriteUInt32(1, field_names[6], MedalTeam);
    }
    if (hasMedalCombat) {
      output.WriteUInt32(2, field_names[4], MedalCombat);
    }
    if (hasMedalWeapon) {
      output.WriteUInt32(3, field_names[7], MedalWeapon);
    }
    if (hasMedalGlobal) {
      output.WriteUInt32(4, field_names[5], MedalGlobal);
    }
    if (hasMedalArms) {
      output.WriteUInt32(5, field_names[3], MedalArms);
    }
    if (hasLegacyCoinOpPayback) {
      output.WriteUInt32(6, field_names[2], LegacyCoinOpPayback);
    }
    if (displayItemsDefidx_.Count > 0) {
      output.WriteUInt32Array(7, field_names[0], displayItemsDefidx_);
    }
    if (hasFeaturedDisplayItemDefidx) {
      output.WriteUInt32(8, field_names[1], FeaturedDisplayItemDefidx);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMedalTeam) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, MedalTeam);
      }
      if (hasMedalCombat) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MedalCombat);
      }
      if (hasMedalWeapon) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, MedalWeapon);
      }
      if (hasMedalGlobal) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, MedalGlobal);
      }
      if (hasMedalArms) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, MedalArms);
      }
      if (hasLegacyCoinOpPayback) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, LegacyCoinOpPayback);
      }
      {
        int dataSize = 0;
        foreach (uint element in DisplayItemsDefidxList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * displayItemsDefidx_.Count;
      }
      if (hasFeaturedDisplayItemDefidx) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, FeaturedDisplayItemDefidx);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static PlayerMedalsInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static PlayerMedalsInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static PlayerMedalsInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private PlayerMedalsInfo MakeReadOnly() {
    displayItemsDefidx_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(PlayerMedalsInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<PlayerMedalsInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(PlayerMedalsInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private PlayerMedalsInfo result;
    
    private PlayerMedalsInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        PlayerMedalsInfo original = result;
        result = new PlayerMedalsInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override PlayerMedalsInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::PlayerMedalsInfo.Descriptor; }
    }
    
    public override PlayerMedalsInfo DefaultInstanceForType {
      get { return global::PlayerMedalsInfo.DefaultInstance; }
    }
    
    public override PlayerMedalsInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is PlayerMedalsInfo) {
        return MergeFrom((PlayerMedalsInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(PlayerMedalsInfo other) {
      if (other == global::PlayerMedalsInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMedalTeam) {
        MedalTeam = other.MedalTeam;
      }
      if (other.HasMedalCombat) {
        MedalCombat = other.MedalCombat;
      }
      if (other.HasMedalWeapon) {
        MedalWeapon = other.MedalWeapon;
      }
      if (other.HasMedalGlobal) {
        MedalGlobal = other.MedalGlobal;
      }
      if (other.HasMedalArms) {
        MedalArms = other.MedalArms;
      }
      if (other.HasLegacyCoinOpPayback) {
        LegacyCoinOpPayback = other.LegacyCoinOpPayback;
      }
      if (other.displayItemsDefidx_.Count != 0) {
        result.displayItemsDefidx_.Add(other.displayItemsDefidx_);
      }
      if (other.HasFeaturedDisplayItemDefidx) {
        FeaturedDisplayItemDefidx = other.FeaturedDisplayItemDefidx;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_playerMedalsInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _playerMedalsInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMedalTeam = input.ReadUInt32(ref result.medalTeam_);
            break;
          }
          case 16: {
            result.hasMedalCombat = input.ReadUInt32(ref result.medalCombat_);
            break;
          }
          case 24: {
            result.hasMedalWeapon = input.ReadUInt32(ref result.medalWeapon_);
            break;
          }
          case 32: {
            result.hasMedalGlobal = input.ReadUInt32(ref result.medalGlobal_);
            break;
          }
          case 40: {
            result.hasMedalArms = input.ReadUInt32(ref result.medalArms_);
            break;
          }
          case 48: {
            result.hasLegacyCoinOpPayback = input.ReadUInt32(ref result.legacyCoinOpPayback_);
            break;
          }
          case 58:
          case 56: {
            input.ReadUInt32Array(tag, field_name, result.displayItemsDefidx_);
            break;
          }
          case 64: {
            result.hasFeaturedDisplayItemDefidx = input.ReadUInt32(ref result.featuredDisplayItemDefidx_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMedalTeam {
      get { return result.hasMedalTeam; }
    }
    [global::System.CLSCompliant(false)]
    public uint MedalTeam {
      get { return result.MedalTeam; }
      set { SetMedalTeam(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMedalTeam(uint value) {
      PrepareBuilder();
      result.hasMedalTeam = true;
      result.medalTeam_ = value;
      return this;
    }
    public Builder ClearMedalTeam() {
      PrepareBuilder();
      result.hasMedalTeam = false;
      result.medalTeam_ = 0;
      return this;
    }
    
    public bool HasMedalCombat {
      get { return result.hasMedalCombat; }
    }
    [global::System.CLSCompliant(false)]
    public uint MedalCombat {
      get { return result.MedalCombat; }
      set { SetMedalCombat(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMedalCombat(uint value) {
      PrepareBuilder();
      result.hasMedalCombat = true;
      result.medalCombat_ = value;
      return this;
    }
    public Builder ClearMedalCombat() {
      PrepareBuilder();
      result.hasMedalCombat = false;
      result.medalCombat_ = 0;
      return this;
    }
    
    public bool HasMedalWeapon {
      get { return result.hasMedalWeapon; }
    }
    [global::System.CLSCompliant(false)]
    public uint MedalWeapon {
      get { return result.MedalWeapon; }
      set { SetMedalWeapon(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMedalWeapon(uint value) {
      PrepareBuilder();
      result.hasMedalWeapon = true;
      result.medalWeapon_ = value;
      return this;
    }
    public Builder ClearMedalWeapon() {
      PrepareBuilder();
      result.hasMedalWeapon = false;
      result.medalWeapon_ = 0;
      return this;
    }
    
    public bool HasMedalGlobal {
      get { return result.hasMedalGlobal; }
    }
    [global::System.CLSCompliant(false)]
    public uint MedalGlobal {
      get { return result.MedalGlobal; }
      set { SetMedalGlobal(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMedalGlobal(uint value) {
      PrepareBuilder();
      result.hasMedalGlobal = true;
      result.medalGlobal_ = value;
      return this;
    }
    public Builder ClearMedalGlobal() {
      PrepareBuilder();
      result.hasMedalGlobal = false;
      result.medalGlobal_ = 0;
      return this;
    }
    
    public bool HasMedalArms {
      get { return result.hasMedalArms; }
    }
    [global::System.CLSCompliant(false)]
    public uint MedalArms {
      get { return result.MedalArms; }
      set { SetMedalArms(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMedalArms(uint value) {
      PrepareBuilder();
      result.hasMedalArms = true;
      result.medalArms_ = value;
      return this;
    }
    public Builder ClearMedalArms() {
      PrepareBuilder();
      result.hasMedalArms = false;
      result.medalArms_ = 0;
      return this;
    }
    
    public bool HasLegacyCoinOpPayback {
      get { return result.hasLegacyCoinOpPayback; }
    }
    [global::System.CLSCompliant(false)]
    public uint LegacyCoinOpPayback {
      get { return result.LegacyCoinOpPayback; }
      set { SetLegacyCoinOpPayback(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetLegacyCoinOpPayback(uint value) {
      PrepareBuilder();
      result.hasLegacyCoinOpPayback = true;
      result.legacyCoinOpPayback_ = value;
      return this;
    }
    public Builder ClearLegacyCoinOpPayback() {
      PrepareBuilder();
      result.hasLegacyCoinOpPayback = false;
      result.legacyCoinOpPayback_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> DisplayItemsDefidxList {
      get { return PrepareBuilder().displayItemsDefidx_; }
    }
    public int DisplayItemsDefidxCount {
      get { return result.DisplayItemsDefidxCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetDisplayItemsDefidx(int index) {
      return result.GetDisplayItemsDefidx(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDisplayItemsDefidx(int index, uint value) {
      PrepareBuilder();
      result.displayItemsDefidx_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddDisplayItemsDefidx(uint value) {
      PrepareBuilder();
      result.displayItemsDefidx_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeDisplayItemsDefidx(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.displayItemsDefidx_.Add(values);
      return this;
    }
    public Builder ClearDisplayItemsDefidx() {
      PrepareBuilder();
      result.displayItemsDefidx_.Clear();
      return this;
    }
    
    public bool HasFeaturedDisplayItemDefidx {
      get { return result.hasFeaturedDisplayItemDefidx; }
    }
    [global::System.CLSCompliant(false)]
    public uint FeaturedDisplayItemDefidx {
      get { return result.FeaturedDisplayItemDefidx; }
      set { SetFeaturedDisplayItemDefidx(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFeaturedDisplayItemDefidx(uint value) {
      PrepareBuilder();
      result.hasFeaturedDisplayItemDefidx = true;
      result.featuredDisplayItemDefidx_ = value;
      return this;
    }
    public Builder ClearFeaturedDisplayItemDefidx() {
      PrepareBuilder();
      result.hasFeaturedDisplayItemDefidx = false;
      result.featuredDisplayItemDefidx_ = 0;
      return this;
    }
  }
  static PlayerMedalsInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class AccountActivity : pb::GeneratedMessage<AccountActivity, AccountActivity.Builder> {
  private AccountActivity() { }
  private static readonly AccountActivity defaultInstance = new AccountActivity().MakeReadOnly();
  private static readonly string[] _accountActivityFieldNames = new string[] { "activity", "map", "mode" };
  private static readonly uint[] _accountActivityFieldTags = new uint[] { 8, 24, 16 };
  public static AccountActivity DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override AccountActivity DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override AccountActivity ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_AccountActivity__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<AccountActivity, AccountActivity.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_AccountActivity__FieldAccessorTable; }
  }
  
  public const int ActivityFieldNumber = 1;
  private bool hasActivity;
  private uint activity_;
  public bool HasActivity {
    get { return hasActivity; }
  }
  [global::System.CLSCompliant(false)]
  public uint Activity {
    get { return activity_; }
  }
  
  public const int ModeFieldNumber = 2;
  private bool hasMode;
  private uint mode_;
  public bool HasMode {
    get { return hasMode; }
  }
  [global::System.CLSCompliant(false)]
  public uint Mode {
    get { return mode_; }
  }
  
  public const int MapFieldNumber = 3;
  private bool hasMap;
  private uint map_;
  public bool HasMap {
    get { return hasMap; }
  }
  [global::System.CLSCompliant(false)]
  public uint Map {
    get { return map_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _accountActivityFieldNames;
    if (hasActivity) {
      output.WriteUInt32(1, field_names[0], Activity);
    }
    if (hasMode) {
      output.WriteUInt32(2, field_names[2], Mode);
    }
    if (hasMap) {
      output.WriteUInt32(3, field_names[1], Map);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasActivity) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Activity);
      }
      if (hasMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Mode);
      }
      if (hasMap) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Map);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static AccountActivity ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AccountActivity ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AccountActivity ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static AccountActivity ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static AccountActivity ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AccountActivity ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static AccountActivity ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static AccountActivity ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static AccountActivity ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static AccountActivity ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private AccountActivity MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(AccountActivity prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<AccountActivity, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(AccountActivity cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private AccountActivity result;
    
    private AccountActivity PrepareBuilder() {
      if (resultIsReadOnly) {
        AccountActivity original = result;
        result = new AccountActivity();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override AccountActivity MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::AccountActivity.Descriptor; }
    }
    
    public override AccountActivity DefaultInstanceForType {
      get { return global::AccountActivity.DefaultInstance; }
    }
    
    public override AccountActivity BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is AccountActivity) {
        return MergeFrom((AccountActivity) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(AccountActivity other) {
      if (other == global::AccountActivity.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasActivity) {
        Activity = other.Activity;
      }
      if (other.HasMode) {
        Mode = other.Mode;
      }
      if (other.HasMap) {
        Map = other.Map;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_accountActivityFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _accountActivityFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasActivity = input.ReadUInt32(ref result.activity_);
            break;
          }
          case 16: {
            result.hasMode = input.ReadUInt32(ref result.mode_);
            break;
          }
          case 24: {
            result.hasMap = input.ReadUInt32(ref result.map_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasActivity {
      get { return result.hasActivity; }
    }
    [global::System.CLSCompliant(false)]
    public uint Activity {
      get { return result.Activity; }
      set { SetActivity(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetActivity(uint value) {
      PrepareBuilder();
      result.hasActivity = true;
      result.activity_ = value;
      return this;
    }
    public Builder ClearActivity() {
      PrepareBuilder();
      result.hasActivity = false;
      result.activity_ = 0;
      return this;
    }
    
    public bool HasMode {
      get { return result.hasMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint Mode {
      get { return result.Mode; }
      set { SetMode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMode(uint value) {
      PrepareBuilder();
      result.hasMode = true;
      result.mode_ = value;
      return this;
    }
    public Builder ClearMode() {
      PrepareBuilder();
      result.hasMode = false;
      result.mode_ = 0;
      return this;
    }
    
    public bool HasMap {
      get { return result.hasMap; }
    }
    [global::System.CLSCompliant(false)]
    public uint Map {
      get { return result.Map; }
      set { SetMap(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMap(uint value) {
      PrepareBuilder();
      result.hasMap = true;
      result.map_ = value;
      return this;
    }
    public Builder ClearMap() {
      PrepareBuilder();
      result.hasMap = false;
      result.map_ = 0;
      return this;
    }
  }
  static AccountActivity() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class TournamentMatchSetup : pb::GeneratedMessage<TournamentMatchSetup, TournamentMatchSetup.Builder> {
  private TournamentMatchSetup() { }
  private static readonly TournamentMatchSetup defaultInstance = new TournamentMatchSetup().MakeReadOnly();
  private static readonly string[] _tournamentMatchSetupFieldNames = new string[] { "event_id", "event_stage_id", "team_id_ct", "team_id_t" };
  private static readonly uint[] _tournamentMatchSetupFieldTags = new uint[] { 8, 32, 16, 24 };
  public static TournamentMatchSetup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override TournamentMatchSetup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override TournamentMatchSetup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentMatchSetup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<TournamentMatchSetup, TournamentMatchSetup.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_TournamentMatchSetup__FieldAccessorTable; }
  }
  
  public const int EventIdFieldNumber = 1;
  private bool hasEventId;
  private int eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public int EventId {
    get { return eventId_; }
  }
  
  public const int TeamIdCtFieldNumber = 2;
  private bool hasTeamIdCt;
  private int teamIdCt_;
  public bool HasTeamIdCt {
    get { return hasTeamIdCt; }
  }
  public int TeamIdCt {
    get { return teamIdCt_; }
  }
  
  public const int TeamIdTFieldNumber = 3;
  private bool hasTeamIdT;
  private int teamIdT_;
  public bool HasTeamIdT {
    get { return hasTeamIdT; }
  }
  public int TeamIdT {
    get { return teamIdT_; }
  }
  
  public const int EventStageIdFieldNumber = 4;
  private bool hasEventStageId;
  private int eventStageId_;
  public bool HasEventStageId {
    get { return hasEventStageId; }
  }
  public int EventStageId {
    get { return eventStageId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _tournamentMatchSetupFieldNames;
    if (hasEventId) {
      output.WriteInt32(1, field_names[0], EventId);
    }
    if (hasTeamIdCt) {
      output.WriteInt32(2, field_names[2], TeamIdCt);
    }
    if (hasTeamIdT) {
      output.WriteInt32(3, field_names[3], TeamIdT);
    }
    if (hasEventStageId) {
      output.WriteInt32(4, field_names[1], EventStageId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, EventId);
      }
      if (hasTeamIdCt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, TeamIdCt);
      }
      if (hasTeamIdT) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, TeamIdT);
      }
      if (hasEventStageId) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, EventStageId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static TournamentMatchSetup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static TournamentMatchSetup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static TournamentMatchSetup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static TournamentMatchSetup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private TournamentMatchSetup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(TournamentMatchSetup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<TournamentMatchSetup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(TournamentMatchSetup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private TournamentMatchSetup result;
    
    private TournamentMatchSetup PrepareBuilder() {
      if (resultIsReadOnly) {
        TournamentMatchSetup original = result;
        result = new TournamentMatchSetup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override TournamentMatchSetup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::TournamentMatchSetup.Descriptor; }
    }
    
    public override TournamentMatchSetup DefaultInstanceForType {
      get { return global::TournamentMatchSetup.DefaultInstance; }
    }
    
    public override TournamentMatchSetup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is TournamentMatchSetup) {
        return MergeFrom((TournamentMatchSetup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(TournamentMatchSetup other) {
      if (other == global::TournamentMatchSetup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasTeamIdCt) {
        TeamIdCt = other.TeamIdCt;
      }
      if (other.HasTeamIdT) {
        TeamIdT = other.TeamIdT;
      }
      if (other.HasEventStageId) {
        EventStageId = other.EventStageId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_tournamentMatchSetupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _tournamentMatchSetupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventId = input.ReadInt32(ref result.eventId_);
            break;
          }
          case 16: {
            result.hasTeamIdCt = input.ReadInt32(ref result.teamIdCt_);
            break;
          }
          case 24: {
            result.hasTeamIdT = input.ReadInt32(ref result.teamIdT_);
            break;
          }
          case 32: {
            result.hasEventStageId = input.ReadInt32(ref result.eventStageId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public int EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(int value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0;
      return this;
    }
    
    public bool HasTeamIdCt {
      get { return result.hasTeamIdCt; }
    }
    public int TeamIdCt {
      get { return result.TeamIdCt; }
      set { SetTeamIdCt(value); }
    }
    public Builder SetTeamIdCt(int value) {
      PrepareBuilder();
      result.hasTeamIdCt = true;
      result.teamIdCt_ = value;
      return this;
    }
    public Builder ClearTeamIdCt() {
      PrepareBuilder();
      result.hasTeamIdCt = false;
      result.teamIdCt_ = 0;
      return this;
    }
    
    public bool HasTeamIdT {
      get { return result.hasTeamIdT; }
    }
    public int TeamIdT {
      get { return result.TeamIdT; }
      set { SetTeamIdT(value); }
    }
    public Builder SetTeamIdT(int value) {
      PrepareBuilder();
      result.hasTeamIdT = true;
      result.teamIdT_ = value;
      return this;
    }
    public Builder ClearTeamIdT() {
      PrepareBuilder();
      result.hasTeamIdT = false;
      result.teamIdT_ = 0;
      return this;
    }
    
    public bool HasEventStageId {
      get { return result.hasEventStageId; }
    }
    public int EventStageId {
      get { return result.EventStageId; }
      set { SetEventStageId(value); }
    }
    public Builder SetEventStageId(int value) {
      PrepareBuilder();
      result.hasEventStageId = true;
      result.eventStageId_ = value;
      return this;
    }
    public Builder ClearEventStageId() {
      PrepareBuilder();
      result.hasEventStageId = false;
      result.eventStageId_ = 0;
      return this;
    }
  }
  static TournamentMatchSetup() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class ServerHltvInfo : pb::GeneratedMessage<ServerHltvInfo, ServerHltvInfo.Builder> {
  private ServerHltvInfo() { }
  private static readonly ServerHltvInfo defaultInstance = new ServerHltvInfo().MakeReadOnly();
  private static readonly string[] _serverHltvInfoFieldNames = new string[] { "game_map", "game_mapgroup", "game_mode", "tv_clients", "tv_local_clients", "tv_local_proxies", "tv_local_slots", "tv_master_steamid", "tv_proxies", "tv_relay_address", "tv_relay_clients", "tv_relay_port", "tv_relay_proxies", "tv_relay_slots", "tv_relay_steamid", "tv_slots", "tv_time", "tv_udp_port", "tv_watch_key" };
  private static readonly uint[] _serverHltvInfoFieldTags = new uint[] { 82, 74, 64, 32, 104, 112, 96, 88, 40, 144, 128, 152, 136, 120, 160, 24, 48, 8, 16 };
  public static ServerHltvInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override ServerHltvInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override ServerHltvInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_ServerHltvInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<ServerHltvInfo, ServerHltvInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_ServerHltvInfo__FieldAccessorTable; }
  }
  
  public const int TvUdpPortFieldNumber = 1;
  private bool hasTvUdpPort;
  private uint tvUdpPort_;
  public bool HasTvUdpPort {
    get { return hasTvUdpPort; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvUdpPort {
    get { return tvUdpPort_; }
  }
  
  public const int TvWatchKeyFieldNumber = 2;
  private bool hasTvWatchKey;
  private ulong tvWatchKey_;
  public bool HasTvWatchKey {
    get { return hasTvWatchKey; }
  }
  [global::System.CLSCompliant(false)]
  public ulong TvWatchKey {
    get { return tvWatchKey_; }
  }
  
  public const int TvSlotsFieldNumber = 3;
  private bool hasTvSlots;
  private uint tvSlots_;
  public bool HasTvSlots {
    get { return hasTvSlots; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvSlots {
    get { return tvSlots_; }
  }
  
  public const int TvClientsFieldNumber = 4;
  private bool hasTvClients;
  private uint tvClients_;
  public bool HasTvClients {
    get { return hasTvClients; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvClients {
    get { return tvClients_; }
  }
  
  public const int TvProxiesFieldNumber = 5;
  private bool hasTvProxies;
  private uint tvProxies_;
  public bool HasTvProxies {
    get { return hasTvProxies; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvProxies {
    get { return tvProxies_; }
  }
  
  public const int TvTimeFieldNumber = 6;
  private bool hasTvTime;
  private uint tvTime_;
  public bool HasTvTime {
    get { return hasTvTime; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvTime {
    get { return tvTime_; }
  }
  
  public const int GameModeFieldNumber = 8;
  private bool hasGameMode;
  private uint gameMode_;
  public bool HasGameMode {
    get { return hasGameMode; }
  }
  [global::System.CLSCompliant(false)]
  public uint GameMode {
    get { return gameMode_; }
  }
  
  public const int GameMapgroupFieldNumber = 9;
  private bool hasGameMapgroup;
  private string gameMapgroup_ = "";
  public bool HasGameMapgroup {
    get { return hasGameMapgroup; }
  }
  public string GameMapgroup {
    get { return gameMapgroup_; }
  }
  
  public const int GameMapFieldNumber = 10;
  private bool hasGameMap;
  private string gameMap_ = "";
  public bool HasGameMap {
    get { return hasGameMap; }
  }
  public string GameMap {
    get { return gameMap_; }
  }
  
  public const int TvMasterSteamidFieldNumber = 11;
  private bool hasTvMasterSteamid;
  private ulong tvMasterSteamid_;
  public bool HasTvMasterSteamid {
    get { return hasTvMasterSteamid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong TvMasterSteamid {
    get { return tvMasterSteamid_; }
  }
  
  public const int TvLocalSlotsFieldNumber = 12;
  private bool hasTvLocalSlots;
  private uint tvLocalSlots_;
  public bool HasTvLocalSlots {
    get { return hasTvLocalSlots; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvLocalSlots {
    get { return tvLocalSlots_; }
  }
  
  public const int TvLocalClientsFieldNumber = 13;
  private bool hasTvLocalClients;
  private uint tvLocalClients_;
  public bool HasTvLocalClients {
    get { return hasTvLocalClients; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvLocalClients {
    get { return tvLocalClients_; }
  }
  
  public const int TvLocalProxiesFieldNumber = 14;
  private bool hasTvLocalProxies;
  private uint tvLocalProxies_;
  public bool HasTvLocalProxies {
    get { return hasTvLocalProxies; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvLocalProxies {
    get { return tvLocalProxies_; }
  }
  
  public const int TvRelaySlotsFieldNumber = 15;
  private bool hasTvRelaySlots;
  private uint tvRelaySlots_;
  public bool HasTvRelaySlots {
    get { return hasTvRelaySlots; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvRelaySlots {
    get { return tvRelaySlots_; }
  }
  
  public const int TvRelayClientsFieldNumber = 16;
  private bool hasTvRelayClients;
  private uint tvRelayClients_;
  public bool HasTvRelayClients {
    get { return hasTvRelayClients; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvRelayClients {
    get { return tvRelayClients_; }
  }
  
  public const int TvRelayProxiesFieldNumber = 17;
  private bool hasTvRelayProxies;
  private uint tvRelayProxies_;
  public bool HasTvRelayProxies {
    get { return hasTvRelayProxies; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvRelayProxies {
    get { return tvRelayProxies_; }
  }
  
  public const int TvRelayAddressFieldNumber = 18;
  private bool hasTvRelayAddress;
  private uint tvRelayAddress_;
  public bool HasTvRelayAddress {
    get { return hasTvRelayAddress; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvRelayAddress {
    get { return tvRelayAddress_; }
  }
  
  public const int TvRelayPortFieldNumber = 19;
  private bool hasTvRelayPort;
  private uint tvRelayPort_;
  public bool HasTvRelayPort {
    get { return hasTvRelayPort; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvRelayPort {
    get { return tvRelayPort_; }
  }
  
  public const int TvRelaySteamidFieldNumber = 20;
  private bool hasTvRelaySteamid;
  private ulong tvRelaySteamid_;
  public bool HasTvRelaySteamid {
    get { return hasTvRelaySteamid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong TvRelaySteamid {
    get { return tvRelaySteamid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _serverHltvInfoFieldNames;
    if (hasTvUdpPort) {
      output.WriteUInt32(1, field_names[17], TvUdpPort);
    }
    if (hasTvWatchKey) {
      output.WriteUInt64(2, field_names[18], TvWatchKey);
    }
    if (hasTvSlots) {
      output.WriteUInt32(3, field_names[15], TvSlots);
    }
    if (hasTvClients) {
      output.WriteUInt32(4, field_names[3], TvClients);
    }
    if (hasTvProxies) {
      output.WriteUInt32(5, field_names[8], TvProxies);
    }
    if (hasTvTime) {
      output.WriteUInt32(6, field_names[16], TvTime);
    }
    if (hasGameMode) {
      output.WriteUInt32(8, field_names[2], GameMode);
    }
    if (hasGameMapgroup) {
      output.WriteString(9, field_names[1], GameMapgroup);
    }
    if (hasGameMap) {
      output.WriteString(10, field_names[0], GameMap);
    }
    if (hasTvMasterSteamid) {
      output.WriteUInt64(11, field_names[7], TvMasterSteamid);
    }
    if (hasTvLocalSlots) {
      output.WriteUInt32(12, field_names[6], TvLocalSlots);
    }
    if (hasTvLocalClients) {
      output.WriteUInt32(13, field_names[4], TvLocalClients);
    }
    if (hasTvLocalProxies) {
      output.WriteUInt32(14, field_names[5], TvLocalProxies);
    }
    if (hasTvRelaySlots) {
      output.WriteUInt32(15, field_names[13], TvRelaySlots);
    }
    if (hasTvRelayClients) {
      output.WriteUInt32(16, field_names[10], TvRelayClients);
    }
    if (hasTvRelayProxies) {
      output.WriteUInt32(17, field_names[12], TvRelayProxies);
    }
    if (hasTvRelayAddress) {
      output.WriteUInt32(18, field_names[9], TvRelayAddress);
    }
    if (hasTvRelayPort) {
      output.WriteUInt32(19, field_names[11], TvRelayPort);
    }
    if (hasTvRelaySteamid) {
      output.WriteUInt64(20, field_names[14], TvRelaySteamid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTvUdpPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, TvUdpPort);
      }
      if (hasTvWatchKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, TvWatchKey);
      }
      if (hasTvSlots) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TvSlots);
      }
      if (hasTvClients) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, TvClients);
      }
      if (hasTvProxies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, TvProxies);
      }
      if (hasTvTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, TvTime);
      }
      if (hasGameMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, GameMode);
      }
      if (hasGameMapgroup) {
        size += pb::CodedOutputStream.ComputeStringSize(9, GameMapgroup);
      }
      if (hasGameMap) {
        size += pb::CodedOutputStream.ComputeStringSize(10, GameMap);
      }
      if (hasTvMasterSteamid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(11, TvMasterSteamid);
      }
      if (hasTvLocalSlots) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, TvLocalSlots);
      }
      if (hasTvLocalClients) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, TvLocalClients);
      }
      if (hasTvLocalProxies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, TvLocalProxies);
      }
      if (hasTvRelaySlots) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, TvRelaySlots);
      }
      if (hasTvRelayClients) {
        size += pb::CodedOutputStream.ComputeUInt32Size(16, TvRelayClients);
      }
      if (hasTvRelayProxies) {
        size += pb::CodedOutputStream.ComputeUInt32Size(17, TvRelayProxies);
      }
      if (hasTvRelayAddress) {
        size += pb::CodedOutputStream.ComputeUInt32Size(18, TvRelayAddress);
      }
      if (hasTvRelayPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(19, TvRelayPort);
      }
      if (hasTvRelaySteamid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(20, TvRelaySteamid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static ServerHltvInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static ServerHltvInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static ServerHltvInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static ServerHltvInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private ServerHltvInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(ServerHltvInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<ServerHltvInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(ServerHltvInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private ServerHltvInfo result;
    
    private ServerHltvInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        ServerHltvInfo original = result;
        result = new ServerHltvInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override ServerHltvInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::ServerHltvInfo.Descriptor; }
    }
    
    public override ServerHltvInfo DefaultInstanceForType {
      get { return global::ServerHltvInfo.DefaultInstance; }
    }
    
    public override ServerHltvInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is ServerHltvInfo) {
        return MergeFrom((ServerHltvInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(ServerHltvInfo other) {
      if (other == global::ServerHltvInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTvUdpPort) {
        TvUdpPort = other.TvUdpPort;
      }
      if (other.HasTvWatchKey) {
        TvWatchKey = other.TvWatchKey;
      }
      if (other.HasTvSlots) {
        TvSlots = other.TvSlots;
      }
      if (other.HasTvClients) {
        TvClients = other.TvClients;
      }
      if (other.HasTvProxies) {
        TvProxies = other.TvProxies;
      }
      if (other.HasTvTime) {
        TvTime = other.TvTime;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasGameMapgroup) {
        GameMapgroup = other.GameMapgroup;
      }
      if (other.HasGameMap) {
        GameMap = other.GameMap;
      }
      if (other.HasTvMasterSteamid) {
        TvMasterSteamid = other.TvMasterSteamid;
      }
      if (other.HasTvLocalSlots) {
        TvLocalSlots = other.TvLocalSlots;
      }
      if (other.HasTvLocalClients) {
        TvLocalClients = other.TvLocalClients;
      }
      if (other.HasTvLocalProxies) {
        TvLocalProxies = other.TvLocalProxies;
      }
      if (other.HasTvRelaySlots) {
        TvRelaySlots = other.TvRelaySlots;
      }
      if (other.HasTvRelayClients) {
        TvRelayClients = other.TvRelayClients;
      }
      if (other.HasTvRelayProxies) {
        TvRelayProxies = other.TvRelayProxies;
      }
      if (other.HasTvRelayAddress) {
        TvRelayAddress = other.TvRelayAddress;
      }
      if (other.HasTvRelayPort) {
        TvRelayPort = other.TvRelayPort;
      }
      if (other.HasTvRelaySteamid) {
        TvRelaySteamid = other.TvRelaySteamid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_serverHltvInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _serverHltvInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTvUdpPort = input.ReadUInt32(ref result.tvUdpPort_);
            break;
          }
          case 16: {
            result.hasTvWatchKey = input.ReadUInt64(ref result.tvWatchKey_);
            break;
          }
          case 24: {
            result.hasTvSlots = input.ReadUInt32(ref result.tvSlots_);
            break;
          }
          case 32: {
            result.hasTvClients = input.ReadUInt32(ref result.tvClients_);
            break;
          }
          case 40: {
            result.hasTvProxies = input.ReadUInt32(ref result.tvProxies_);
            break;
          }
          case 48: {
            result.hasTvTime = input.ReadUInt32(ref result.tvTime_);
            break;
          }
          case 64: {
            result.hasGameMode = input.ReadUInt32(ref result.gameMode_);
            break;
          }
          case 74: {
            result.hasGameMapgroup = input.ReadString(ref result.gameMapgroup_);
            break;
          }
          case 82: {
            result.hasGameMap = input.ReadString(ref result.gameMap_);
            break;
          }
          case 88: {
            result.hasTvMasterSteamid = input.ReadUInt64(ref result.tvMasterSteamid_);
            break;
          }
          case 96: {
            result.hasTvLocalSlots = input.ReadUInt32(ref result.tvLocalSlots_);
            break;
          }
          case 104: {
            result.hasTvLocalClients = input.ReadUInt32(ref result.tvLocalClients_);
            break;
          }
          case 112: {
            result.hasTvLocalProxies = input.ReadUInt32(ref result.tvLocalProxies_);
            break;
          }
          case 120: {
            result.hasTvRelaySlots = input.ReadUInt32(ref result.tvRelaySlots_);
            break;
          }
          case 128: {
            result.hasTvRelayClients = input.ReadUInt32(ref result.tvRelayClients_);
            break;
          }
          case 136: {
            result.hasTvRelayProxies = input.ReadUInt32(ref result.tvRelayProxies_);
            break;
          }
          case 144: {
            result.hasTvRelayAddress = input.ReadUInt32(ref result.tvRelayAddress_);
            break;
          }
          case 152: {
            result.hasTvRelayPort = input.ReadUInt32(ref result.tvRelayPort_);
            break;
          }
          case 160: {
            result.hasTvRelaySteamid = input.ReadUInt64(ref result.tvRelaySteamid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTvUdpPort {
      get { return result.hasTvUdpPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvUdpPort {
      get { return result.TvUdpPort; }
      set { SetTvUdpPort(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvUdpPort(uint value) {
      PrepareBuilder();
      result.hasTvUdpPort = true;
      result.tvUdpPort_ = value;
      return this;
    }
    public Builder ClearTvUdpPort() {
      PrepareBuilder();
      result.hasTvUdpPort = false;
      result.tvUdpPort_ = 0;
      return this;
    }
    
    public bool HasTvWatchKey {
      get { return result.hasTvWatchKey; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TvWatchKey {
      get { return result.TvWatchKey; }
      set { SetTvWatchKey(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvWatchKey(ulong value) {
      PrepareBuilder();
      result.hasTvWatchKey = true;
      result.tvWatchKey_ = value;
      return this;
    }
    public Builder ClearTvWatchKey() {
      PrepareBuilder();
      result.hasTvWatchKey = false;
      result.tvWatchKey_ = 0UL;
      return this;
    }
    
    public bool HasTvSlots {
      get { return result.hasTvSlots; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvSlots {
      get { return result.TvSlots; }
      set { SetTvSlots(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvSlots(uint value) {
      PrepareBuilder();
      result.hasTvSlots = true;
      result.tvSlots_ = value;
      return this;
    }
    public Builder ClearTvSlots() {
      PrepareBuilder();
      result.hasTvSlots = false;
      result.tvSlots_ = 0;
      return this;
    }
    
    public bool HasTvClients {
      get { return result.hasTvClients; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvClients {
      get { return result.TvClients; }
      set { SetTvClients(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvClients(uint value) {
      PrepareBuilder();
      result.hasTvClients = true;
      result.tvClients_ = value;
      return this;
    }
    public Builder ClearTvClients() {
      PrepareBuilder();
      result.hasTvClients = false;
      result.tvClients_ = 0;
      return this;
    }
    
    public bool HasTvProxies {
      get { return result.hasTvProxies; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvProxies {
      get { return result.TvProxies; }
      set { SetTvProxies(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvProxies(uint value) {
      PrepareBuilder();
      result.hasTvProxies = true;
      result.tvProxies_ = value;
      return this;
    }
    public Builder ClearTvProxies() {
      PrepareBuilder();
      result.hasTvProxies = false;
      result.tvProxies_ = 0;
      return this;
    }
    
    public bool HasTvTime {
      get { return result.hasTvTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvTime {
      get { return result.TvTime; }
      set { SetTvTime(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvTime(uint value) {
      PrepareBuilder();
      result.hasTvTime = true;
      result.tvTime_ = value;
      return this;
    }
    public Builder ClearTvTime() {
      PrepareBuilder();
      result.hasTvTime = false;
      result.tvTime_ = 0;
      return this;
    }
    
    public bool HasGameMode {
      get { return result.hasGameMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameMode {
      get { return result.GameMode; }
      set { SetGameMode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGameMode(uint value) {
      PrepareBuilder();
      result.hasGameMode = true;
      result.gameMode_ = value;
      return this;
    }
    public Builder ClearGameMode() {
      PrepareBuilder();
      result.hasGameMode = false;
      result.gameMode_ = 0;
      return this;
    }
    
    public bool HasGameMapgroup {
      get { return result.hasGameMapgroup; }
    }
    public string GameMapgroup {
      get { return result.GameMapgroup; }
      set { SetGameMapgroup(value); }
    }
    public Builder SetGameMapgroup(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGameMapgroup = true;
      result.gameMapgroup_ = value;
      return this;
    }
    public Builder ClearGameMapgroup() {
      PrepareBuilder();
      result.hasGameMapgroup = false;
      result.gameMapgroup_ = "";
      return this;
    }
    
    public bool HasGameMap {
      get { return result.hasGameMap; }
    }
    public string GameMap {
      get { return result.GameMap; }
      set { SetGameMap(value); }
    }
    public Builder SetGameMap(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGameMap = true;
      result.gameMap_ = value;
      return this;
    }
    public Builder ClearGameMap() {
      PrepareBuilder();
      result.hasGameMap = false;
      result.gameMap_ = "";
      return this;
    }
    
    public bool HasTvMasterSteamid {
      get { return result.hasTvMasterSteamid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TvMasterSteamid {
      get { return result.TvMasterSteamid; }
      set { SetTvMasterSteamid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvMasterSteamid(ulong value) {
      PrepareBuilder();
      result.hasTvMasterSteamid = true;
      result.tvMasterSteamid_ = value;
      return this;
    }
    public Builder ClearTvMasterSteamid() {
      PrepareBuilder();
      result.hasTvMasterSteamid = false;
      result.tvMasterSteamid_ = 0UL;
      return this;
    }
    
    public bool HasTvLocalSlots {
      get { return result.hasTvLocalSlots; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvLocalSlots {
      get { return result.TvLocalSlots; }
      set { SetTvLocalSlots(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvLocalSlots(uint value) {
      PrepareBuilder();
      result.hasTvLocalSlots = true;
      result.tvLocalSlots_ = value;
      return this;
    }
    public Builder ClearTvLocalSlots() {
      PrepareBuilder();
      result.hasTvLocalSlots = false;
      result.tvLocalSlots_ = 0;
      return this;
    }
    
    public bool HasTvLocalClients {
      get { return result.hasTvLocalClients; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvLocalClients {
      get { return result.TvLocalClients; }
      set { SetTvLocalClients(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvLocalClients(uint value) {
      PrepareBuilder();
      result.hasTvLocalClients = true;
      result.tvLocalClients_ = value;
      return this;
    }
    public Builder ClearTvLocalClients() {
      PrepareBuilder();
      result.hasTvLocalClients = false;
      result.tvLocalClients_ = 0;
      return this;
    }
    
    public bool HasTvLocalProxies {
      get { return result.hasTvLocalProxies; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvLocalProxies {
      get { return result.TvLocalProxies; }
      set { SetTvLocalProxies(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvLocalProxies(uint value) {
      PrepareBuilder();
      result.hasTvLocalProxies = true;
      result.tvLocalProxies_ = value;
      return this;
    }
    public Builder ClearTvLocalProxies() {
      PrepareBuilder();
      result.hasTvLocalProxies = false;
      result.tvLocalProxies_ = 0;
      return this;
    }
    
    public bool HasTvRelaySlots {
      get { return result.hasTvRelaySlots; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvRelaySlots {
      get { return result.TvRelaySlots; }
      set { SetTvRelaySlots(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelaySlots(uint value) {
      PrepareBuilder();
      result.hasTvRelaySlots = true;
      result.tvRelaySlots_ = value;
      return this;
    }
    public Builder ClearTvRelaySlots() {
      PrepareBuilder();
      result.hasTvRelaySlots = false;
      result.tvRelaySlots_ = 0;
      return this;
    }
    
    public bool HasTvRelayClients {
      get { return result.hasTvRelayClients; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvRelayClients {
      get { return result.TvRelayClients; }
      set { SetTvRelayClients(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelayClients(uint value) {
      PrepareBuilder();
      result.hasTvRelayClients = true;
      result.tvRelayClients_ = value;
      return this;
    }
    public Builder ClearTvRelayClients() {
      PrepareBuilder();
      result.hasTvRelayClients = false;
      result.tvRelayClients_ = 0;
      return this;
    }
    
    public bool HasTvRelayProxies {
      get { return result.hasTvRelayProxies; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvRelayProxies {
      get { return result.TvRelayProxies; }
      set { SetTvRelayProxies(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelayProxies(uint value) {
      PrepareBuilder();
      result.hasTvRelayProxies = true;
      result.tvRelayProxies_ = value;
      return this;
    }
    public Builder ClearTvRelayProxies() {
      PrepareBuilder();
      result.hasTvRelayProxies = false;
      result.tvRelayProxies_ = 0;
      return this;
    }
    
    public bool HasTvRelayAddress {
      get { return result.hasTvRelayAddress; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvRelayAddress {
      get { return result.TvRelayAddress; }
      set { SetTvRelayAddress(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelayAddress(uint value) {
      PrepareBuilder();
      result.hasTvRelayAddress = true;
      result.tvRelayAddress_ = value;
      return this;
    }
    public Builder ClearTvRelayAddress() {
      PrepareBuilder();
      result.hasTvRelayAddress = false;
      result.tvRelayAddress_ = 0;
      return this;
    }
    
    public bool HasTvRelayPort {
      get { return result.hasTvRelayPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvRelayPort {
      get { return result.TvRelayPort; }
      set { SetTvRelayPort(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelayPort(uint value) {
      PrepareBuilder();
      result.hasTvRelayPort = true;
      result.tvRelayPort_ = value;
      return this;
    }
    public Builder ClearTvRelayPort() {
      PrepareBuilder();
      result.hasTvRelayPort = false;
      result.tvRelayPort_ = 0;
      return this;
    }
    
    public bool HasTvRelaySteamid {
      get { return result.hasTvRelaySteamid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TvRelaySteamid {
      get { return result.TvRelaySteamid; }
      set { SetTvRelaySteamid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelaySteamid(ulong value) {
      PrepareBuilder();
      result.hasTvRelaySteamid = true;
      result.tvRelaySteamid_ = value;
      return this;
    }
    public Builder ClearTvRelaySteamid() {
      PrepareBuilder();
      result.hasTvRelaySteamid = false;
      result.tvRelaySteamid_ = 0UL;
      return this;
    }
  }
  static ServerHltvInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class IpAddressMask : pb::GeneratedMessage<IpAddressMask, IpAddressMask.Builder> {
  private IpAddressMask() { }
  private static readonly IpAddressMask defaultInstance = new IpAddressMask().MakeReadOnly();
  private static readonly string[] _ipAddressMaskFieldNames = new string[] { "a", "b", "bits", "c", "d", "token" };
  private static readonly uint[] _ipAddressMaskFieldTags = new uint[] { 8, 16, 40, 24, 32, 48 };
  public static IpAddressMask DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override IpAddressMask DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override IpAddressMask ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_IpAddressMask__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<IpAddressMask, IpAddressMask.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_IpAddressMask__FieldAccessorTable; }
  }
  
  public const int AFieldNumber = 1;
  private bool hasA;
  private uint a_;
  public bool HasA {
    get { return hasA; }
  }
  [global::System.CLSCompliant(false)]
  public uint A {
    get { return a_; }
  }
  
  public const int BFieldNumber = 2;
  private bool hasB;
  private uint b_;
  public bool HasB {
    get { return hasB; }
  }
  [global::System.CLSCompliant(false)]
  public uint B {
    get { return b_; }
  }
  
  public const int CFieldNumber = 3;
  private bool hasC;
  private uint c_;
  public bool HasC {
    get { return hasC; }
  }
  [global::System.CLSCompliant(false)]
  public uint C {
    get { return c_; }
  }
  
  public const int DFieldNumber = 4;
  private bool hasD;
  private uint d_;
  public bool HasD {
    get { return hasD; }
  }
  [global::System.CLSCompliant(false)]
  public uint D {
    get { return d_; }
  }
  
  public const int BitsFieldNumber = 5;
  private bool hasBits;
  private uint bits_;
  public bool HasBits {
    get { return hasBits; }
  }
  [global::System.CLSCompliant(false)]
  public uint Bits {
    get { return bits_; }
  }
  
  public const int TokenFieldNumber = 6;
  private bool hasToken;
  private uint token_;
  public bool HasToken {
    get { return hasToken; }
  }
  [global::System.CLSCompliant(false)]
  public uint Token {
    get { return token_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _ipAddressMaskFieldNames;
    if (hasA) {
      output.WriteUInt32(1, field_names[0], A);
    }
    if (hasB) {
      output.WriteUInt32(2, field_names[1], B);
    }
    if (hasC) {
      output.WriteUInt32(3, field_names[3], C);
    }
    if (hasD) {
      output.WriteUInt32(4, field_names[4], D);
    }
    if (hasBits) {
      output.WriteUInt32(5, field_names[2], Bits);
    }
    if (hasToken) {
      output.WriteUInt32(6, field_names[5], Token);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasA) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, A);
      }
      if (hasB) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, B);
      }
      if (hasC) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, C);
      }
      if (hasD) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, D);
      }
      if (hasBits) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Bits);
      }
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Token);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static IpAddressMask ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IpAddressMask ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IpAddressMask ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static IpAddressMask ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static IpAddressMask ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IpAddressMask ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static IpAddressMask ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static IpAddressMask ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static IpAddressMask ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static IpAddressMask ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private IpAddressMask MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(IpAddressMask prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<IpAddressMask, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(IpAddressMask cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private IpAddressMask result;
    
    private IpAddressMask PrepareBuilder() {
      if (resultIsReadOnly) {
        IpAddressMask original = result;
        result = new IpAddressMask();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override IpAddressMask MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::IpAddressMask.Descriptor; }
    }
    
    public override IpAddressMask DefaultInstanceForType {
      get { return global::IpAddressMask.DefaultInstance; }
    }
    
    public override IpAddressMask BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is IpAddressMask) {
        return MergeFrom((IpAddressMask) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(IpAddressMask other) {
      if (other == global::IpAddressMask.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasA) {
        A = other.A;
      }
      if (other.HasB) {
        B = other.B;
      }
      if (other.HasC) {
        C = other.C;
      }
      if (other.HasD) {
        D = other.D;
      }
      if (other.HasBits) {
        Bits = other.Bits;
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_ipAddressMaskFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _ipAddressMaskFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasA = input.ReadUInt32(ref result.a_);
            break;
          }
          case 16: {
            result.hasB = input.ReadUInt32(ref result.b_);
            break;
          }
          case 24: {
            result.hasC = input.ReadUInt32(ref result.c_);
            break;
          }
          case 32: {
            result.hasD = input.ReadUInt32(ref result.d_);
            break;
          }
          case 40: {
            result.hasBits = input.ReadUInt32(ref result.bits_);
            break;
          }
          case 48: {
            result.hasToken = input.ReadUInt32(ref result.token_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasA {
      get { return result.hasA; }
    }
    [global::System.CLSCompliant(false)]
    public uint A {
      get { return result.A; }
      set { SetA(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetA(uint value) {
      PrepareBuilder();
      result.hasA = true;
      result.a_ = value;
      return this;
    }
    public Builder ClearA() {
      PrepareBuilder();
      result.hasA = false;
      result.a_ = 0;
      return this;
    }
    
    public bool HasB {
      get { return result.hasB; }
    }
    [global::System.CLSCompliant(false)]
    public uint B {
      get { return result.B; }
      set { SetB(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetB(uint value) {
      PrepareBuilder();
      result.hasB = true;
      result.b_ = value;
      return this;
    }
    public Builder ClearB() {
      PrepareBuilder();
      result.hasB = false;
      result.b_ = 0;
      return this;
    }
    
    public bool HasC {
      get { return result.hasC; }
    }
    [global::System.CLSCompliant(false)]
    public uint C {
      get { return result.C; }
      set { SetC(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetC(uint value) {
      PrepareBuilder();
      result.hasC = true;
      result.c_ = value;
      return this;
    }
    public Builder ClearC() {
      PrepareBuilder();
      result.hasC = false;
      result.c_ = 0;
      return this;
    }
    
    public bool HasD {
      get { return result.hasD; }
    }
    [global::System.CLSCompliant(false)]
    public uint D {
      get { return result.D; }
      set { SetD(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetD(uint value) {
      PrepareBuilder();
      result.hasD = true;
      result.d_ = value;
      return this;
    }
    public Builder ClearD() {
      PrepareBuilder();
      result.hasD = false;
      result.d_ = 0;
      return this;
    }
    
    public bool HasBits {
      get { return result.hasBits; }
    }
    [global::System.CLSCompliant(false)]
    public uint Bits {
      get { return result.Bits; }
      set { SetBits(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBits(uint value) {
      PrepareBuilder();
      result.hasBits = true;
      result.bits_ = value;
      return this;
    }
    public Builder ClearBits() {
      PrepareBuilder();
      result.hasBits = false;
      result.bits_ = 0;
      return this;
    }
    
    public bool HasToken {
      get { return result.hasToken; }
    }
    [global::System.CLSCompliant(false)]
    public uint Token {
      get { return result.Token; }
      set { SetToken(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetToken(uint value) {
      PrepareBuilder();
      result.hasToken = true;
      result.token_ = value;
      return this;
    }
    public Builder ClearToken() {
      PrepareBuilder();
      result.hasToken = false;
      result.token_ = 0;
      return this;
    }
  }
  static IpAddressMask() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGCOperationalStats : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGCOperationalStats defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGCOperationalStatsFieldNames = new string[] { "namekeys", "packetid", "packets" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGCOperationalStatsFieldTags = new uint[] { 18, 8, 26 };
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGCOperationalStats DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGCOperationalStats__FieldAccessorTable; }
  }
  
  public const int PacketidFieldNumber = 1;
  private bool hasPacketid;
  private int packetid_;
  public bool HasPacketid {
    get { return hasPacketid; }
  }
  public int Packetid {
    get { return packetid_; }
  }
  
  public const int NamekeysFieldNumber = 2;
  private pbc::PopsicleList<global::OperationalStatisticDescription> namekeys_ = new pbc::PopsicleList<global::OperationalStatisticDescription>();
  public scg::IList<global::OperationalStatisticDescription> NamekeysList {
    get { return namekeys_; }
  }
  public int NamekeysCount {
    get { return namekeys_.Count; }
  }
  public global::OperationalStatisticDescription GetNamekeys(int index) {
    return namekeys_[index];
  }
  
  public const int PacketsFieldNumber = 3;
  private pbc::PopsicleList<global::OperationalStatisticsPacket> packets_ = new pbc::PopsicleList<global::OperationalStatisticsPacket>();
  public scg::IList<global::OperationalStatisticsPacket> PacketsList {
    get { return packets_; }
  }
  public int PacketsCount {
    get { return packets_.Count; }
  }
  public global::OperationalStatisticsPacket GetPackets(int index) {
    return packets_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGCOperationalStatsFieldNames;
    if (hasPacketid) {
      output.WriteInt32(1, field_names[1], Packetid);
    }
    if (namekeys_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], namekeys_);
    }
    if (packets_.Count > 0) {
      output.WriteMessageArray(3, field_names[2], packets_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPacketid) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Packetid);
      }
      foreach (global::OperationalStatisticDescription element in NamekeysList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      foreach (global::OperationalStatisticsPacket element in PacketsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGCOperationalStats MakeReadOnly() {
    namekeys_.MakeReadOnly();
    packets_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGCOperationalStats, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGCOperationalStats result;
    
    private CMsgGCCStrike15_v2_MatchmakingGCOperationalStats PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGCOperationalStats original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGCOperationalStats();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGCOperationalStats MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGCOperationalStats DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGCOperationalStats BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGCOperationalStats) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGCOperationalStats) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGCOperationalStats other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGCOperationalStats.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPacketid) {
        Packetid = other.Packetid;
      }
      if (other.namekeys_.Count != 0) {
        result.namekeys_.Add(other.namekeys_);
      }
      if (other.packets_.Count != 0) {
        result.packets_.Add(other.packets_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGCOperationalStatsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGCOperationalStatsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPacketid = input.ReadInt32(ref result.packetid_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.namekeys_, global::OperationalStatisticDescription.DefaultInstance, extensionRegistry);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.packets_, global::OperationalStatisticsPacket.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPacketid {
      get { return result.hasPacketid; }
    }
    public int Packetid {
      get { return result.Packetid; }
      set { SetPacketid(value); }
    }
    public Builder SetPacketid(int value) {
      PrepareBuilder();
      result.hasPacketid = true;
      result.packetid_ = value;
      return this;
    }
    public Builder ClearPacketid() {
      PrepareBuilder();
      result.hasPacketid = false;
      result.packetid_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::OperationalStatisticDescription> NamekeysList {
      get { return PrepareBuilder().namekeys_; }
    }
    public int NamekeysCount {
      get { return result.NamekeysCount; }
    }
    public global::OperationalStatisticDescription GetNamekeys(int index) {
      return result.GetNamekeys(index);
    }
    public Builder SetNamekeys(int index, global::OperationalStatisticDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.namekeys_[index] = value;
      return this;
    }
    public Builder SetNamekeys(int index, global::OperationalStatisticDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.namekeys_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddNamekeys(global::OperationalStatisticDescription value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.namekeys_.Add(value);
      return this;
    }
    public Builder AddNamekeys(global::OperationalStatisticDescription.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.namekeys_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeNamekeys(scg::IEnumerable<global::OperationalStatisticDescription> values) {
      PrepareBuilder();
      result.namekeys_.Add(values);
      return this;
    }
    public Builder ClearNamekeys() {
      PrepareBuilder();
      result.namekeys_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::OperationalStatisticsPacket> PacketsList {
      get { return PrepareBuilder().packets_; }
    }
    public int PacketsCount {
      get { return result.PacketsCount; }
    }
    public global::OperationalStatisticsPacket GetPackets(int index) {
      return result.GetPackets(index);
    }
    public Builder SetPackets(int index, global::OperationalStatisticsPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.packets_[index] = value;
      return this;
    }
    public Builder SetPackets(int index, global::OperationalStatisticsPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.packets_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPackets(global::OperationalStatisticsPacket value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.packets_.Add(value);
      return this;
    }
    public Builder AddPackets(global::OperationalStatisticsPacket.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.packets_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePackets(scg::IEnumerable<global::OperationalStatisticsPacket> values) {
      PrepareBuilder();
      result.packets_.Add(values);
      return this;
    }
    public Builder ClearPackets() {
      PrepareBuilder();
      result.packets_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGCOperationalStats() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ServerConfirmFieldNames = new string[] { "exchange", "stamp", "token" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ServerConfirmFieldTags = new uint[] { 24, 16, 8 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm__FieldAccessorTable; }
  }
  
  public const int TokenFieldNumber = 1;
  private bool hasToken;
  private uint token_;
  public bool HasToken {
    get { return hasToken; }
  }
  [global::System.CLSCompliant(false)]
  public uint Token {
    get { return token_; }
  }
  
  public const int StampFieldNumber = 2;
  private bool hasStamp;
  private uint stamp_;
  public bool HasStamp {
    get { return hasStamp; }
  }
  [global::System.CLSCompliant(false)]
  public uint Stamp {
    get { return stamp_; }
  }
  
  public const int ExchangeFieldNumber = 3;
  private bool hasExchange;
  private ulong exchange_;
  public bool HasExchange {
    get { return hasExchange; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Exchange {
    get { return exchange_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ServerConfirmFieldNames;
    if (hasToken) {
      output.WriteUInt32(1, field_names[2], Token);
    }
    if (hasStamp) {
      output.WriteUInt32(2, field_names[1], Stamp);
    }
    if (hasExchange) {
      output.WriteUInt64(3, field_names[0], Exchange);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Token);
      }
      if (hasStamp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Stamp);
      }
      if (hasExchange) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, Exchange);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasToken) {
        Token = other.Token;
      }
      if (other.HasStamp) {
        Stamp = other.Stamp;
      }
      if (other.HasExchange) {
        Exchange = other.Exchange;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ServerConfirmFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ServerConfirmFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasToken = input.ReadUInt32(ref result.token_);
            break;
          }
          case 16: {
            result.hasStamp = input.ReadUInt32(ref result.stamp_);
            break;
          }
          case 24: {
            result.hasExchange = input.ReadUInt64(ref result.exchange_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasToken {
      get { return result.hasToken; }
    }
    [global::System.CLSCompliant(false)]
    public uint Token {
      get { return result.Token; }
      set { SetToken(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetToken(uint value) {
      PrepareBuilder();
      result.hasToken = true;
      result.token_ = value;
      return this;
    }
    public Builder ClearToken() {
      PrepareBuilder();
      result.hasToken = false;
      result.token_ = 0;
      return this;
    }
    
    public bool HasStamp {
      get { return result.hasStamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Stamp {
      get { return result.Stamp; }
      set { SetStamp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetStamp(uint value) {
      PrepareBuilder();
      result.hasStamp = true;
      result.stamp_ = value;
      return this;
    }
    public Builder ClearStamp() {
      PrepareBuilder();
      result.hasStamp = false;
      result.stamp_ = 0;
      return this;
    }
    
    public bool HasExchange {
      get { return result.hasExchange; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Exchange {
      get { return result.Exchange; }
      set { SetExchange(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetExchange(ulong value) {
      PrepareBuilder();
      result.hasExchange = true;
      result.exchange_ = value;
      return this;
    }
    public Builder ClearExchange() {
      PrepareBuilder();
      result.hasExchange = false;
      result.exchange_ = 0UL;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_GC2ServerReservationUpdate : pb::GeneratedMessage<CMsgGCCStrike15_v2_GC2ServerReservationUpdate, CMsgGCCStrike15_v2_GC2ServerReservationUpdate.Builder> {
  private CMsgGCCStrike15_v2_GC2ServerReservationUpdate() { }
  private static readonly CMsgGCCStrike15_v2_GC2ServerReservationUpdate defaultInstance = new CMsgGCCStrike15_v2_GC2ServerReservationUpdate().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2GC2ServerReservationUpdateFieldNames = new string[] { "viewers_external_steam", "viewers_external_total" };
  private static readonly uint[] _cMsgGCCStrike15V2GC2ServerReservationUpdateFieldTags = new uint[] { 16, 8 };
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_GC2ServerReservationUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_GC2ServerReservationUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_GC2ServerReservationUpdate, CMsgGCCStrike15_v2_GC2ServerReservationUpdate.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GC2ServerReservationUpdate__FieldAccessorTable; }
  }
  
  public const int ViewersExternalTotalFieldNumber = 1;
  private bool hasViewersExternalTotal;
  private uint viewersExternalTotal_;
  public bool HasViewersExternalTotal {
    get { return hasViewersExternalTotal; }
  }
  [global::System.CLSCompliant(false)]
  public uint ViewersExternalTotal {
    get { return viewersExternalTotal_; }
  }
  
  public const int ViewersExternalSteamFieldNumber = 2;
  private bool hasViewersExternalSteam;
  private uint viewersExternalSteam_;
  public bool HasViewersExternalSteam {
    get { return hasViewersExternalSteam; }
  }
  [global::System.CLSCompliant(false)]
  public uint ViewersExternalSteam {
    get { return viewersExternalSteam_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2GC2ServerReservationUpdateFieldNames;
    if (hasViewersExternalTotal) {
      output.WriteUInt32(1, field_names[1], ViewersExternalTotal);
    }
    if (hasViewersExternalSteam) {
      output.WriteUInt32(2, field_names[0], ViewersExternalSteam);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasViewersExternalTotal) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ViewersExternalTotal);
      }
      if (hasViewersExternalSteam) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ViewersExternalSteam);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ServerReservationUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_GC2ServerReservationUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_GC2ServerReservationUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_GC2ServerReservationUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_GC2ServerReservationUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_GC2ServerReservationUpdate result;
    
    private CMsgGCCStrike15_v2_GC2ServerReservationUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_GC2ServerReservationUpdate original = result;
        result = new CMsgGCCStrike15_v2_GC2ServerReservationUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_GC2ServerReservationUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_GC2ServerReservationUpdate DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_GC2ServerReservationUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_GC2ServerReservationUpdate) {
        return MergeFrom((CMsgGCCStrike15_v2_GC2ServerReservationUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_GC2ServerReservationUpdate other) {
      if (other == global::CMsgGCCStrike15_v2_GC2ServerReservationUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasViewersExternalTotal) {
        ViewersExternalTotal = other.ViewersExternalTotal;
      }
      if (other.HasViewersExternalSteam) {
        ViewersExternalSteam = other.ViewersExternalSteam;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2GC2ServerReservationUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2GC2ServerReservationUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasViewersExternalTotal = input.ReadUInt32(ref result.viewersExternalTotal_);
            break;
          }
          case 16: {
            result.hasViewersExternalSteam = input.ReadUInt32(ref result.viewersExternalSteam_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasViewersExternalTotal {
      get { return result.hasViewersExternalTotal; }
    }
    [global::System.CLSCompliant(false)]
    public uint ViewersExternalTotal {
      get { return result.ViewersExternalTotal; }
      set { SetViewersExternalTotal(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetViewersExternalTotal(uint value) {
      PrepareBuilder();
      result.hasViewersExternalTotal = true;
      result.viewersExternalTotal_ = value;
      return this;
    }
    public Builder ClearViewersExternalTotal() {
      PrepareBuilder();
      result.hasViewersExternalTotal = false;
      result.viewersExternalTotal_ = 0;
      return this;
    }
    
    public bool HasViewersExternalSteam {
      get { return result.hasViewersExternalSteam; }
    }
    [global::System.CLSCompliant(false)]
    public uint ViewersExternalSteam {
      get { return result.ViewersExternalSteam; }
      set { SetViewersExternalSteam(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetViewersExternalSteam(uint value) {
      PrepareBuilder();
      result.hasViewersExternalSteam = true;
      result.viewersExternalSteam_ = value;
      return this;
    }
    public Builder ClearViewersExternalSteam() {
      PrepareBuilder();
      result.hasViewersExternalSteam = false;
      result.viewersExternalSteam_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_GC2ServerReservationUpdate() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingStart : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingStart, CMsgGCCStrike15_v2_MatchmakingStart.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingStart() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingStart defaultInstance = new CMsgGCCStrike15_v2_MatchmakingStart().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingStartFieldNames = new string[] { "account_ids", "client_version", "game_type", "ticket_data", "tournament_match" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingStartFieldTags = new uint[] { 8, 32, 16, 26, 42 };
  public static CMsgGCCStrike15_v2_MatchmakingStart DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingStart DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingStart ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingStart__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingStart, CMsgGCCStrike15_v2_MatchmakingStart.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingStart__FieldAccessorTable; }
  }
  
  public const int AccountIdsFieldNumber = 1;
  private pbc::PopsicleList<uint> accountIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AccountIdsList {
    get { return pbc::Lists.AsReadOnly(accountIds_); }
  }
  public int AccountIdsCount {
    get { return accountIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAccountIds(int index) {
    return accountIds_[index];
  }
  
  public const int GameTypeFieldNumber = 2;
  private bool hasGameType;
  private uint gameType_;
  public bool HasGameType {
    get { return hasGameType; }
  }
  [global::System.CLSCompliant(false)]
  public uint GameType {
    get { return gameType_; }
  }
  
  public const int TicketDataFieldNumber = 3;
  private bool hasTicketData;
  private string ticketData_ = "";
  public bool HasTicketData {
    get { return hasTicketData; }
  }
  public string TicketData {
    get { return ticketData_; }
  }
  
  public const int ClientVersionFieldNumber = 4;
  private bool hasClientVersion;
  private uint clientVersion_;
  public bool HasClientVersion {
    get { return hasClientVersion; }
  }
  [global::System.CLSCompliant(false)]
  public uint ClientVersion {
    get { return clientVersion_; }
  }
  
  public const int TournamentMatchFieldNumber = 5;
  private bool hasTournamentMatch;
  private global::TournamentMatchSetup tournamentMatch_;
  public bool HasTournamentMatch {
    get { return hasTournamentMatch; }
  }
  public global::TournamentMatchSetup TournamentMatch {
    get { return tournamentMatch_ ?? global::TournamentMatchSetup.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingStartFieldNames;
    if (accountIds_.Count > 0) {
      output.WriteUInt32Array(1, field_names[0], accountIds_);
    }
    if (hasGameType) {
      output.WriteUInt32(2, field_names[2], GameType);
    }
    if (hasTicketData) {
      output.WriteString(3, field_names[3], TicketData);
    }
    if (hasClientVersion) {
      output.WriteUInt32(4, field_names[1], ClientVersion);
    }
    if (hasTournamentMatch) {
      output.WriteMessage(5, field_names[4], TournamentMatch);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (uint element in AccountIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * accountIds_.Count;
      }
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, GameType);
      }
      if (hasTicketData) {
        size += pb::CodedOutputStream.ComputeStringSize(3, TicketData);
      }
      if (hasClientVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ClientVersion);
      }
      if (hasTournamentMatch) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, TournamentMatch);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStart ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingStart MakeReadOnly() {
    accountIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingStart prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingStart, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingStart cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingStart result;
    
    private CMsgGCCStrike15_v2_MatchmakingStart PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingStart original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingStart();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingStart MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingStart.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingStart DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingStart.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingStart BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingStart) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingStart) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingStart other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingStart.DefaultInstance) return this;
      PrepareBuilder();
      if (other.accountIds_.Count != 0) {
        result.accountIds_.Add(other.accountIds_);
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasTicketData) {
        TicketData = other.TicketData;
      }
      if (other.HasClientVersion) {
        ClientVersion = other.ClientVersion;
      }
      if (other.HasTournamentMatch) {
        MergeTournamentMatch(other.TournamentMatch);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingStartFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingStartFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadUInt32Array(tag, field_name, result.accountIds_);
            break;
          }
          case 16: {
            result.hasGameType = input.ReadUInt32(ref result.gameType_);
            break;
          }
          case 26: {
            result.hasTicketData = input.ReadString(ref result.ticketData_);
            break;
          }
          case 32: {
            result.hasClientVersion = input.ReadUInt32(ref result.clientVersion_);
            break;
          }
          case 42: {
            global::TournamentMatchSetup.Builder subBuilder = global::TournamentMatchSetup.CreateBuilder();
            if (result.hasTournamentMatch) {
              subBuilder.MergeFrom(TournamentMatch);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TournamentMatch = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AccountIdsList {
      get { return PrepareBuilder().accountIds_; }
    }
    public int AccountIdsCount {
      get { return result.AccountIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAccountIds(int index) {
      return result.GetAccountIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountIds(int index, uint value) {
      PrepareBuilder();
      result.accountIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAccountIds(uint value) {
      PrepareBuilder();
      result.accountIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAccountIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.accountIds_.Add(values);
      return this;
    }
    public Builder ClearAccountIds() {
      PrepareBuilder();
      result.accountIds_.Clear();
      return this;
    }
    
    public bool HasGameType {
      get { return result.hasGameType; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameType {
      get { return result.GameType; }
      set { SetGameType(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGameType(uint value) {
      PrepareBuilder();
      result.hasGameType = true;
      result.gameType_ = value;
      return this;
    }
    public Builder ClearGameType() {
      PrepareBuilder();
      result.hasGameType = false;
      result.gameType_ = 0;
      return this;
    }
    
    public bool HasTicketData {
      get { return result.hasTicketData; }
    }
    public string TicketData {
      get { return result.TicketData; }
      set { SetTicketData(value); }
    }
    public Builder SetTicketData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTicketData = true;
      result.ticketData_ = value;
      return this;
    }
    public Builder ClearTicketData() {
      PrepareBuilder();
      result.hasTicketData = false;
      result.ticketData_ = "";
      return this;
    }
    
    public bool HasClientVersion {
      get { return result.hasClientVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint ClientVersion {
      get { return result.ClientVersion; }
      set { SetClientVersion(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetClientVersion(uint value) {
      PrepareBuilder();
      result.hasClientVersion = true;
      result.clientVersion_ = value;
      return this;
    }
    public Builder ClearClientVersion() {
      PrepareBuilder();
      result.hasClientVersion = false;
      result.clientVersion_ = 0;
      return this;
    }
    
    public bool HasTournamentMatch {
     get { return result.hasTournamentMatch; }
    }
    public global::TournamentMatchSetup TournamentMatch {
      get { return result.TournamentMatch; }
      set { SetTournamentMatch(value); }
    }
    public Builder SetTournamentMatch(global::TournamentMatchSetup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTournamentMatch = true;
      result.tournamentMatch_ = value;
      return this;
    }
    public Builder SetTournamentMatch(global::TournamentMatchSetup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTournamentMatch = true;
      result.tournamentMatch_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTournamentMatch(global::TournamentMatchSetup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTournamentMatch &&
          result.tournamentMatch_ != global::TournamentMatchSetup.DefaultInstance) {
          result.tournamentMatch_ = global::TournamentMatchSetup.CreateBuilder(result.tournamentMatch_).MergeFrom(value).BuildPartial();
      } else {
        result.tournamentMatch_ = value;
      }
      result.hasTournamentMatch = true;
      return this;
    }
    public Builder ClearTournamentMatch() {
      PrepareBuilder();
      result.hasTournamentMatch = false;
      result.tournamentMatch_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingStart() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingStop : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingStop, CMsgGCCStrike15_v2_MatchmakingStop.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingStop() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingStop defaultInstance = new CMsgGCCStrike15_v2_MatchmakingStop().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingStopFieldNames = new string[] { "abandon" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingStopFieldTags = new uint[] { 8 };
  public static CMsgGCCStrike15_v2_MatchmakingStop DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingStop DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingStop ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingStop__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingStop, CMsgGCCStrike15_v2_MatchmakingStop.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingStop__FieldAccessorTable; }
  }
  
  public const int AbandonFieldNumber = 1;
  private bool hasAbandon;
  private int abandon_;
  public bool HasAbandon {
    get { return hasAbandon; }
  }
  public int Abandon {
    get { return abandon_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingStopFieldNames;
    if (hasAbandon) {
      output.WriteInt32(1, field_names[0], Abandon);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAbandon) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Abandon);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingStop ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingStop MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingStop prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingStop, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingStop cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingStop result;
    
    private CMsgGCCStrike15_v2_MatchmakingStop PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingStop original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingStop();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingStop MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingStop.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingStop DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingStop.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingStop BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingStop) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingStop) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingStop other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingStop.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAbandon) {
        Abandon = other.Abandon;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingStopFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingStopFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAbandon = input.ReadInt32(ref result.abandon_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAbandon {
      get { return result.hasAbandon; }
    }
    public int Abandon {
      get { return result.Abandon; }
      set { SetAbandon(value); }
    }
    public Builder SetAbandon(int value) {
      PrepareBuilder();
      result.hasAbandon = true;
      result.abandon_ = value;
      return this;
    }
    public Builder ClearAbandon() {
      PrepareBuilder();
      result.hasAbandon = false;
      result.abandon_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingStop() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingClient2ServerPing : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingClient2ServerPing defaultInstance = new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingClient2ServerPingFieldNames = new string[] { "final_batch", "gameserverpings", "offset_index" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingClient2ServerPingFieldTags = new uint[] { 24, 10, 16 };
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingClient2ServerPing DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingClient2ServerPing__FieldAccessorTable; }
  }
  
  public const int GameserverpingsFieldNumber = 1;
  private pbc::PopsicleList<global::GameServerPing> gameserverpings_ = new pbc::PopsicleList<global::GameServerPing>();
  public scg::IList<global::GameServerPing> GameserverpingsList {
    get { return gameserverpings_; }
  }
  public int GameserverpingsCount {
    get { return gameserverpings_.Count; }
  }
  public global::GameServerPing GetGameserverpings(int index) {
    return gameserverpings_[index];
  }
  
  public const int OffsetIndexFieldNumber = 2;
  private bool hasOffsetIndex;
  private int offsetIndex_;
  public bool HasOffsetIndex {
    get { return hasOffsetIndex; }
  }
  public int OffsetIndex {
    get { return offsetIndex_; }
  }
  
  public const int FinalBatchFieldNumber = 3;
  private bool hasFinalBatch;
  private int finalBatch_;
  public bool HasFinalBatch {
    get { return hasFinalBatch; }
  }
  public int FinalBatch {
    get { return finalBatch_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingClient2ServerPingFieldNames;
    if (gameserverpings_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], gameserverpings_);
    }
    if (hasOffsetIndex) {
      output.WriteInt32(2, field_names[2], OffsetIndex);
    }
    if (hasFinalBatch) {
      output.WriteInt32(3, field_names[0], FinalBatch);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::GameServerPing element in GameserverpingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasOffsetIndex) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, OffsetIndex);
      }
      if (hasFinalBatch) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, FinalBatch);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingClient2ServerPing MakeReadOnly() {
    gameserverpings_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingClient2ServerPing, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingClient2ServerPing result;
    
    private CMsgGCCStrike15_v2_MatchmakingClient2ServerPing PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingClient2ServerPing original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingClient2ServerPing();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingClient2ServerPing MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingClient2ServerPing DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingClient2ServerPing BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingClient2ServerPing) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingClient2ServerPing) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingClient2ServerPing other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingClient2ServerPing.DefaultInstance) return this;
      PrepareBuilder();
      if (other.gameserverpings_.Count != 0) {
        result.gameserverpings_.Add(other.gameserverpings_);
      }
      if (other.HasOffsetIndex) {
        OffsetIndex = other.OffsetIndex;
      }
      if (other.HasFinalBatch) {
        FinalBatch = other.FinalBatch;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingClient2ServerPingFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingClient2ServerPingFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.gameserverpings_, global::GameServerPing.DefaultInstance, extensionRegistry);
            break;
          }
          case 16: {
            result.hasOffsetIndex = input.ReadInt32(ref result.offsetIndex_);
            break;
          }
          case 24: {
            result.hasFinalBatch = input.ReadInt32(ref result.finalBatch_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::GameServerPing> GameserverpingsList {
      get { return PrepareBuilder().gameserverpings_; }
    }
    public int GameserverpingsCount {
      get { return result.GameserverpingsCount; }
    }
    public global::GameServerPing GetGameserverpings(int index) {
      return result.GetGameserverpings(index);
    }
    public Builder SetGameserverpings(int index, global::GameServerPing value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.gameserverpings_[index] = value;
      return this;
    }
    public Builder SetGameserverpings(int index, global::GameServerPing.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.gameserverpings_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGameserverpings(global::GameServerPing value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.gameserverpings_.Add(value);
      return this;
    }
    public Builder AddGameserverpings(global::GameServerPing.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.gameserverpings_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGameserverpings(scg::IEnumerable<global::GameServerPing> values) {
      PrepareBuilder();
      result.gameserverpings_.Add(values);
      return this;
    }
    public Builder ClearGameserverpings() {
      PrepareBuilder();
      result.gameserverpings_.Clear();
      return this;
    }
    
    public bool HasOffsetIndex {
      get { return result.hasOffsetIndex; }
    }
    public int OffsetIndex {
      get { return result.OffsetIndex; }
      set { SetOffsetIndex(value); }
    }
    public Builder SetOffsetIndex(int value) {
      PrepareBuilder();
      result.hasOffsetIndex = true;
      result.offsetIndex_ = value;
      return this;
    }
    public Builder ClearOffsetIndex() {
      PrepareBuilder();
      result.hasOffsetIndex = false;
      result.offsetIndex_ = 0;
      return this;
    }
    
    public bool HasFinalBatch {
      get { return result.hasFinalBatch; }
    }
    public int FinalBatch {
      get { return result.FinalBatch; }
      set { SetFinalBatch(value); }
    }
    public Builder SetFinalBatch(int value) {
      PrepareBuilder();
      result.hasFinalBatch = true;
      result.finalBatch_ = value;
      return this;
    }
    public Builder ClearFinalBatch() {
      PrepareBuilder();
      result.hasFinalBatch = false;
      result.finalBatch_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingClient2ServerPing() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ClientUpdateFieldNames = new string[] { "error", "failping_account_id_sessions", "failready_account_id_sessions", "global_stats", "matchmaking", "ongoingmatch_account_id_sessions", "penalty_account_id_sessions", "server_ipaddress_mask", "vacbanned_account_id_sessions", "waiting_account_id_sessions" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ClientUpdateFieldTags = new uint[] { 26, 64, 80, 58, 8, 48, 72, 98, 88, 16 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate__FieldAccessorTable; }
  }
  
  public const int MatchmakingFieldNumber = 1;
  private bool hasMatchmaking;
  private int matchmaking_;
  public bool HasMatchmaking {
    get { return hasMatchmaking; }
  }
  public int Matchmaking {
    get { return matchmaking_; }
  }
  
  public const int WaitingAccountIdSessionsFieldNumber = 2;
  private pbc::PopsicleList<uint> waitingAccountIdSessions_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> WaitingAccountIdSessionsList {
    get { return pbc::Lists.AsReadOnly(waitingAccountIdSessions_); }
  }
  public int WaitingAccountIdSessionsCount {
    get { return waitingAccountIdSessions_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetWaitingAccountIdSessions(int index) {
    return waitingAccountIdSessions_[index];
  }
  
  public const int ErrorFieldNumber = 3;
  private bool hasError;
  private string error_ = "";
  public bool HasError {
    get { return hasError; }
  }
  public string Error {
    get { return error_; }
  }
  
  public const int OngoingmatchAccountIdSessionsFieldNumber = 6;
  private pbc::PopsicleList<uint> ongoingmatchAccountIdSessions_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> OngoingmatchAccountIdSessionsList {
    get { return pbc::Lists.AsReadOnly(ongoingmatchAccountIdSessions_); }
  }
  public int OngoingmatchAccountIdSessionsCount {
    get { return ongoingmatchAccountIdSessions_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetOngoingmatchAccountIdSessions(int index) {
    return ongoingmatchAccountIdSessions_[index];
  }
  
  public const int GlobalStatsFieldNumber = 7;
  private bool hasGlobalStats;
  private global::GlobalStatistics globalStats_;
  public bool HasGlobalStats {
    get { return hasGlobalStats; }
  }
  public global::GlobalStatistics GlobalStats {
    get { return globalStats_ ?? global::GlobalStatistics.DefaultInstance; }
  }
  
  public const int FailpingAccountIdSessionsFieldNumber = 8;
  private pbc::PopsicleList<uint> failpingAccountIdSessions_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> FailpingAccountIdSessionsList {
    get { return pbc::Lists.AsReadOnly(failpingAccountIdSessions_); }
  }
  public int FailpingAccountIdSessionsCount {
    get { return failpingAccountIdSessions_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetFailpingAccountIdSessions(int index) {
    return failpingAccountIdSessions_[index];
  }
  
  public const int PenaltyAccountIdSessionsFieldNumber = 9;
  private pbc::PopsicleList<uint> penaltyAccountIdSessions_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> PenaltyAccountIdSessionsList {
    get { return pbc::Lists.AsReadOnly(penaltyAccountIdSessions_); }
  }
  public int PenaltyAccountIdSessionsCount {
    get { return penaltyAccountIdSessions_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetPenaltyAccountIdSessions(int index) {
    return penaltyAccountIdSessions_[index];
  }
  
  public const int FailreadyAccountIdSessionsFieldNumber = 10;
  private pbc::PopsicleList<uint> failreadyAccountIdSessions_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> FailreadyAccountIdSessionsList {
    get { return pbc::Lists.AsReadOnly(failreadyAccountIdSessions_); }
  }
  public int FailreadyAccountIdSessionsCount {
    get { return failreadyAccountIdSessions_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetFailreadyAccountIdSessions(int index) {
    return failreadyAccountIdSessions_[index];
  }
  
  public const int VacbannedAccountIdSessionsFieldNumber = 11;
  private pbc::PopsicleList<uint> vacbannedAccountIdSessions_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> VacbannedAccountIdSessionsList {
    get { return pbc::Lists.AsReadOnly(vacbannedAccountIdSessions_); }
  }
  public int VacbannedAccountIdSessionsCount {
    get { return vacbannedAccountIdSessions_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetVacbannedAccountIdSessions(int index) {
    return vacbannedAccountIdSessions_[index];
  }
  
  public const int ServerIpaddressMaskFieldNumber = 12;
  private bool hasServerIpaddressMask;
  private global::IpAddressMask serverIpaddressMask_;
  public bool HasServerIpaddressMask {
    get { return hasServerIpaddressMask; }
  }
  public global::IpAddressMask ServerIpaddressMask {
    get { return serverIpaddressMask_ ?? global::IpAddressMask.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ClientUpdateFieldNames;
    if (hasMatchmaking) {
      output.WriteInt32(1, field_names[4], Matchmaking);
    }
    if (waitingAccountIdSessions_.Count > 0) {
      output.WriteUInt32Array(2, field_names[9], waitingAccountIdSessions_);
    }
    if (hasError) {
      output.WriteString(3, field_names[0], Error);
    }
    if (ongoingmatchAccountIdSessions_.Count > 0) {
      output.WriteUInt32Array(6, field_names[5], ongoingmatchAccountIdSessions_);
    }
    if (hasGlobalStats) {
      output.WriteMessage(7, field_names[3], GlobalStats);
    }
    if (failpingAccountIdSessions_.Count > 0) {
      output.WriteUInt32Array(8, field_names[1], failpingAccountIdSessions_);
    }
    if (penaltyAccountIdSessions_.Count > 0) {
      output.WriteUInt32Array(9, field_names[6], penaltyAccountIdSessions_);
    }
    if (failreadyAccountIdSessions_.Count > 0) {
      output.WriteUInt32Array(10, field_names[2], failreadyAccountIdSessions_);
    }
    if (vacbannedAccountIdSessions_.Count > 0) {
      output.WriteUInt32Array(11, field_names[8], vacbannedAccountIdSessions_);
    }
    if (hasServerIpaddressMask) {
      output.WriteMessage(12, field_names[7], ServerIpaddressMask);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMatchmaking) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Matchmaking);
      }
      {
        int dataSize = 0;
        foreach (uint element in WaitingAccountIdSessionsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * waitingAccountIdSessions_.Count;
      }
      if (hasError) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Error);
      }
      {
        int dataSize = 0;
        foreach (uint element in OngoingmatchAccountIdSessionsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * ongoingmatchAccountIdSessions_.Count;
      }
      if (hasGlobalStats) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, GlobalStats);
      }
      {
        int dataSize = 0;
        foreach (uint element in FailpingAccountIdSessionsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * failpingAccountIdSessions_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in PenaltyAccountIdSessionsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * penaltyAccountIdSessions_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in FailreadyAccountIdSessionsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * failreadyAccountIdSessions_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in VacbannedAccountIdSessionsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * vacbannedAccountIdSessions_.Count;
      }
      if (hasServerIpaddressMask) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, ServerIpaddressMask);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate MakeReadOnly() {
    waitingAccountIdSessions_.MakeReadOnly();
    ongoingmatchAccountIdSessions_.MakeReadOnly();
    failpingAccountIdSessions_.MakeReadOnly();
    penaltyAccountIdSessions_.MakeReadOnly();
    failreadyAccountIdSessions_.MakeReadOnly();
    vacbannedAccountIdSessions_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMatchmaking) {
        Matchmaking = other.Matchmaking;
      }
      if (other.waitingAccountIdSessions_.Count != 0) {
        result.waitingAccountIdSessions_.Add(other.waitingAccountIdSessions_);
      }
      if (other.HasError) {
        Error = other.Error;
      }
      if (other.ongoingmatchAccountIdSessions_.Count != 0) {
        result.ongoingmatchAccountIdSessions_.Add(other.ongoingmatchAccountIdSessions_);
      }
      if (other.HasGlobalStats) {
        MergeGlobalStats(other.GlobalStats);
      }
      if (other.failpingAccountIdSessions_.Count != 0) {
        result.failpingAccountIdSessions_.Add(other.failpingAccountIdSessions_);
      }
      if (other.penaltyAccountIdSessions_.Count != 0) {
        result.penaltyAccountIdSessions_.Add(other.penaltyAccountIdSessions_);
      }
      if (other.failreadyAccountIdSessions_.Count != 0) {
        result.failreadyAccountIdSessions_.Add(other.failreadyAccountIdSessions_);
      }
      if (other.vacbannedAccountIdSessions_.Count != 0) {
        result.vacbannedAccountIdSessions_.Add(other.vacbannedAccountIdSessions_);
      }
      if (other.HasServerIpaddressMask) {
        MergeServerIpaddressMask(other.ServerIpaddressMask);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ClientUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ClientUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMatchmaking = input.ReadInt32(ref result.matchmaking_);
            break;
          }
          case 18:
          case 16: {
            input.ReadUInt32Array(tag, field_name, result.waitingAccountIdSessions_);
            break;
          }
          case 26: {
            result.hasError = input.ReadString(ref result.error_);
            break;
          }
          case 50:
          case 48: {
            input.ReadUInt32Array(tag, field_name, result.ongoingmatchAccountIdSessions_);
            break;
          }
          case 58: {
            global::GlobalStatistics.Builder subBuilder = global::GlobalStatistics.CreateBuilder();
            if (result.hasGlobalStats) {
              subBuilder.MergeFrom(GlobalStats);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            GlobalStats = subBuilder.BuildPartial();
            break;
          }
          case 66:
          case 64: {
            input.ReadUInt32Array(tag, field_name, result.failpingAccountIdSessions_);
            break;
          }
          case 74:
          case 72: {
            input.ReadUInt32Array(tag, field_name, result.penaltyAccountIdSessions_);
            break;
          }
          case 82:
          case 80: {
            input.ReadUInt32Array(tag, field_name, result.failreadyAccountIdSessions_);
            break;
          }
          case 90:
          case 88: {
            input.ReadUInt32Array(tag, field_name, result.vacbannedAccountIdSessions_);
            break;
          }
          case 98: {
            global::IpAddressMask.Builder subBuilder = global::IpAddressMask.CreateBuilder();
            if (result.hasServerIpaddressMask) {
              subBuilder.MergeFrom(ServerIpaddressMask);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ServerIpaddressMask = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMatchmaking {
      get { return result.hasMatchmaking; }
    }
    public int Matchmaking {
      get { return result.Matchmaking; }
      set { SetMatchmaking(value); }
    }
    public Builder SetMatchmaking(int value) {
      PrepareBuilder();
      result.hasMatchmaking = true;
      result.matchmaking_ = value;
      return this;
    }
    public Builder ClearMatchmaking() {
      PrepareBuilder();
      result.hasMatchmaking = false;
      result.matchmaking_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> WaitingAccountIdSessionsList {
      get { return PrepareBuilder().waitingAccountIdSessions_; }
    }
    public int WaitingAccountIdSessionsCount {
      get { return result.WaitingAccountIdSessionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetWaitingAccountIdSessions(int index) {
      return result.GetWaitingAccountIdSessions(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWaitingAccountIdSessions(int index, uint value) {
      PrepareBuilder();
      result.waitingAccountIdSessions_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddWaitingAccountIdSessions(uint value) {
      PrepareBuilder();
      result.waitingAccountIdSessions_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeWaitingAccountIdSessions(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.waitingAccountIdSessions_.Add(values);
      return this;
    }
    public Builder ClearWaitingAccountIdSessions() {
      PrepareBuilder();
      result.waitingAccountIdSessions_.Clear();
      return this;
    }
    
    public bool HasError {
      get { return result.hasError; }
    }
    public string Error {
      get { return result.Error; }
      set { SetError(value); }
    }
    public Builder SetError(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasError = true;
      result.error_ = value;
      return this;
    }
    public Builder ClearError() {
      PrepareBuilder();
      result.hasError = false;
      result.error_ = "";
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> OngoingmatchAccountIdSessionsList {
      get { return PrepareBuilder().ongoingmatchAccountIdSessions_; }
    }
    public int OngoingmatchAccountIdSessionsCount {
      get { return result.OngoingmatchAccountIdSessionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetOngoingmatchAccountIdSessions(int index) {
      return result.GetOngoingmatchAccountIdSessions(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetOngoingmatchAccountIdSessions(int index, uint value) {
      PrepareBuilder();
      result.ongoingmatchAccountIdSessions_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddOngoingmatchAccountIdSessions(uint value) {
      PrepareBuilder();
      result.ongoingmatchAccountIdSessions_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeOngoingmatchAccountIdSessions(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.ongoingmatchAccountIdSessions_.Add(values);
      return this;
    }
    public Builder ClearOngoingmatchAccountIdSessions() {
      PrepareBuilder();
      result.ongoingmatchAccountIdSessions_.Clear();
      return this;
    }
    
    public bool HasGlobalStats {
     get { return result.hasGlobalStats; }
    }
    public global::GlobalStatistics GlobalStats {
      get { return result.GlobalStats; }
      set { SetGlobalStats(value); }
    }
    public Builder SetGlobalStats(global::GlobalStatistics value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGlobalStats = true;
      result.globalStats_ = value;
      return this;
    }
    public Builder SetGlobalStats(global::GlobalStatistics.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGlobalStats = true;
      result.globalStats_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGlobalStats(global::GlobalStatistics value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGlobalStats &&
          result.globalStats_ != global::GlobalStatistics.DefaultInstance) {
          result.globalStats_ = global::GlobalStatistics.CreateBuilder(result.globalStats_).MergeFrom(value).BuildPartial();
      } else {
        result.globalStats_ = value;
      }
      result.hasGlobalStats = true;
      return this;
    }
    public Builder ClearGlobalStats() {
      PrepareBuilder();
      result.hasGlobalStats = false;
      result.globalStats_ = null;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> FailpingAccountIdSessionsList {
      get { return PrepareBuilder().failpingAccountIdSessions_; }
    }
    public int FailpingAccountIdSessionsCount {
      get { return result.FailpingAccountIdSessionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetFailpingAccountIdSessions(int index) {
      return result.GetFailpingAccountIdSessions(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFailpingAccountIdSessions(int index, uint value) {
      PrepareBuilder();
      result.failpingAccountIdSessions_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddFailpingAccountIdSessions(uint value) {
      PrepareBuilder();
      result.failpingAccountIdSessions_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeFailpingAccountIdSessions(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.failpingAccountIdSessions_.Add(values);
      return this;
    }
    public Builder ClearFailpingAccountIdSessions() {
      PrepareBuilder();
      result.failpingAccountIdSessions_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> PenaltyAccountIdSessionsList {
      get { return PrepareBuilder().penaltyAccountIdSessions_; }
    }
    public int PenaltyAccountIdSessionsCount {
      get { return result.PenaltyAccountIdSessionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetPenaltyAccountIdSessions(int index) {
      return result.GetPenaltyAccountIdSessions(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPenaltyAccountIdSessions(int index, uint value) {
      PrepareBuilder();
      result.penaltyAccountIdSessions_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddPenaltyAccountIdSessions(uint value) {
      PrepareBuilder();
      result.penaltyAccountIdSessions_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangePenaltyAccountIdSessions(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.penaltyAccountIdSessions_.Add(values);
      return this;
    }
    public Builder ClearPenaltyAccountIdSessions() {
      PrepareBuilder();
      result.penaltyAccountIdSessions_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> FailreadyAccountIdSessionsList {
      get { return PrepareBuilder().failreadyAccountIdSessions_; }
    }
    public int FailreadyAccountIdSessionsCount {
      get { return result.FailreadyAccountIdSessionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetFailreadyAccountIdSessions(int index) {
      return result.GetFailreadyAccountIdSessions(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFailreadyAccountIdSessions(int index, uint value) {
      PrepareBuilder();
      result.failreadyAccountIdSessions_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddFailreadyAccountIdSessions(uint value) {
      PrepareBuilder();
      result.failreadyAccountIdSessions_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeFailreadyAccountIdSessions(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.failreadyAccountIdSessions_.Add(values);
      return this;
    }
    public Builder ClearFailreadyAccountIdSessions() {
      PrepareBuilder();
      result.failreadyAccountIdSessions_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> VacbannedAccountIdSessionsList {
      get { return PrepareBuilder().vacbannedAccountIdSessions_; }
    }
    public int VacbannedAccountIdSessionsCount {
      get { return result.VacbannedAccountIdSessionsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetVacbannedAccountIdSessions(int index) {
      return result.GetVacbannedAccountIdSessions(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetVacbannedAccountIdSessions(int index, uint value) {
      PrepareBuilder();
      result.vacbannedAccountIdSessions_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddVacbannedAccountIdSessions(uint value) {
      PrepareBuilder();
      result.vacbannedAccountIdSessions_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeVacbannedAccountIdSessions(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.vacbannedAccountIdSessions_.Add(values);
      return this;
    }
    public Builder ClearVacbannedAccountIdSessions() {
      PrepareBuilder();
      result.vacbannedAccountIdSessions_.Clear();
      return this;
    }
    
    public bool HasServerIpaddressMask {
     get { return result.hasServerIpaddressMask; }
    }
    public global::IpAddressMask ServerIpaddressMask {
      get { return result.ServerIpaddressMask; }
      set { SetServerIpaddressMask(value); }
    }
    public Builder SetServerIpaddressMask(global::IpAddressMask value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasServerIpaddressMask = true;
      result.serverIpaddressMask_ = value;
      return this;
    }
    public Builder SetServerIpaddressMask(global::IpAddressMask.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasServerIpaddressMask = true;
      result.serverIpaddressMask_ = builderForValue.Build();
      return this;
    }
    public Builder MergeServerIpaddressMask(global::IpAddressMask value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasServerIpaddressMask &&
          result.serverIpaddressMask_ != global::IpAddressMask.DefaultInstance) {
          result.serverIpaddressMask_ = global::IpAddressMask.CreateBuilder(result.serverIpaddressMask_).MergeFrom(value).BuildPartial();
      } else {
        result.serverIpaddressMask_ = value;
      }
      result.hasServerIpaddressMask = true;
      return this;
    }
    public Builder ClearServerIpaddressMask() {
      PrepareBuilder();
      result.hasServerIpaddressMask = false;
      result.serverIpaddressMask_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientUpdate() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_TournamentMatchDraft : pb::GeneratedMessage<CDataGCCStrike15_v2_TournamentMatchDraft, CDataGCCStrike15_v2_TournamentMatchDraft.Builder> {
  private CDataGCCStrike15_v2_TournamentMatchDraft() { }
  private static readonly CDataGCCStrike15_v2_TournamentMatchDraft defaultInstance = new CDataGCCStrike15_v2_TournamentMatchDraft().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2TournamentMatchDraftFieldNames = new string[] { "drafts", "event_id", "event_stage_id", "maps_count", "maps_current", "team_id_0", "team_id_1", "team_id_pickn", "team_id_start", "team_id_veto1" };
  private static readonly uint[] _cDataGCCStrike15V2TournamentMatchDraftFieldTags = new uint[] { 82, 8, 16, 40, 48, 24, 32, 72, 56, 64 };
  public static CDataGCCStrike15_v2_TournamentMatchDraft DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_TournamentMatchDraft DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_TournamentMatchDraft ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_TournamentMatchDraft, CDataGCCStrike15_v2_TournamentMatchDraft.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentMatchDraft__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Entry : pb::GeneratedMessage<Entry, Entry.Builder> {
      private Entry() { }
      private static readonly Entry defaultInstance = new Entry().MakeReadOnly();
      private static readonly string[] _entryFieldNames = new string[] { "mapid", "team_id_ct" };
      private static readonly uint[] _entryFieldTags = new uint[] { 8, 16 };
      public static Entry DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Entry DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Entry ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Entry, Entry.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentMatchDraft_Entry__FieldAccessorTable; }
      }
      
      public const int MapidFieldNumber = 1;
      private bool hasMapid;
      private int mapid_;
      public bool HasMapid {
        get { return hasMapid; }
      }
      public int Mapid {
        get { return mapid_; }
      }
      
      public const int TeamIdCtFieldNumber = 2;
      private bool hasTeamIdCt;
      private int teamIdCt_;
      public bool HasTeamIdCt {
        get { return hasTeamIdCt; }
      }
      public int TeamIdCt {
        get { return teamIdCt_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _entryFieldNames;
        if (hasMapid) {
          output.WriteInt32(1, field_names[0], Mapid);
        }
        if (hasTeamIdCt) {
          output.WriteInt32(2, field_names[1], TeamIdCt);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasMapid) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Mapid);
          }
          if (hasTeamIdCt) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, TeamIdCt);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static Entry ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Entry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Entry ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Entry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Entry ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Entry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Entry ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Entry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Entry ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Entry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Entry MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Entry prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Entry, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Entry cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Entry result;
        
        private Entry PrepareBuilder() {
          if (resultIsReadOnly) {
            Entry original = result;
            result = new Entry();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Entry MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Descriptor; }
        }
        
        public override Entry DefaultInstanceForType {
          get { return global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.DefaultInstance; }
        }
        
        public override Entry BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Entry) {
            return MergeFrom((Entry) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Entry other) {
          if (other == global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasMapid) {
            Mapid = other.Mapid;
          }
          if (other.HasTeamIdCt) {
            TeamIdCt = other.TeamIdCt;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_entryFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _entryFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasMapid = input.ReadInt32(ref result.mapid_);
                break;
              }
              case 16: {
                result.hasTeamIdCt = input.ReadInt32(ref result.teamIdCt_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasMapid {
          get { return result.hasMapid; }
        }
        public int Mapid {
          get { return result.Mapid; }
          set { SetMapid(value); }
        }
        public Builder SetMapid(int value) {
          PrepareBuilder();
          result.hasMapid = true;
          result.mapid_ = value;
          return this;
        }
        public Builder ClearMapid() {
          PrepareBuilder();
          result.hasMapid = false;
          result.mapid_ = 0;
          return this;
        }
        
        public bool HasTeamIdCt {
          get { return result.hasTeamIdCt; }
        }
        public int TeamIdCt {
          get { return result.TeamIdCt; }
          set { SetTeamIdCt(value); }
        }
        public Builder SetTeamIdCt(int value) {
          PrepareBuilder();
          result.hasTeamIdCt = true;
          result.teamIdCt_ = value;
          return this;
        }
        public Builder ClearTeamIdCt() {
          PrepareBuilder();
          result.hasTeamIdCt = false;
          result.teamIdCt_ = 0;
          return this;
        }
      }
      static Entry() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int EventIdFieldNumber = 1;
  private bool hasEventId;
  private int eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  public int EventId {
    get { return eventId_; }
  }
  
  public const int EventStageIdFieldNumber = 2;
  private bool hasEventStageId;
  private int eventStageId_;
  public bool HasEventStageId {
    get { return hasEventStageId; }
  }
  public int EventStageId {
    get { return eventStageId_; }
  }
  
  public const int TeamId0FieldNumber = 3;
  private bool hasTeamId0;
  private int teamId0_;
  public bool HasTeamId0 {
    get { return hasTeamId0; }
  }
  public int TeamId0 {
    get { return teamId0_; }
  }
  
  public const int TeamId1FieldNumber = 4;
  private bool hasTeamId1;
  private int teamId1_;
  public bool HasTeamId1 {
    get { return hasTeamId1; }
  }
  public int TeamId1 {
    get { return teamId1_; }
  }
  
  public const int MapsCountFieldNumber = 5;
  private bool hasMapsCount;
  private int mapsCount_;
  public bool HasMapsCount {
    get { return hasMapsCount; }
  }
  public int MapsCount {
    get { return mapsCount_; }
  }
  
  public const int MapsCurrentFieldNumber = 6;
  private bool hasMapsCurrent;
  private int mapsCurrent_;
  public bool HasMapsCurrent {
    get { return hasMapsCurrent; }
  }
  public int MapsCurrent {
    get { return mapsCurrent_; }
  }
  
  public const int TeamIdStartFieldNumber = 7;
  private bool hasTeamIdStart;
  private int teamIdStart_;
  public bool HasTeamIdStart {
    get { return hasTeamIdStart; }
  }
  public int TeamIdStart {
    get { return teamIdStart_; }
  }
  
  public const int TeamIdVeto1FieldNumber = 8;
  private bool hasTeamIdVeto1;
  private int teamIdVeto1_;
  public bool HasTeamIdVeto1 {
    get { return hasTeamIdVeto1; }
  }
  public int TeamIdVeto1 {
    get { return teamIdVeto1_; }
  }
  
  public const int TeamIdPicknFieldNumber = 9;
  private bool hasTeamIdPickn;
  private int teamIdPickn_;
  public bool HasTeamIdPickn {
    get { return hasTeamIdPickn; }
  }
  public int TeamIdPickn {
    get { return teamIdPickn_; }
  }
  
  public const int DraftsFieldNumber = 10;
  private pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> drafts_ = new pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry>();
  public scg::IList<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> DraftsList {
    get { return drafts_; }
  }
  public int DraftsCount {
    get { return drafts_.Count; }
  }
  public global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry GetDrafts(int index) {
    return drafts_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2TournamentMatchDraftFieldNames;
    if (hasEventId) {
      output.WriteInt32(1, field_names[1], EventId);
    }
    if (hasEventStageId) {
      output.WriteInt32(2, field_names[2], EventStageId);
    }
    if (hasTeamId0) {
      output.WriteInt32(3, field_names[5], TeamId0);
    }
    if (hasTeamId1) {
      output.WriteInt32(4, field_names[6], TeamId1);
    }
    if (hasMapsCount) {
      output.WriteInt32(5, field_names[3], MapsCount);
    }
    if (hasMapsCurrent) {
      output.WriteInt32(6, field_names[4], MapsCurrent);
    }
    if (hasTeamIdStart) {
      output.WriteInt32(7, field_names[8], TeamIdStart);
    }
    if (hasTeamIdVeto1) {
      output.WriteInt32(8, field_names[9], TeamIdVeto1);
    }
    if (hasTeamIdPickn) {
      output.WriteInt32(9, field_names[7], TeamIdPickn);
    }
    if (drafts_.Count > 0) {
      output.WriteMessageArray(10, field_names[0], drafts_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, EventId);
      }
      if (hasEventStageId) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, EventStageId);
      }
      if (hasTeamId0) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, TeamId0);
      }
      if (hasTeamId1) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, TeamId1);
      }
      if (hasMapsCount) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, MapsCount);
      }
      if (hasMapsCurrent) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, MapsCurrent);
      }
      if (hasTeamIdStart) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, TeamIdStart);
      }
      if (hasTeamIdVeto1) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, TeamIdVeto1);
      }
      if (hasTeamIdPickn) {
        size += pb::CodedOutputStream.ComputeInt32Size(9, TeamIdPickn);
      }
      foreach (global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry element in DraftsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentMatchDraft ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_TournamentMatchDraft MakeReadOnly() {
    drafts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_TournamentMatchDraft prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_TournamentMatchDraft, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_TournamentMatchDraft cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_TournamentMatchDraft result;
    
    private CDataGCCStrike15_v2_TournamentMatchDraft PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_TournamentMatchDraft original = result;
        result = new CDataGCCStrike15_v2_TournamentMatchDraft();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_TournamentMatchDraft MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_TournamentMatchDraft.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_TournamentMatchDraft DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_TournamentMatchDraft.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_TournamentMatchDraft BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_TournamentMatchDraft) {
        return MergeFrom((CDataGCCStrike15_v2_TournamentMatchDraft) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_TournamentMatchDraft other) {
      if (other == global::CDataGCCStrike15_v2_TournamentMatchDraft.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.HasEventStageId) {
        EventStageId = other.EventStageId;
      }
      if (other.HasTeamId0) {
        TeamId0 = other.TeamId0;
      }
      if (other.HasTeamId1) {
        TeamId1 = other.TeamId1;
      }
      if (other.HasMapsCount) {
        MapsCount = other.MapsCount;
      }
      if (other.HasMapsCurrent) {
        MapsCurrent = other.MapsCurrent;
      }
      if (other.HasTeamIdStart) {
        TeamIdStart = other.TeamIdStart;
      }
      if (other.HasTeamIdVeto1) {
        TeamIdVeto1 = other.TeamIdVeto1;
      }
      if (other.HasTeamIdPickn) {
        TeamIdPickn = other.TeamIdPickn;
      }
      if (other.drafts_.Count != 0) {
        result.drafts_.Add(other.drafts_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2TournamentMatchDraftFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2TournamentMatchDraftFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventId = input.ReadInt32(ref result.eventId_);
            break;
          }
          case 16: {
            result.hasEventStageId = input.ReadInt32(ref result.eventStageId_);
            break;
          }
          case 24: {
            result.hasTeamId0 = input.ReadInt32(ref result.teamId0_);
            break;
          }
          case 32: {
            result.hasTeamId1 = input.ReadInt32(ref result.teamId1_);
            break;
          }
          case 40: {
            result.hasMapsCount = input.ReadInt32(ref result.mapsCount_);
            break;
          }
          case 48: {
            result.hasMapsCurrent = input.ReadInt32(ref result.mapsCurrent_);
            break;
          }
          case 56: {
            result.hasTeamIdStart = input.ReadInt32(ref result.teamIdStart_);
            break;
          }
          case 64: {
            result.hasTeamIdVeto1 = input.ReadInt32(ref result.teamIdVeto1_);
            break;
          }
          case 72: {
            result.hasTeamIdPickn = input.ReadInt32(ref result.teamIdPickn_);
            break;
          }
          case 82: {
            input.ReadMessageArray(tag, field_name, result.drafts_, global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    public int EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    public Builder SetEventId(int value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0;
      return this;
    }
    
    public bool HasEventStageId {
      get { return result.hasEventStageId; }
    }
    public int EventStageId {
      get { return result.EventStageId; }
      set { SetEventStageId(value); }
    }
    public Builder SetEventStageId(int value) {
      PrepareBuilder();
      result.hasEventStageId = true;
      result.eventStageId_ = value;
      return this;
    }
    public Builder ClearEventStageId() {
      PrepareBuilder();
      result.hasEventStageId = false;
      result.eventStageId_ = 0;
      return this;
    }
    
    public bool HasTeamId0 {
      get { return result.hasTeamId0; }
    }
    public int TeamId0 {
      get { return result.TeamId0; }
      set { SetTeamId0(value); }
    }
    public Builder SetTeamId0(int value) {
      PrepareBuilder();
      result.hasTeamId0 = true;
      result.teamId0_ = value;
      return this;
    }
    public Builder ClearTeamId0() {
      PrepareBuilder();
      result.hasTeamId0 = false;
      result.teamId0_ = 0;
      return this;
    }
    
    public bool HasTeamId1 {
      get { return result.hasTeamId1; }
    }
    public int TeamId1 {
      get { return result.TeamId1; }
      set { SetTeamId1(value); }
    }
    public Builder SetTeamId1(int value) {
      PrepareBuilder();
      result.hasTeamId1 = true;
      result.teamId1_ = value;
      return this;
    }
    public Builder ClearTeamId1() {
      PrepareBuilder();
      result.hasTeamId1 = false;
      result.teamId1_ = 0;
      return this;
    }
    
    public bool HasMapsCount {
      get { return result.hasMapsCount; }
    }
    public int MapsCount {
      get { return result.MapsCount; }
      set { SetMapsCount(value); }
    }
    public Builder SetMapsCount(int value) {
      PrepareBuilder();
      result.hasMapsCount = true;
      result.mapsCount_ = value;
      return this;
    }
    public Builder ClearMapsCount() {
      PrepareBuilder();
      result.hasMapsCount = false;
      result.mapsCount_ = 0;
      return this;
    }
    
    public bool HasMapsCurrent {
      get { return result.hasMapsCurrent; }
    }
    public int MapsCurrent {
      get { return result.MapsCurrent; }
      set { SetMapsCurrent(value); }
    }
    public Builder SetMapsCurrent(int value) {
      PrepareBuilder();
      result.hasMapsCurrent = true;
      result.mapsCurrent_ = value;
      return this;
    }
    public Builder ClearMapsCurrent() {
      PrepareBuilder();
      result.hasMapsCurrent = false;
      result.mapsCurrent_ = 0;
      return this;
    }
    
    public bool HasTeamIdStart {
      get { return result.hasTeamIdStart; }
    }
    public int TeamIdStart {
      get { return result.TeamIdStart; }
      set { SetTeamIdStart(value); }
    }
    public Builder SetTeamIdStart(int value) {
      PrepareBuilder();
      result.hasTeamIdStart = true;
      result.teamIdStart_ = value;
      return this;
    }
    public Builder ClearTeamIdStart() {
      PrepareBuilder();
      result.hasTeamIdStart = false;
      result.teamIdStart_ = 0;
      return this;
    }
    
    public bool HasTeamIdVeto1 {
      get { return result.hasTeamIdVeto1; }
    }
    public int TeamIdVeto1 {
      get { return result.TeamIdVeto1; }
      set { SetTeamIdVeto1(value); }
    }
    public Builder SetTeamIdVeto1(int value) {
      PrepareBuilder();
      result.hasTeamIdVeto1 = true;
      result.teamIdVeto1_ = value;
      return this;
    }
    public Builder ClearTeamIdVeto1() {
      PrepareBuilder();
      result.hasTeamIdVeto1 = false;
      result.teamIdVeto1_ = 0;
      return this;
    }
    
    public bool HasTeamIdPickn {
      get { return result.hasTeamIdPickn; }
    }
    public int TeamIdPickn {
      get { return result.TeamIdPickn; }
      set { SetTeamIdPickn(value); }
    }
    public Builder SetTeamIdPickn(int value) {
      PrepareBuilder();
      result.hasTeamIdPickn = true;
      result.teamIdPickn_ = value;
      return this;
    }
    public Builder ClearTeamIdPickn() {
      PrepareBuilder();
      result.hasTeamIdPickn = false;
      result.teamIdPickn_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> DraftsList {
      get { return PrepareBuilder().drafts_; }
    }
    public int DraftsCount {
      get { return result.DraftsCount; }
    }
    public global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry GetDrafts(int index) {
      return result.GetDrafts(index);
    }
    public Builder SetDrafts(int index, global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.drafts_[index] = value;
      return this;
    }
    public Builder SetDrafts(int index, global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.drafts_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddDrafts(global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.drafts_.Add(value);
      return this;
    }
    public Builder AddDrafts(global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.drafts_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeDrafts(scg::IEnumerable<global::CDataGCCStrike15_v2_TournamentMatchDraft.Types.Entry> values) {
      PrepareBuilder();
      result.drafts_.Add(values);
      return this;
    }
    public Builder ClearDrafts() {
      PrepareBuilder();
      result.drafts_.Clear();
      return this;
    }
  }
  static CDataGCCStrike15_v2_TournamentMatchDraft() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CPreMatchInfoData : pb::GeneratedMessage<CPreMatchInfoData, CPreMatchInfoData.Builder> {
  private CPreMatchInfoData() { }
  private static readonly CPreMatchInfoData defaultInstance = new CPreMatchInfoData().MakeReadOnly();
  private static readonly string[] _cPreMatchInfoDataFieldNames = new string[] { "draft", "predictions_pct", "stats" };
  private static readonly uint[] _cPreMatchInfoDataFieldTags = new uint[] { 34, 8, 42 };
  public static CPreMatchInfoData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CPreMatchInfoData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CPreMatchInfoData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CPreMatchInfoData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CPreMatchInfoData, CPreMatchInfoData.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CPreMatchInfoData__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class TeamStats : pb::GeneratedMessage<TeamStats, TeamStats.Builder> {
      private TeamStats() { }
      private static readonly TeamStats defaultInstance = new TeamStats().MakeReadOnly();
      private static readonly string[] _teamStatsFieldNames = new string[] { "match_info_idxtxt", "match_info_teams", "match_info_txt" };
      private static readonly uint[] _teamStatsFieldTags = new uint[] { 8, 26, 18 };
      public static TeamStats DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override TeamStats DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override TeamStats ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CPreMatchInfoData_TeamStats__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<TeamStats, TeamStats.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CPreMatchInfoData_TeamStats__FieldAccessorTable; }
      }
      
      public const int MatchInfoIdxtxtFieldNumber = 1;
      private bool hasMatchInfoIdxtxt;
      private int matchInfoIdxtxt_;
      public bool HasMatchInfoIdxtxt {
        get { return hasMatchInfoIdxtxt; }
      }
      public int MatchInfoIdxtxt {
        get { return matchInfoIdxtxt_; }
      }
      
      public const int MatchInfoTxtFieldNumber = 2;
      private bool hasMatchInfoTxt;
      private string matchInfoTxt_ = "";
      public bool HasMatchInfoTxt {
        get { return hasMatchInfoTxt; }
      }
      public string MatchInfoTxt {
        get { return matchInfoTxt_; }
      }
      
      public const int MatchInfoTeamsFieldNumber = 3;
      private pbc::PopsicleList<string> matchInfoTeams_ = new pbc::PopsicleList<string>();
      public scg::IList<string> MatchInfoTeamsList {
        get { return pbc::Lists.AsReadOnly(matchInfoTeams_); }
      }
      public int MatchInfoTeamsCount {
        get { return matchInfoTeams_.Count; }
      }
      public string GetMatchInfoTeams(int index) {
        return matchInfoTeams_[index];
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _teamStatsFieldNames;
        if (hasMatchInfoIdxtxt) {
          output.WriteInt32(1, field_names[0], MatchInfoIdxtxt);
        }
        if (hasMatchInfoTxt) {
          output.WriteString(2, field_names[2], MatchInfoTxt);
        }
        if (matchInfoTeams_.Count > 0) {
          output.WriteStringArray(3, field_names[1], matchInfoTeams_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasMatchInfoIdxtxt) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, MatchInfoIdxtxt);
          }
          if (hasMatchInfoTxt) {
            size += pb::CodedOutputStream.ComputeStringSize(2, MatchInfoTxt);
          }
          {
            int dataSize = 0;
            foreach (string element in MatchInfoTeamsList) {
              dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
            }
            size += dataSize;
            size += 1 * matchInfoTeams_.Count;
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static TeamStats ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TeamStats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TeamStats ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static TeamStats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static TeamStats ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TeamStats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static TeamStats ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static TeamStats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static TeamStats ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static TeamStats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private TeamStats MakeReadOnly() {
        matchInfoTeams_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(TeamStats prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<TeamStats, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(TeamStats cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private TeamStats result;
        
        private TeamStats PrepareBuilder() {
          if (resultIsReadOnly) {
            TeamStats original = result;
            result = new TeamStats();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override TeamStats MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CPreMatchInfoData.Types.TeamStats.Descriptor; }
        }
        
        public override TeamStats DefaultInstanceForType {
          get { return global::CPreMatchInfoData.Types.TeamStats.DefaultInstance; }
        }
        
        public override TeamStats BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is TeamStats) {
            return MergeFrom((TeamStats) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(TeamStats other) {
          if (other == global::CPreMatchInfoData.Types.TeamStats.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasMatchInfoIdxtxt) {
            MatchInfoIdxtxt = other.MatchInfoIdxtxt;
          }
          if (other.HasMatchInfoTxt) {
            MatchInfoTxt = other.MatchInfoTxt;
          }
          if (other.matchInfoTeams_.Count != 0) {
            result.matchInfoTeams_.Add(other.matchInfoTeams_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_teamStatsFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _teamStatsFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasMatchInfoIdxtxt = input.ReadInt32(ref result.matchInfoIdxtxt_);
                break;
              }
              case 18: {
                result.hasMatchInfoTxt = input.ReadString(ref result.matchInfoTxt_);
                break;
              }
              case 26: {
                input.ReadStringArray(tag, field_name, result.matchInfoTeams_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasMatchInfoIdxtxt {
          get { return result.hasMatchInfoIdxtxt; }
        }
        public int MatchInfoIdxtxt {
          get { return result.MatchInfoIdxtxt; }
          set { SetMatchInfoIdxtxt(value); }
        }
        public Builder SetMatchInfoIdxtxt(int value) {
          PrepareBuilder();
          result.hasMatchInfoIdxtxt = true;
          result.matchInfoIdxtxt_ = value;
          return this;
        }
        public Builder ClearMatchInfoIdxtxt() {
          PrepareBuilder();
          result.hasMatchInfoIdxtxt = false;
          result.matchInfoIdxtxt_ = 0;
          return this;
        }
        
        public bool HasMatchInfoTxt {
          get { return result.hasMatchInfoTxt; }
        }
        public string MatchInfoTxt {
          get { return result.MatchInfoTxt; }
          set { SetMatchInfoTxt(value); }
        }
        public Builder SetMatchInfoTxt(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.hasMatchInfoTxt = true;
          result.matchInfoTxt_ = value;
          return this;
        }
        public Builder ClearMatchInfoTxt() {
          PrepareBuilder();
          result.hasMatchInfoTxt = false;
          result.matchInfoTxt_ = "";
          return this;
        }
        
        public pbc::IPopsicleList<string> MatchInfoTeamsList {
          get { return PrepareBuilder().matchInfoTeams_; }
        }
        public int MatchInfoTeamsCount {
          get { return result.MatchInfoTeamsCount; }
        }
        public string GetMatchInfoTeams(int index) {
          return result.GetMatchInfoTeams(index);
        }
        public Builder SetMatchInfoTeams(int index, string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.matchInfoTeams_[index] = value;
          return this;
        }
        public Builder AddMatchInfoTeams(string value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.matchInfoTeams_.Add(value);
          return this;
        }
        public Builder AddRangeMatchInfoTeams(scg::IEnumerable<string> values) {
          PrepareBuilder();
          result.matchInfoTeams_.Add(values);
          return this;
        }
        public Builder ClearMatchInfoTeams() {
          PrepareBuilder();
          result.matchInfoTeams_.Clear();
          return this;
        }
      }
      static TeamStats() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int PredictionsPctFieldNumber = 1;
  private bool hasPredictionsPct;
  private int predictionsPct_;
  public bool HasPredictionsPct {
    get { return hasPredictionsPct; }
  }
  public int PredictionsPct {
    get { return predictionsPct_; }
  }
  
  public const int DraftFieldNumber = 4;
  private bool hasDraft;
  private global::CDataGCCStrike15_v2_TournamentMatchDraft draft_;
  public bool HasDraft {
    get { return hasDraft; }
  }
  public global::CDataGCCStrike15_v2_TournamentMatchDraft Draft {
    get { return draft_ ?? global::CDataGCCStrike15_v2_TournamentMatchDraft.DefaultInstance; }
  }
  
  public const int StatsFieldNumber = 5;
  private pbc::PopsicleList<global::CPreMatchInfoData.Types.TeamStats> stats_ = new pbc::PopsicleList<global::CPreMatchInfoData.Types.TeamStats>();
  public scg::IList<global::CPreMatchInfoData.Types.TeamStats> StatsList {
    get { return stats_; }
  }
  public int StatsCount {
    get { return stats_.Count; }
  }
  public global::CPreMatchInfoData.Types.TeamStats GetStats(int index) {
    return stats_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cPreMatchInfoDataFieldNames;
    if (hasPredictionsPct) {
      output.WriteInt32(1, field_names[1], PredictionsPct);
    }
    if (hasDraft) {
      output.WriteMessage(4, field_names[0], Draft);
    }
    if (stats_.Count > 0) {
      output.WriteMessageArray(5, field_names[2], stats_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasPredictionsPct) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, PredictionsPct);
      }
      if (hasDraft) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Draft);
      }
      foreach (global::CPreMatchInfoData.Types.TeamStats element in StatsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CPreMatchInfoData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CPreMatchInfoData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CPreMatchInfoData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CPreMatchInfoData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CPreMatchInfoData MakeReadOnly() {
    stats_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CPreMatchInfoData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CPreMatchInfoData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CPreMatchInfoData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CPreMatchInfoData result;
    
    private CPreMatchInfoData PrepareBuilder() {
      if (resultIsReadOnly) {
        CPreMatchInfoData original = result;
        result = new CPreMatchInfoData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CPreMatchInfoData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CPreMatchInfoData.Descriptor; }
    }
    
    public override CPreMatchInfoData DefaultInstanceForType {
      get { return global::CPreMatchInfoData.DefaultInstance; }
    }
    
    public override CPreMatchInfoData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CPreMatchInfoData) {
        return MergeFrom((CPreMatchInfoData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CPreMatchInfoData other) {
      if (other == global::CPreMatchInfoData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasPredictionsPct) {
        PredictionsPct = other.PredictionsPct;
      }
      if (other.HasDraft) {
        MergeDraft(other.Draft);
      }
      if (other.stats_.Count != 0) {
        result.stats_.Add(other.stats_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cPreMatchInfoDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cPreMatchInfoDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasPredictionsPct = input.ReadInt32(ref result.predictionsPct_);
            break;
          }
          case 34: {
            global::CDataGCCStrike15_v2_TournamentMatchDraft.Builder subBuilder = global::CDataGCCStrike15_v2_TournamentMatchDraft.CreateBuilder();
            if (result.hasDraft) {
              subBuilder.MergeFrom(Draft);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Draft = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.stats_, global::CPreMatchInfoData.Types.TeamStats.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasPredictionsPct {
      get { return result.hasPredictionsPct; }
    }
    public int PredictionsPct {
      get { return result.PredictionsPct; }
      set { SetPredictionsPct(value); }
    }
    public Builder SetPredictionsPct(int value) {
      PrepareBuilder();
      result.hasPredictionsPct = true;
      result.predictionsPct_ = value;
      return this;
    }
    public Builder ClearPredictionsPct() {
      PrepareBuilder();
      result.hasPredictionsPct = false;
      result.predictionsPct_ = 0;
      return this;
    }
    
    public bool HasDraft {
     get { return result.hasDraft; }
    }
    public global::CDataGCCStrike15_v2_TournamentMatchDraft Draft {
      get { return result.Draft; }
      set { SetDraft(value); }
    }
    public Builder SetDraft(global::CDataGCCStrike15_v2_TournamentMatchDraft value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDraft = true;
      result.draft_ = value;
      return this;
    }
    public Builder SetDraft(global::CDataGCCStrike15_v2_TournamentMatchDraft.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasDraft = true;
      result.draft_ = builderForValue.Build();
      return this;
    }
    public Builder MergeDraft(global::CDataGCCStrike15_v2_TournamentMatchDraft value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasDraft &&
          result.draft_ != global::CDataGCCStrike15_v2_TournamentMatchDraft.DefaultInstance) {
          result.draft_ = global::CDataGCCStrike15_v2_TournamentMatchDraft.CreateBuilder(result.draft_).MergeFrom(value).BuildPartial();
      } else {
        result.draft_ = value;
      }
      result.hasDraft = true;
      return this;
    }
    public Builder ClearDraft() {
      PrepareBuilder();
      result.hasDraft = false;
      result.draft_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::CPreMatchInfoData.Types.TeamStats> StatsList {
      get { return PrepareBuilder().stats_; }
    }
    public int StatsCount {
      get { return result.StatsCount; }
    }
    public global::CPreMatchInfoData.Types.TeamStats GetStats(int index) {
      return result.GetStats(index);
    }
    public Builder SetStats(int index, global::CPreMatchInfoData.Types.TeamStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.stats_[index] = value;
      return this;
    }
    public Builder SetStats(int index, global::CPreMatchInfoData.Types.TeamStats.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.stats_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddStats(global::CPreMatchInfoData.Types.TeamStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.stats_.Add(value);
      return this;
    }
    public Builder AddStats(global::CPreMatchInfoData.Types.TeamStats.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.stats_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeStats(scg::IEnumerable<global::CPreMatchInfoData.Types.TeamStats> values) {
      PrepareBuilder();
      result.stats_.Add(values);
      return this;
    }
    public Builder ClearStats() {
      PrepareBuilder();
      result.stats_.Clear();
      return this;
    }
  }
  static CPreMatchInfoData() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ServerReserveFieldNames = new string[] { "account_ids", "encryption_key", "encryption_key_pub", "game_type", "match_id", "party_ids", "pre_match_data", "rankings", "server_version", "tournament_casters_account_ids", "tournament_event", "tournament_teams", "tv_master_steamid", "tv_relay_steamid", "whitelist" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ServerReserveFieldTags = new uint[] { 8, 48, 56, 16, 24, 64, 122, 42, 32, 104, 90, 98, 80, 112, 74 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve__FieldAccessorTable; }
  }
  
  public const int AccountIdsFieldNumber = 1;
  private pbc::PopsicleList<uint> accountIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AccountIdsList {
    get { return pbc::Lists.AsReadOnly(accountIds_); }
  }
  public int AccountIdsCount {
    get { return accountIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAccountIds(int index) {
    return accountIds_[index];
  }
  
  public const int GameTypeFieldNumber = 2;
  private bool hasGameType;
  private uint gameType_;
  public bool HasGameType {
    get { return hasGameType; }
  }
  [global::System.CLSCompliant(false)]
  public uint GameType {
    get { return gameType_; }
  }
  
  public const int MatchIdFieldNumber = 3;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public const int ServerVersionFieldNumber = 4;
  private bool hasServerVersion;
  private uint serverVersion_;
  public bool HasServerVersion {
    get { return hasServerVersion; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServerVersion {
    get { return serverVersion_; }
  }
  
  public const int RankingsFieldNumber = 5;
  private pbc::PopsicleList<global::PlayerRankingInfo> rankings_ = new pbc::PopsicleList<global::PlayerRankingInfo>();
  public scg::IList<global::PlayerRankingInfo> RankingsList {
    get { return rankings_; }
  }
  public int RankingsCount {
    get { return rankings_.Count; }
  }
  public global::PlayerRankingInfo GetRankings(int index) {
    return rankings_[index];
  }
  
  public const int EncryptionKeyFieldNumber = 6;
  private bool hasEncryptionKey;
  private ulong encryptionKey_;
  public bool HasEncryptionKey {
    get { return hasEncryptionKey; }
  }
  [global::System.CLSCompliant(false)]
  public ulong EncryptionKey {
    get { return encryptionKey_; }
  }
  
  public const int EncryptionKeyPubFieldNumber = 7;
  private bool hasEncryptionKeyPub;
  private ulong encryptionKeyPub_;
  public bool HasEncryptionKeyPub {
    get { return hasEncryptionKeyPub; }
  }
  [global::System.CLSCompliant(false)]
  public ulong EncryptionKeyPub {
    get { return encryptionKeyPub_; }
  }
  
  public const int PartyIdsFieldNumber = 8;
  private pbc::PopsicleList<uint> partyIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> PartyIdsList {
    get { return pbc::Lists.AsReadOnly(partyIds_); }
  }
  public int PartyIdsCount {
    get { return partyIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetPartyIds(int index) {
    return partyIds_[index];
  }
  
  public const int WhitelistFieldNumber = 9;
  private pbc::PopsicleList<global::IpAddressMask> whitelist_ = new pbc::PopsicleList<global::IpAddressMask>();
  public scg::IList<global::IpAddressMask> WhitelistList {
    get { return whitelist_; }
  }
  public int WhitelistCount {
    get { return whitelist_.Count; }
  }
  public global::IpAddressMask GetWhitelist(int index) {
    return whitelist_[index];
  }
  
  public const int TvMasterSteamidFieldNumber = 10;
  private bool hasTvMasterSteamid;
  private ulong tvMasterSteamid_;
  public bool HasTvMasterSteamid {
    get { return hasTvMasterSteamid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong TvMasterSteamid {
    get { return tvMasterSteamid_; }
  }
  
  public const int TournamentEventFieldNumber = 11;
  private bool hasTournamentEvent;
  private global::TournamentEvent tournamentEvent_;
  public bool HasTournamentEvent {
    get { return hasTournamentEvent; }
  }
  public global::TournamentEvent TournamentEvent {
    get { return tournamentEvent_ ?? global::TournamentEvent.DefaultInstance; }
  }
  
  public const int TournamentTeamsFieldNumber = 12;
  private pbc::PopsicleList<global::TournamentTeam> tournamentTeams_ = new pbc::PopsicleList<global::TournamentTeam>();
  public scg::IList<global::TournamentTeam> TournamentTeamsList {
    get { return tournamentTeams_; }
  }
  public int TournamentTeamsCount {
    get { return tournamentTeams_.Count; }
  }
  public global::TournamentTeam GetTournamentTeams(int index) {
    return tournamentTeams_[index];
  }
  
  public const int TournamentCastersAccountIdsFieldNumber = 13;
  private pbc::PopsicleList<uint> tournamentCastersAccountIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> TournamentCastersAccountIdsList {
    get { return pbc::Lists.AsReadOnly(tournamentCastersAccountIds_); }
  }
  public int TournamentCastersAccountIdsCount {
    get { return tournamentCastersAccountIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetTournamentCastersAccountIds(int index) {
    return tournamentCastersAccountIds_[index];
  }
  
  public const int TvRelaySteamidFieldNumber = 14;
  private bool hasTvRelaySteamid;
  private ulong tvRelaySteamid_;
  public bool HasTvRelaySteamid {
    get { return hasTvRelaySteamid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong TvRelaySteamid {
    get { return tvRelaySteamid_; }
  }
  
  public const int PreMatchDataFieldNumber = 15;
  private bool hasPreMatchData;
  private global::CPreMatchInfoData preMatchData_;
  public bool HasPreMatchData {
    get { return hasPreMatchData; }
  }
  public global::CPreMatchInfoData PreMatchData {
    get { return preMatchData_ ?? global::CPreMatchInfoData.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ServerReserveFieldNames;
    if (accountIds_.Count > 0) {
      output.WriteUInt32Array(1, field_names[0], accountIds_);
    }
    if (hasGameType) {
      output.WriteUInt32(2, field_names[3], GameType);
    }
    if (hasMatchId) {
      output.WriteUInt64(3, field_names[4], MatchId);
    }
    if (hasServerVersion) {
      output.WriteUInt32(4, field_names[8], ServerVersion);
    }
    if (rankings_.Count > 0) {
      output.WriteMessageArray(5, field_names[7], rankings_);
    }
    if (hasEncryptionKey) {
      output.WriteUInt64(6, field_names[1], EncryptionKey);
    }
    if (hasEncryptionKeyPub) {
      output.WriteUInt64(7, field_names[2], EncryptionKeyPub);
    }
    if (partyIds_.Count > 0) {
      output.WriteUInt32Array(8, field_names[5], partyIds_);
    }
    if (whitelist_.Count > 0) {
      output.WriteMessageArray(9, field_names[14], whitelist_);
    }
    if (hasTvMasterSteamid) {
      output.WriteUInt64(10, field_names[12], TvMasterSteamid);
    }
    if (hasTournamentEvent) {
      output.WriteMessage(11, field_names[10], TournamentEvent);
    }
    if (tournamentTeams_.Count > 0) {
      output.WriteMessageArray(12, field_names[11], tournamentTeams_);
    }
    if (tournamentCastersAccountIds_.Count > 0) {
      output.WriteUInt32Array(13, field_names[9], tournamentCastersAccountIds_);
    }
    if (hasTvRelaySteamid) {
      output.WriteUInt64(14, field_names[13], TvRelaySteamid);
    }
    if (hasPreMatchData) {
      output.WriteMessage(15, field_names[6], PreMatchData);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      {
        int dataSize = 0;
        foreach (uint element in AccountIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * accountIds_.Count;
      }
      if (hasGameType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, GameType);
      }
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, MatchId);
      }
      if (hasServerVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ServerVersion);
      }
      foreach (global::PlayerRankingInfo element in RankingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      if (hasEncryptionKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, EncryptionKey);
      }
      if (hasEncryptionKeyPub) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, EncryptionKeyPub);
      }
      {
        int dataSize = 0;
        foreach (uint element in PartyIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * partyIds_.Count;
      }
      foreach (global::IpAddressMask element in WhitelistList) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, element);
      }
      if (hasTvMasterSteamid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(10, TvMasterSteamid);
      }
      if (hasTournamentEvent) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, TournamentEvent);
      }
      foreach (global::TournamentTeam element in TournamentTeamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, element);
      }
      {
        int dataSize = 0;
        foreach (uint element in TournamentCastersAccountIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * tournamentCastersAccountIds_.Count;
      }
      if (hasTvRelaySteamid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(14, TvRelaySteamid);
      }
      if (hasPreMatchData) {
        size += pb::CodedOutputStream.ComputeMessageSize(15, PreMatchData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve MakeReadOnly() {
    accountIds_.MakeReadOnly();
    rankings_.MakeReadOnly();
    partyIds_.MakeReadOnly();
    whitelist_.MakeReadOnly();
    tournamentTeams_.MakeReadOnly();
    tournamentCastersAccountIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance) return this;
      PrepareBuilder();
      if (other.accountIds_.Count != 0) {
        result.accountIds_.Add(other.accountIds_);
      }
      if (other.HasGameType) {
        GameType = other.GameType;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.rankings_.Count != 0) {
        result.rankings_.Add(other.rankings_);
      }
      if (other.HasEncryptionKey) {
        EncryptionKey = other.EncryptionKey;
      }
      if (other.HasEncryptionKeyPub) {
        EncryptionKeyPub = other.EncryptionKeyPub;
      }
      if (other.partyIds_.Count != 0) {
        result.partyIds_.Add(other.partyIds_);
      }
      if (other.whitelist_.Count != 0) {
        result.whitelist_.Add(other.whitelist_);
      }
      if (other.HasTvMasterSteamid) {
        TvMasterSteamid = other.TvMasterSteamid;
      }
      if (other.HasTournamentEvent) {
        MergeTournamentEvent(other.TournamentEvent);
      }
      if (other.tournamentTeams_.Count != 0) {
        result.tournamentTeams_.Add(other.tournamentTeams_);
      }
      if (other.tournamentCastersAccountIds_.Count != 0) {
        result.tournamentCastersAccountIds_.Add(other.tournamentCastersAccountIds_);
      }
      if (other.HasTvRelaySteamid) {
        TvRelaySteamid = other.TvRelaySteamid;
      }
      if (other.HasPreMatchData) {
        MergePreMatchData(other.PreMatchData);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ServerReserveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ServerReserveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10:
          case 8: {
            input.ReadUInt32Array(tag, field_name, result.accountIds_);
            break;
          }
          case 16: {
            result.hasGameType = input.ReadUInt32(ref result.gameType_);
            break;
          }
          case 24: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
          case 32: {
            result.hasServerVersion = input.ReadUInt32(ref result.serverVersion_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.rankings_, global::PlayerRankingInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 48: {
            result.hasEncryptionKey = input.ReadUInt64(ref result.encryptionKey_);
            break;
          }
          case 56: {
            result.hasEncryptionKeyPub = input.ReadUInt64(ref result.encryptionKeyPub_);
            break;
          }
          case 66:
          case 64: {
            input.ReadUInt32Array(tag, field_name, result.partyIds_);
            break;
          }
          case 74: {
            input.ReadMessageArray(tag, field_name, result.whitelist_, global::IpAddressMask.DefaultInstance, extensionRegistry);
            break;
          }
          case 80: {
            result.hasTvMasterSteamid = input.ReadUInt64(ref result.tvMasterSteamid_);
            break;
          }
          case 90: {
            global::TournamentEvent.Builder subBuilder = global::TournamentEvent.CreateBuilder();
            if (result.hasTournamentEvent) {
              subBuilder.MergeFrom(TournamentEvent);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TournamentEvent = subBuilder.BuildPartial();
            break;
          }
          case 98: {
            input.ReadMessageArray(tag, field_name, result.tournamentTeams_, global::TournamentTeam.DefaultInstance, extensionRegistry);
            break;
          }
          case 106:
          case 104: {
            input.ReadUInt32Array(tag, field_name, result.tournamentCastersAccountIds_);
            break;
          }
          case 112: {
            result.hasTvRelaySteamid = input.ReadUInt64(ref result.tvRelaySteamid_);
            break;
          }
          case 122: {
            global::CPreMatchInfoData.Builder subBuilder = global::CPreMatchInfoData.CreateBuilder();
            if (result.hasPreMatchData) {
              subBuilder.MergeFrom(PreMatchData);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            PreMatchData = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AccountIdsList {
      get { return PrepareBuilder().accountIds_; }
    }
    public int AccountIdsCount {
      get { return result.AccountIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAccountIds(int index) {
      return result.GetAccountIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountIds(int index, uint value) {
      PrepareBuilder();
      result.accountIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAccountIds(uint value) {
      PrepareBuilder();
      result.accountIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAccountIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.accountIds_.Add(values);
      return this;
    }
    public Builder ClearAccountIds() {
      PrepareBuilder();
      result.accountIds_.Clear();
      return this;
    }
    
    public bool HasGameType {
      get { return result.hasGameType; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameType {
      get { return result.GameType; }
      set { SetGameType(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGameType(uint value) {
      PrepareBuilder();
      result.hasGameType = true;
      result.gameType_ = value;
      return this;
    }
    public Builder ClearGameType() {
      PrepareBuilder();
      result.hasGameType = false;
      result.gameType_ = 0;
      return this;
    }
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
    
    public bool HasServerVersion {
      get { return result.hasServerVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerVersion {
      get { return result.ServerVersion; }
      set { SetServerVersion(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerVersion(uint value) {
      PrepareBuilder();
      result.hasServerVersion = true;
      result.serverVersion_ = value;
      return this;
    }
    public Builder ClearServerVersion() {
      PrepareBuilder();
      result.hasServerVersion = false;
      result.serverVersion_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::PlayerRankingInfo> RankingsList {
      get { return PrepareBuilder().rankings_; }
    }
    public int RankingsCount {
      get { return result.RankingsCount; }
    }
    public global::PlayerRankingInfo GetRankings(int index) {
      return result.GetRankings(index);
    }
    public Builder SetRankings(int index, global::PlayerRankingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rankings_[index] = value;
      return this;
    }
    public Builder SetRankings(int index, global::PlayerRankingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rankings_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRankings(global::PlayerRankingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rankings_.Add(value);
      return this;
    }
    public Builder AddRankings(global::PlayerRankingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rankings_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRankings(scg::IEnumerable<global::PlayerRankingInfo> values) {
      PrepareBuilder();
      result.rankings_.Add(values);
      return this;
    }
    public Builder ClearRankings() {
      PrepareBuilder();
      result.rankings_.Clear();
      return this;
    }
    
    public bool HasEncryptionKey {
      get { return result.hasEncryptionKey; }
    }
    [global::System.CLSCompliant(false)]
    public ulong EncryptionKey {
      get { return result.EncryptionKey; }
      set { SetEncryptionKey(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetEncryptionKey(ulong value) {
      PrepareBuilder();
      result.hasEncryptionKey = true;
      result.encryptionKey_ = value;
      return this;
    }
    public Builder ClearEncryptionKey() {
      PrepareBuilder();
      result.hasEncryptionKey = false;
      result.encryptionKey_ = 0UL;
      return this;
    }
    
    public bool HasEncryptionKeyPub {
      get { return result.hasEncryptionKeyPub; }
    }
    [global::System.CLSCompliant(false)]
    public ulong EncryptionKeyPub {
      get { return result.EncryptionKeyPub; }
      set { SetEncryptionKeyPub(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetEncryptionKeyPub(ulong value) {
      PrepareBuilder();
      result.hasEncryptionKeyPub = true;
      result.encryptionKeyPub_ = value;
      return this;
    }
    public Builder ClearEncryptionKeyPub() {
      PrepareBuilder();
      result.hasEncryptionKeyPub = false;
      result.encryptionKeyPub_ = 0UL;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> PartyIdsList {
      get { return PrepareBuilder().partyIds_; }
    }
    public int PartyIdsCount {
      get { return result.PartyIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetPartyIds(int index) {
      return result.GetPartyIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPartyIds(int index, uint value) {
      PrepareBuilder();
      result.partyIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddPartyIds(uint value) {
      PrepareBuilder();
      result.partyIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangePartyIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.partyIds_.Add(values);
      return this;
    }
    public Builder ClearPartyIds() {
      PrepareBuilder();
      result.partyIds_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::IpAddressMask> WhitelistList {
      get { return PrepareBuilder().whitelist_; }
    }
    public int WhitelistCount {
      get { return result.WhitelistCount; }
    }
    public global::IpAddressMask GetWhitelist(int index) {
      return result.GetWhitelist(index);
    }
    public Builder SetWhitelist(int index, global::IpAddressMask value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.whitelist_[index] = value;
      return this;
    }
    public Builder SetWhitelist(int index, global::IpAddressMask.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.whitelist_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddWhitelist(global::IpAddressMask value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.whitelist_.Add(value);
      return this;
    }
    public Builder AddWhitelist(global::IpAddressMask.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.whitelist_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeWhitelist(scg::IEnumerable<global::IpAddressMask> values) {
      PrepareBuilder();
      result.whitelist_.Add(values);
      return this;
    }
    public Builder ClearWhitelist() {
      PrepareBuilder();
      result.whitelist_.Clear();
      return this;
    }
    
    public bool HasTvMasterSteamid {
      get { return result.hasTvMasterSteamid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TvMasterSteamid {
      get { return result.TvMasterSteamid; }
      set { SetTvMasterSteamid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvMasterSteamid(ulong value) {
      PrepareBuilder();
      result.hasTvMasterSteamid = true;
      result.tvMasterSteamid_ = value;
      return this;
    }
    public Builder ClearTvMasterSteamid() {
      PrepareBuilder();
      result.hasTvMasterSteamid = false;
      result.tvMasterSteamid_ = 0UL;
      return this;
    }
    
    public bool HasTournamentEvent {
     get { return result.hasTournamentEvent; }
    }
    public global::TournamentEvent TournamentEvent {
      get { return result.TournamentEvent; }
      set { SetTournamentEvent(value); }
    }
    public Builder SetTournamentEvent(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTournamentEvent = true;
      result.tournamentEvent_ = value;
      return this;
    }
    public Builder SetTournamentEvent(global::TournamentEvent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTournamentEvent = true;
      result.tournamentEvent_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTournamentEvent(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTournamentEvent &&
          result.tournamentEvent_ != global::TournamentEvent.DefaultInstance) {
          result.tournamentEvent_ = global::TournamentEvent.CreateBuilder(result.tournamentEvent_).MergeFrom(value).BuildPartial();
      } else {
        result.tournamentEvent_ = value;
      }
      result.hasTournamentEvent = true;
      return this;
    }
    public Builder ClearTournamentEvent() {
      PrepareBuilder();
      result.hasTournamentEvent = false;
      result.tournamentEvent_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::TournamentTeam> TournamentTeamsList {
      get { return PrepareBuilder().tournamentTeams_; }
    }
    public int TournamentTeamsCount {
      get { return result.TournamentTeamsCount; }
    }
    public global::TournamentTeam GetTournamentTeams(int index) {
      return result.GetTournamentTeams(index);
    }
    public Builder SetTournamentTeams(int index, global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tournamentTeams_[index] = value;
      return this;
    }
    public Builder SetTournamentTeams(int index, global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tournamentTeams_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTournamentTeams(global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tournamentTeams_.Add(value);
      return this;
    }
    public Builder AddTournamentTeams(global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tournamentTeams_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTournamentTeams(scg::IEnumerable<global::TournamentTeam> values) {
      PrepareBuilder();
      result.tournamentTeams_.Add(values);
      return this;
    }
    public Builder ClearTournamentTeams() {
      PrepareBuilder();
      result.tournamentTeams_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> TournamentCastersAccountIdsList {
      get { return PrepareBuilder().tournamentCastersAccountIds_; }
    }
    public int TournamentCastersAccountIdsCount {
      get { return result.TournamentCastersAccountIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetTournamentCastersAccountIds(int index) {
      return result.GetTournamentCastersAccountIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTournamentCastersAccountIds(int index, uint value) {
      PrepareBuilder();
      result.tournamentCastersAccountIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddTournamentCastersAccountIds(uint value) {
      PrepareBuilder();
      result.tournamentCastersAccountIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeTournamentCastersAccountIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.tournamentCastersAccountIds_.Add(values);
      return this;
    }
    public Builder ClearTournamentCastersAccountIds() {
      PrepareBuilder();
      result.tournamentCastersAccountIds_.Clear();
      return this;
    }
    
    public bool HasTvRelaySteamid {
      get { return result.hasTvRelaySteamid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong TvRelaySteamid {
      get { return result.TvRelaySteamid; }
      set { SetTvRelaySteamid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvRelaySteamid(ulong value) {
      PrepareBuilder();
      result.hasTvRelaySteamid = true;
      result.tvRelaySteamid_ = value;
      return this;
    }
    public Builder ClearTvRelaySteamid() {
      PrepareBuilder();
      result.hasTvRelaySteamid = false;
      result.tvRelaySteamid_ = 0UL;
      return this;
    }
    
    public bool HasPreMatchData {
     get { return result.hasPreMatchData; }
    }
    public global::CPreMatchInfoData PreMatchData {
      get { return result.PreMatchData; }
      set { SetPreMatchData(value); }
    }
    public Builder SetPreMatchData(global::CPreMatchInfoData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPreMatchData = true;
      result.preMatchData_ = value;
      return this;
    }
    public Builder SetPreMatchData(global::CPreMatchInfoData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasPreMatchData = true;
      result.preMatchData_ = builderForValue.Build();
      return this;
    }
    public Builder MergePreMatchData(global::CPreMatchInfoData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasPreMatchData &&
          result.preMatchData_ != global::CPreMatchInfoData.DefaultInstance) {
          result.preMatchData_ = global::CPreMatchInfoData.CreateBuilder(result.preMatchData_).MergeFrom(value).BuildPartial();
      } else {
        result.preMatchData_ = value;
      }
      result.hasPreMatchData = true;
      return this;
    }
    public Builder ClearPreMatchData() {
      PrepareBuilder();
      result.hasPreMatchData = false;
      result.preMatchData_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingServerReservationResponse : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingServerReservationResponse defaultInstance = new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingServerReservationResponseFieldNames = new string[] { "gc_reservation_sent", "idle_player_accounts", "map", "reservation", "reservationid", "reward_drop_list", "reward_item_attr_def_idx", "reward_item_attr_reward_idx", "reward_item_attr_value", "reward_player_accounts", "server_version", "tournament_tag", "tv_info" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingServerReservationResponseFieldTags = new uint[] { 32, 64, 26, 18, 8, 96, 72, 88, 80, 56, 40, 106, 50 };
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingServerReservationResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServerReservationResponse__FieldAccessorTable; }
  }
  
  public const int ReservationidFieldNumber = 1;
  private bool hasReservationid;
  private ulong reservationid_;
  public bool HasReservationid {
    get { return hasReservationid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Reservationid {
    get { return reservationid_; }
  }
  
  public const int ReservationFieldNumber = 2;
  private bool hasReservation;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation_;
  public bool HasReservation {
    get { return hasReservation; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
    get { return reservation_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance; }
  }
  
  public const int MapFieldNumber = 3;
  private bool hasMap;
  private string map_ = "";
  public bool HasMap {
    get { return hasMap; }
  }
  public string Map {
    get { return map_; }
  }
  
  public const int GcReservationSentFieldNumber = 4;
  private bool hasGcReservationSent;
  private ulong gcReservationSent_;
  public bool HasGcReservationSent {
    get { return hasGcReservationSent; }
  }
  [global::System.CLSCompliant(false)]
  public ulong GcReservationSent {
    get { return gcReservationSent_; }
  }
  
  public const int ServerVersionFieldNumber = 5;
  private bool hasServerVersion;
  private uint serverVersion_;
  public bool HasServerVersion {
    get { return hasServerVersion; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServerVersion {
    get { return serverVersion_; }
  }
  
  public const int TvInfoFieldNumber = 6;
  private bool hasTvInfo;
  private global::ServerHltvInfo tvInfo_;
  public bool HasTvInfo {
    get { return hasTvInfo; }
  }
  public global::ServerHltvInfo TvInfo {
    get { return tvInfo_ ?? global::ServerHltvInfo.DefaultInstance; }
  }
  
  public const int RewardPlayerAccountsFieldNumber = 7;
  private pbc::PopsicleList<uint> rewardPlayerAccounts_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> RewardPlayerAccountsList {
    get { return pbc::Lists.AsReadOnly(rewardPlayerAccounts_); }
  }
  public int RewardPlayerAccountsCount {
    get { return rewardPlayerAccounts_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetRewardPlayerAccounts(int index) {
    return rewardPlayerAccounts_[index];
  }
  
  public const int IdlePlayerAccountsFieldNumber = 8;
  private pbc::PopsicleList<uint> idlePlayerAccounts_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> IdlePlayerAccountsList {
    get { return pbc::Lists.AsReadOnly(idlePlayerAccounts_); }
  }
  public int IdlePlayerAccountsCount {
    get { return idlePlayerAccounts_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetIdlePlayerAccounts(int index) {
    return idlePlayerAccounts_[index];
  }
  
  public const int RewardItemAttrDefIdxFieldNumber = 9;
  private bool hasRewardItemAttrDefIdx;
  private uint rewardItemAttrDefIdx_;
  public bool HasRewardItemAttrDefIdx {
    get { return hasRewardItemAttrDefIdx; }
  }
  [global::System.CLSCompliant(false)]
  public uint RewardItemAttrDefIdx {
    get { return rewardItemAttrDefIdx_; }
  }
  
  public const int RewardItemAttrValueFieldNumber = 10;
  private bool hasRewardItemAttrValue;
  private uint rewardItemAttrValue_;
  public bool HasRewardItemAttrValue {
    get { return hasRewardItemAttrValue; }
  }
  [global::System.CLSCompliant(false)]
  public uint RewardItemAttrValue {
    get { return rewardItemAttrValue_; }
  }
  
  public const int RewardItemAttrRewardIdxFieldNumber = 11;
  private bool hasRewardItemAttrRewardIdx;
  private uint rewardItemAttrRewardIdx_;
  public bool HasRewardItemAttrRewardIdx {
    get { return hasRewardItemAttrRewardIdx; }
  }
  [global::System.CLSCompliant(false)]
  public uint RewardItemAttrRewardIdx {
    get { return rewardItemAttrRewardIdx_; }
  }
  
  public const int RewardDropListFieldNumber = 12;
  private bool hasRewardDropList;
  private uint rewardDropList_;
  public bool HasRewardDropList {
    get { return hasRewardDropList; }
  }
  [global::System.CLSCompliant(false)]
  public uint RewardDropList {
    get { return rewardDropList_; }
  }
  
  public const int TournamentTagFieldNumber = 13;
  private bool hasTournamentTag;
  private string tournamentTag_ = "";
  public bool HasTournamentTag {
    get { return hasTournamentTag; }
  }
  public string TournamentTag {
    get { return tournamentTag_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingServerReservationResponseFieldNames;
    if (hasReservationid) {
      output.WriteUInt64(1, field_names[4], Reservationid);
    }
    if (hasReservation) {
      output.WriteMessage(2, field_names[3], Reservation);
    }
    if (hasMap) {
      output.WriteString(3, field_names[2], Map);
    }
    if (hasGcReservationSent) {
      output.WriteUInt64(4, field_names[0], GcReservationSent);
    }
    if (hasServerVersion) {
      output.WriteUInt32(5, field_names[10], ServerVersion);
    }
    if (hasTvInfo) {
      output.WriteMessage(6, field_names[12], TvInfo);
    }
    if (rewardPlayerAccounts_.Count > 0) {
      output.WriteUInt32Array(7, field_names[9], rewardPlayerAccounts_);
    }
    if (idlePlayerAccounts_.Count > 0) {
      output.WriteUInt32Array(8, field_names[1], idlePlayerAccounts_);
    }
    if (hasRewardItemAttrDefIdx) {
      output.WriteUInt32(9, field_names[6], RewardItemAttrDefIdx);
    }
    if (hasRewardItemAttrValue) {
      output.WriteUInt32(10, field_names[8], RewardItemAttrValue);
    }
    if (hasRewardItemAttrRewardIdx) {
      output.WriteUInt32(11, field_names[7], RewardItemAttrRewardIdx);
    }
    if (hasRewardDropList) {
      output.WriteUInt32(12, field_names[5], RewardDropList);
    }
    if (hasTournamentTag) {
      output.WriteString(13, field_names[11], TournamentTag);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReservationid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Reservationid);
      }
      if (hasReservation) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Reservation);
      }
      if (hasMap) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Map);
      }
      if (hasGcReservationSent) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, GcReservationSent);
      }
      if (hasServerVersion) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ServerVersion);
      }
      if (hasTvInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, TvInfo);
      }
      {
        int dataSize = 0;
        foreach (uint element in RewardPlayerAccountsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * rewardPlayerAccounts_.Count;
      }
      {
        int dataSize = 0;
        foreach (uint element in IdlePlayerAccountsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * idlePlayerAccounts_.Count;
      }
      if (hasRewardItemAttrDefIdx) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, RewardItemAttrDefIdx);
      }
      if (hasRewardItemAttrValue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, RewardItemAttrValue);
      }
      if (hasRewardItemAttrRewardIdx) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, RewardItemAttrRewardIdx);
      }
      if (hasRewardDropList) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, RewardDropList);
      }
      if (hasTournamentTag) {
        size += pb::CodedOutputStream.ComputeStringSize(13, TournamentTag);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingServerReservationResponse MakeReadOnly() {
    rewardPlayerAccounts_.MakeReadOnly();
    idlePlayerAccounts_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingServerReservationResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingServerReservationResponse result;
    
    private CMsgGCCStrike15_v2_MatchmakingServerReservationResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingServerReservationResponse original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingServerReservationResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingServerReservationResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServerReservationResponse DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServerReservationResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingServerReservationResponse) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingServerReservationResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingServerReservationResponse other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasReservationid) {
        Reservationid = other.Reservationid;
      }
      if (other.HasReservation) {
        MergeReservation(other.Reservation);
      }
      if (other.HasMap) {
        Map = other.Map;
      }
      if (other.HasGcReservationSent) {
        GcReservationSent = other.GcReservationSent;
      }
      if (other.HasServerVersion) {
        ServerVersion = other.ServerVersion;
      }
      if (other.HasTvInfo) {
        MergeTvInfo(other.TvInfo);
      }
      if (other.rewardPlayerAccounts_.Count != 0) {
        result.rewardPlayerAccounts_.Add(other.rewardPlayerAccounts_);
      }
      if (other.idlePlayerAccounts_.Count != 0) {
        result.idlePlayerAccounts_.Add(other.idlePlayerAccounts_);
      }
      if (other.HasRewardItemAttrDefIdx) {
        RewardItemAttrDefIdx = other.RewardItemAttrDefIdx;
      }
      if (other.HasRewardItemAttrValue) {
        RewardItemAttrValue = other.RewardItemAttrValue;
      }
      if (other.HasRewardItemAttrRewardIdx) {
        RewardItemAttrRewardIdx = other.RewardItemAttrRewardIdx;
      }
      if (other.HasRewardDropList) {
        RewardDropList = other.RewardDropList;
      }
      if (other.HasTournamentTag) {
        TournamentTag = other.TournamentTag;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingServerReservationResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingServerReservationResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasReservationid = input.ReadUInt64(ref result.reservationid_);
            break;
          }
          case 18: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder();
            if (result.hasReservation) {
              subBuilder.MergeFrom(Reservation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Reservation = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            result.hasMap = input.ReadString(ref result.map_);
            break;
          }
          case 32: {
            result.hasGcReservationSent = input.ReadUInt64(ref result.gcReservationSent_);
            break;
          }
          case 40: {
            result.hasServerVersion = input.ReadUInt32(ref result.serverVersion_);
            break;
          }
          case 50: {
            global::ServerHltvInfo.Builder subBuilder = global::ServerHltvInfo.CreateBuilder();
            if (result.hasTvInfo) {
              subBuilder.MergeFrom(TvInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TvInfo = subBuilder.BuildPartial();
            break;
          }
          case 58:
          case 56: {
            input.ReadUInt32Array(tag, field_name, result.rewardPlayerAccounts_);
            break;
          }
          case 66:
          case 64: {
            input.ReadUInt32Array(tag, field_name, result.idlePlayerAccounts_);
            break;
          }
          case 72: {
            result.hasRewardItemAttrDefIdx = input.ReadUInt32(ref result.rewardItemAttrDefIdx_);
            break;
          }
          case 80: {
            result.hasRewardItemAttrValue = input.ReadUInt32(ref result.rewardItemAttrValue_);
            break;
          }
          case 88: {
            result.hasRewardItemAttrRewardIdx = input.ReadUInt32(ref result.rewardItemAttrRewardIdx_);
            break;
          }
          case 96: {
            result.hasRewardDropList = input.ReadUInt32(ref result.rewardDropList_);
            break;
          }
          case 106: {
            result.hasTournamentTag = input.ReadString(ref result.tournamentTag_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasReservationid {
      get { return result.hasReservationid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Reservationid {
      get { return result.Reservationid; }
      set { SetReservationid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReservationid(ulong value) {
      PrepareBuilder();
      result.hasReservationid = true;
      result.reservationid_ = value;
      return this;
    }
    public Builder ClearReservationid() {
      PrepareBuilder();
      result.hasReservationid = false;
      result.reservationid_ = 0UL;
      return this;
    }
    
    public bool HasReservation {
     get { return result.hasReservation; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
      get { return result.Reservation; }
      set { SetReservation(value); }
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = value;
      return this;
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReservation &&
          result.reservation_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance) {
          result.reservation_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder(result.reservation_).MergeFrom(value).BuildPartial();
      } else {
        result.reservation_ = value;
      }
      result.hasReservation = true;
      return this;
    }
    public Builder ClearReservation() {
      PrepareBuilder();
      result.hasReservation = false;
      result.reservation_ = null;
      return this;
    }
    
    public bool HasMap {
      get { return result.hasMap; }
    }
    public string Map {
      get { return result.Map; }
      set { SetMap(value); }
    }
    public Builder SetMap(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMap = true;
      result.map_ = value;
      return this;
    }
    public Builder ClearMap() {
      PrepareBuilder();
      result.hasMap = false;
      result.map_ = "";
      return this;
    }
    
    public bool HasGcReservationSent {
      get { return result.hasGcReservationSent; }
    }
    [global::System.CLSCompliant(false)]
    public ulong GcReservationSent {
      get { return result.GcReservationSent; }
      set { SetGcReservationSent(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGcReservationSent(ulong value) {
      PrepareBuilder();
      result.hasGcReservationSent = true;
      result.gcReservationSent_ = value;
      return this;
    }
    public Builder ClearGcReservationSent() {
      PrepareBuilder();
      result.hasGcReservationSent = false;
      result.gcReservationSent_ = 0UL;
      return this;
    }
    
    public bool HasServerVersion {
      get { return result.hasServerVersion; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerVersion {
      get { return result.ServerVersion; }
      set { SetServerVersion(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerVersion(uint value) {
      PrepareBuilder();
      result.hasServerVersion = true;
      result.serverVersion_ = value;
      return this;
    }
    public Builder ClearServerVersion() {
      PrepareBuilder();
      result.hasServerVersion = false;
      result.serverVersion_ = 0;
      return this;
    }
    
    public bool HasTvInfo {
     get { return result.hasTvInfo; }
    }
    public global::ServerHltvInfo TvInfo {
      get { return result.TvInfo; }
      set { SetTvInfo(value); }
    }
    public Builder SetTvInfo(global::ServerHltvInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTvInfo = true;
      result.tvInfo_ = value;
      return this;
    }
    public Builder SetTvInfo(global::ServerHltvInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTvInfo = true;
      result.tvInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTvInfo(global::ServerHltvInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTvInfo &&
          result.tvInfo_ != global::ServerHltvInfo.DefaultInstance) {
          result.tvInfo_ = global::ServerHltvInfo.CreateBuilder(result.tvInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.tvInfo_ = value;
      }
      result.hasTvInfo = true;
      return this;
    }
    public Builder ClearTvInfo() {
      PrepareBuilder();
      result.hasTvInfo = false;
      result.tvInfo_ = null;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> RewardPlayerAccountsList {
      get { return PrepareBuilder().rewardPlayerAccounts_; }
    }
    public int RewardPlayerAccountsCount {
      get { return result.RewardPlayerAccountsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetRewardPlayerAccounts(int index) {
      return result.GetRewardPlayerAccounts(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRewardPlayerAccounts(int index, uint value) {
      PrepareBuilder();
      result.rewardPlayerAccounts_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRewardPlayerAccounts(uint value) {
      PrepareBuilder();
      result.rewardPlayerAccounts_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeRewardPlayerAccounts(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.rewardPlayerAccounts_.Add(values);
      return this;
    }
    public Builder ClearRewardPlayerAccounts() {
      PrepareBuilder();
      result.rewardPlayerAccounts_.Clear();
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> IdlePlayerAccountsList {
      get { return PrepareBuilder().idlePlayerAccounts_; }
    }
    public int IdlePlayerAccountsCount {
      get { return result.IdlePlayerAccountsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetIdlePlayerAccounts(int index) {
      return result.GetIdlePlayerAccounts(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetIdlePlayerAccounts(int index, uint value) {
      PrepareBuilder();
      result.idlePlayerAccounts_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddIdlePlayerAccounts(uint value) {
      PrepareBuilder();
      result.idlePlayerAccounts_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeIdlePlayerAccounts(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.idlePlayerAccounts_.Add(values);
      return this;
    }
    public Builder ClearIdlePlayerAccounts() {
      PrepareBuilder();
      result.idlePlayerAccounts_.Clear();
      return this;
    }
    
    public bool HasRewardItemAttrDefIdx {
      get { return result.hasRewardItemAttrDefIdx; }
    }
    [global::System.CLSCompliant(false)]
    public uint RewardItemAttrDefIdx {
      get { return result.RewardItemAttrDefIdx; }
      set { SetRewardItemAttrDefIdx(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRewardItemAttrDefIdx(uint value) {
      PrepareBuilder();
      result.hasRewardItemAttrDefIdx = true;
      result.rewardItemAttrDefIdx_ = value;
      return this;
    }
    public Builder ClearRewardItemAttrDefIdx() {
      PrepareBuilder();
      result.hasRewardItemAttrDefIdx = false;
      result.rewardItemAttrDefIdx_ = 0;
      return this;
    }
    
    public bool HasRewardItemAttrValue {
      get { return result.hasRewardItemAttrValue; }
    }
    [global::System.CLSCompliant(false)]
    public uint RewardItemAttrValue {
      get { return result.RewardItemAttrValue; }
      set { SetRewardItemAttrValue(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRewardItemAttrValue(uint value) {
      PrepareBuilder();
      result.hasRewardItemAttrValue = true;
      result.rewardItemAttrValue_ = value;
      return this;
    }
    public Builder ClearRewardItemAttrValue() {
      PrepareBuilder();
      result.hasRewardItemAttrValue = false;
      result.rewardItemAttrValue_ = 0;
      return this;
    }
    
    public bool HasRewardItemAttrRewardIdx {
      get { return result.hasRewardItemAttrRewardIdx; }
    }
    [global::System.CLSCompliant(false)]
    public uint RewardItemAttrRewardIdx {
      get { return result.RewardItemAttrRewardIdx; }
      set { SetRewardItemAttrRewardIdx(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRewardItemAttrRewardIdx(uint value) {
      PrepareBuilder();
      result.hasRewardItemAttrRewardIdx = true;
      result.rewardItemAttrRewardIdx_ = value;
      return this;
    }
    public Builder ClearRewardItemAttrRewardIdx() {
      PrepareBuilder();
      result.hasRewardItemAttrRewardIdx = false;
      result.rewardItemAttrRewardIdx_ = 0;
      return this;
    }
    
    public bool HasRewardDropList {
      get { return result.hasRewardDropList; }
    }
    [global::System.CLSCompliant(false)]
    public uint RewardDropList {
      get { return result.RewardDropList; }
      set { SetRewardDropList(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRewardDropList(uint value) {
      PrepareBuilder();
      result.hasRewardDropList = true;
      result.rewardDropList_ = value;
      return this;
    }
    public Builder ClearRewardDropList() {
      PrepareBuilder();
      result.hasRewardDropList = false;
      result.rewardDropList_ = 0;
      return this;
    }
    
    public bool HasTournamentTag {
      get { return result.hasTournamentTag; }
    }
    public string TournamentTag {
      get { return result.TournamentTag; }
      set { SetTournamentTag(value); }
    }
    public Builder SetTournamentTag(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTournamentTag = true;
      result.tournamentTag_ = value;
      return this;
    }
    public Builder ClearTournamentTag() {
      PrepareBuilder();
      result.hasTournamentTag = false;
      result.tournamentTag_ = "";
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingServerReservationResponse() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ClientReserveFieldNames = new string[] { "map", "reservation", "reservationid", "serverid", "serverip", "serverport" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ClientReserveFieldTags = new uint[] { 50, 42, 32, 8, 16, 24 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve__FieldAccessorTable; }
  }
  
  public const int ServeridFieldNumber = 1;
  private bool hasServerid;
  private ulong serverid_;
  public bool HasServerid {
    get { return hasServerid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Serverid {
    get { return serverid_; }
  }
  
  public const int ServeripFieldNumber = 2;
  private bool hasServerip;
  private uint serverip_;
  public bool HasServerip {
    get { return hasServerip; }
  }
  [global::System.CLSCompliant(false)]
  public uint Serverip {
    get { return serverip_; }
  }
  
  public const int ServerportFieldNumber = 3;
  private bool hasServerport;
  private uint serverport_;
  public bool HasServerport {
    get { return hasServerport; }
  }
  [global::System.CLSCompliant(false)]
  public uint Serverport {
    get { return serverport_; }
  }
  
  public const int ReservationidFieldNumber = 4;
  private bool hasReservationid;
  private ulong reservationid_;
  public bool HasReservationid {
    get { return hasReservationid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Reservationid {
    get { return reservationid_; }
  }
  
  public const int ReservationFieldNumber = 5;
  private bool hasReservation;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation_;
  public bool HasReservation {
    get { return hasReservation; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
    get { return reservation_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance; }
  }
  
  public const int MapFieldNumber = 6;
  private bool hasMap;
  private string map_ = "";
  public bool HasMap {
    get { return hasMap; }
  }
  public string Map {
    get { return map_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ClientReserveFieldNames;
    if (hasServerid) {
      output.WriteUInt64(1, field_names[3], Serverid);
    }
    if (hasServerip) {
      output.WriteUInt32(2, field_names[4], Serverip);
    }
    if (hasServerport) {
      output.WriteUInt32(3, field_names[5], Serverport);
    }
    if (hasReservationid) {
      output.WriteUInt64(4, field_names[2], Reservationid);
    }
    if (hasReservation) {
      output.WriteMessage(5, field_names[1], Reservation);
    }
    if (hasMap) {
      output.WriteString(6, field_names[0], Map);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Serverid);
      }
      if (hasServerip) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Serverip);
      }
      if (hasServerport) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Serverport);
      }
      if (hasReservationid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Reservationid);
      }
      if (hasReservation) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, Reservation);
      }
      if (hasMap) {
        size += pb::CodedOutputStream.ComputeStringSize(6, Map);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasServerid) {
        Serverid = other.Serverid;
      }
      if (other.HasServerip) {
        Serverip = other.Serverip;
      }
      if (other.HasServerport) {
        Serverport = other.Serverport;
      }
      if (other.HasReservationid) {
        Reservationid = other.Reservationid;
      }
      if (other.HasReservation) {
        MergeReservation(other.Reservation);
      }
      if (other.HasMap) {
        Map = other.Map;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ClientReserveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ClientReserveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasServerid = input.ReadUInt64(ref result.serverid_);
            break;
          }
          case 16: {
            result.hasServerip = input.ReadUInt32(ref result.serverip_);
            break;
          }
          case 24: {
            result.hasServerport = input.ReadUInt32(ref result.serverport_);
            break;
          }
          case 32: {
            result.hasReservationid = input.ReadUInt64(ref result.reservationid_);
            break;
          }
          case 42: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder();
            if (result.hasReservation) {
              subBuilder.MergeFrom(Reservation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Reservation = subBuilder.BuildPartial();
            break;
          }
          case 50: {
            result.hasMap = input.ReadString(ref result.map_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasServerid {
      get { return result.hasServerid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Serverid {
      get { return result.Serverid; }
      set { SetServerid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerid(ulong value) {
      PrepareBuilder();
      result.hasServerid = true;
      result.serverid_ = value;
      return this;
    }
    public Builder ClearServerid() {
      PrepareBuilder();
      result.hasServerid = false;
      result.serverid_ = 0UL;
      return this;
    }
    
    public bool HasServerip {
      get { return result.hasServerip; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serverip {
      get { return result.Serverip; }
      set { SetServerip(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerip(uint value) {
      PrepareBuilder();
      result.hasServerip = true;
      result.serverip_ = value;
      return this;
    }
    public Builder ClearServerip() {
      PrepareBuilder();
      result.hasServerip = false;
      result.serverip_ = 0;
      return this;
    }
    
    public bool HasServerport {
      get { return result.hasServerport; }
    }
    [global::System.CLSCompliant(false)]
    public uint Serverport {
      get { return result.Serverport; }
      set { SetServerport(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerport(uint value) {
      PrepareBuilder();
      result.hasServerport = true;
      result.serverport_ = value;
      return this;
    }
    public Builder ClearServerport() {
      PrepareBuilder();
      result.hasServerport = false;
      result.serverport_ = 0;
      return this;
    }
    
    public bool HasReservationid {
      get { return result.hasReservationid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Reservationid {
      get { return result.Reservationid; }
      set { SetReservationid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReservationid(ulong value) {
      PrepareBuilder();
      result.hasReservationid = true;
      result.reservationid_ = value;
      return this;
    }
    public Builder ClearReservationid() {
      PrepareBuilder();
      result.hasReservationid = false;
      result.reservationid_ = 0UL;
      return this;
    }
    
    public bool HasReservation {
     get { return result.hasReservation; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
      get { return result.Reservation; }
      set { SetReservation(value); }
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = value;
      return this;
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReservation &&
          result.reservation_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance) {
          result.reservation_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder(result.reservation_).MergeFrom(value).BuildPartial();
      } else {
        result.reservation_ = value;
      }
      result.hasReservation = true;
      return this;
    }
    public Builder ClearReservation() {
      PrepareBuilder();
      result.hasReservation = false;
      result.reservation_ = null;
      return this;
    }
    
    public bool HasMap {
      get { return result.hasMap; }
    }
    public string Map {
      get { return result.Map; }
      set { SetMap(value); }
    }
    public Builder SetMap(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMap = true;
      result.map_ = value;
      return this;
    }
    public Builder ClearMap() {
      PrepareBuilder();
      result.hasMap = false;
      result.map_ = "";
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingServerRoundStats : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingServerRoundStats, CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingServerRoundStats() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingServerRoundStats defaultInstance = new CMsgGCCStrike15_v2_MatchmakingServerRoundStats().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingServerRoundStatsFieldNames = new string[] { "assists", "confirm", "deaths", "enemy_3ks", "enemy_4ks", "enemy_5ks", "enemy_headshots", "enemy_kills", "kills", "map", "match_duration", "match_result", "mvps", "pings", "reservation", "reservation_stage", "reservationid", "round", "round_result", "scores", "spectators_count", "spectators_count_lnk", "spectators_count_tv", "team_scores" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingServerRoundStatsFieldTags = new uint[] { 48, 106, 56, 144, 152, 160, 136, 128, 40, 26, 120, 88, 168, 72, 18, 112, 8, 32, 80, 64, 176, 192, 184, 96 };
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingServerRoundStats DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingServerRoundStats ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingServerRoundStats, CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServerRoundStats__FieldAccessorTable; }
  }
  
  public const int ReservationidFieldNumber = 1;
  private bool hasReservationid;
  private ulong reservationid_;
  public bool HasReservationid {
    get { return hasReservationid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Reservationid {
    get { return reservationid_; }
  }
  
  public const int ReservationFieldNumber = 2;
  private bool hasReservation;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation_;
  public bool HasReservation {
    get { return hasReservation; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
    get { return reservation_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance; }
  }
  
  public const int MapFieldNumber = 3;
  private bool hasMap;
  private string map_ = "";
  public bool HasMap {
    get { return hasMap; }
  }
  public string Map {
    get { return map_; }
  }
  
  public const int RoundFieldNumber = 4;
  private bool hasRound;
  private int round_;
  public bool HasRound {
    get { return hasRound; }
  }
  public int Round {
    get { return round_; }
  }
  
  public const int KillsFieldNumber = 5;
  private pbc::PopsicleList<int> kills_ = new pbc::PopsicleList<int>();
  public scg::IList<int> KillsList {
    get { return pbc::Lists.AsReadOnly(kills_); }
  }
  public int KillsCount {
    get { return kills_.Count; }
  }
  public int GetKills(int index) {
    return kills_[index];
  }
  
  public const int AssistsFieldNumber = 6;
  private pbc::PopsicleList<int> assists_ = new pbc::PopsicleList<int>();
  public scg::IList<int> AssistsList {
    get { return pbc::Lists.AsReadOnly(assists_); }
  }
  public int AssistsCount {
    get { return assists_.Count; }
  }
  public int GetAssists(int index) {
    return assists_[index];
  }
  
  public const int DeathsFieldNumber = 7;
  private pbc::PopsicleList<int> deaths_ = new pbc::PopsicleList<int>();
  public scg::IList<int> DeathsList {
    get { return pbc::Lists.AsReadOnly(deaths_); }
  }
  public int DeathsCount {
    get { return deaths_.Count; }
  }
  public int GetDeaths(int index) {
    return deaths_[index];
  }
  
  public const int ScoresFieldNumber = 8;
  private pbc::PopsicleList<int> scores_ = new pbc::PopsicleList<int>();
  public scg::IList<int> ScoresList {
    get { return pbc::Lists.AsReadOnly(scores_); }
  }
  public int ScoresCount {
    get { return scores_.Count; }
  }
  public int GetScores(int index) {
    return scores_[index];
  }
  
  public const int PingsFieldNumber = 9;
  private pbc::PopsicleList<int> pings_ = new pbc::PopsicleList<int>();
  public scg::IList<int> PingsList {
    get { return pbc::Lists.AsReadOnly(pings_); }
  }
  public int PingsCount {
    get { return pings_.Count; }
  }
  public int GetPings(int index) {
    return pings_[index];
  }
  
  public const int RoundResultFieldNumber = 10;
  private bool hasRoundResult;
  private int roundResult_;
  public bool HasRoundResult {
    get { return hasRoundResult; }
  }
  public int RoundResult {
    get { return roundResult_; }
  }
  
  public const int MatchResultFieldNumber = 11;
  private bool hasMatchResult;
  private int matchResult_;
  public bool HasMatchResult {
    get { return hasMatchResult; }
  }
  public int MatchResult {
    get { return matchResult_; }
  }
  
  public const int TeamScoresFieldNumber = 12;
  private pbc::PopsicleList<int> teamScores_ = new pbc::PopsicleList<int>();
  public scg::IList<int> TeamScoresList {
    get { return pbc::Lists.AsReadOnly(teamScores_); }
  }
  public int TeamScoresCount {
    get { return teamScores_.Count; }
  }
  public int GetTeamScores(int index) {
    return teamScores_[index];
  }
  
  public const int ConfirmFieldNumber = 13;
  private bool hasConfirm;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm_;
  public bool HasConfirm {
    get { return hasConfirm; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm Confirm {
    get { return confirm_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.DefaultInstance; }
  }
  
  public const int ReservationStageFieldNumber = 14;
  private bool hasReservationStage;
  private int reservationStage_;
  public bool HasReservationStage {
    get { return hasReservationStage; }
  }
  public int ReservationStage {
    get { return reservationStage_; }
  }
  
  public const int MatchDurationFieldNumber = 15;
  private bool hasMatchDuration;
  private int matchDuration_;
  public bool HasMatchDuration {
    get { return hasMatchDuration; }
  }
  public int MatchDuration {
    get { return matchDuration_; }
  }
  
  public const int EnemyKillsFieldNumber = 16;
  private pbc::PopsicleList<int> enemyKills_ = new pbc::PopsicleList<int>();
  public scg::IList<int> EnemyKillsList {
    get { return pbc::Lists.AsReadOnly(enemyKills_); }
  }
  public int EnemyKillsCount {
    get { return enemyKills_.Count; }
  }
  public int GetEnemyKills(int index) {
    return enemyKills_[index];
  }
  
  public const int EnemyHeadshotsFieldNumber = 17;
  private pbc::PopsicleList<int> enemyHeadshots_ = new pbc::PopsicleList<int>();
  public scg::IList<int> EnemyHeadshotsList {
    get { return pbc::Lists.AsReadOnly(enemyHeadshots_); }
  }
  public int EnemyHeadshotsCount {
    get { return enemyHeadshots_.Count; }
  }
  public int GetEnemyHeadshots(int index) {
    return enemyHeadshots_[index];
  }
  
  public const int Enemy3KsFieldNumber = 18;
  private pbc::PopsicleList<int> enemy3Ks_ = new pbc::PopsicleList<int>();
  public scg::IList<int> Enemy3KsList {
    get { return pbc::Lists.AsReadOnly(enemy3Ks_); }
  }
  public int Enemy3KsCount {
    get { return enemy3Ks_.Count; }
  }
  public int GetEnemy3Ks(int index) {
    return enemy3Ks_[index];
  }
  
  public const int Enemy4KsFieldNumber = 19;
  private pbc::PopsicleList<int> enemy4Ks_ = new pbc::PopsicleList<int>();
  public scg::IList<int> Enemy4KsList {
    get { return pbc::Lists.AsReadOnly(enemy4Ks_); }
  }
  public int Enemy4KsCount {
    get { return enemy4Ks_.Count; }
  }
  public int GetEnemy4Ks(int index) {
    return enemy4Ks_[index];
  }
  
  public const int Enemy5KsFieldNumber = 20;
  private pbc::PopsicleList<int> enemy5Ks_ = new pbc::PopsicleList<int>();
  public scg::IList<int> Enemy5KsList {
    get { return pbc::Lists.AsReadOnly(enemy5Ks_); }
  }
  public int Enemy5KsCount {
    get { return enemy5Ks_.Count; }
  }
  public int GetEnemy5Ks(int index) {
    return enemy5Ks_[index];
  }
  
  public const int MvpsFieldNumber = 21;
  private pbc::PopsicleList<int> mvps_ = new pbc::PopsicleList<int>();
  public scg::IList<int> MvpsList {
    get { return pbc::Lists.AsReadOnly(mvps_); }
  }
  public int MvpsCount {
    get { return mvps_.Count; }
  }
  public int GetMvps(int index) {
    return mvps_[index];
  }
  
  public const int SpectatorsCountFieldNumber = 22;
  private bool hasSpectatorsCount;
  private uint spectatorsCount_;
  public bool HasSpectatorsCount {
    get { return hasSpectatorsCount; }
  }
  [global::System.CLSCompliant(false)]
  public uint SpectatorsCount {
    get { return spectatorsCount_; }
  }
  
  public const int SpectatorsCountTvFieldNumber = 23;
  private bool hasSpectatorsCountTv;
  private uint spectatorsCountTv_;
  public bool HasSpectatorsCountTv {
    get { return hasSpectatorsCountTv; }
  }
  [global::System.CLSCompliant(false)]
  public uint SpectatorsCountTv {
    get { return spectatorsCountTv_; }
  }
  
  public const int SpectatorsCountLnkFieldNumber = 24;
  private bool hasSpectatorsCountLnk;
  private uint spectatorsCountLnk_;
  public bool HasSpectatorsCountLnk {
    get { return hasSpectatorsCountLnk; }
  }
  [global::System.CLSCompliant(false)]
  public uint SpectatorsCountLnk {
    get { return spectatorsCountLnk_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingServerRoundStatsFieldNames;
    if (hasReservationid) {
      output.WriteUInt64(1, field_names[16], Reservationid);
    }
    if (hasReservation) {
      output.WriteMessage(2, field_names[14], Reservation);
    }
    if (hasMap) {
      output.WriteString(3, field_names[9], Map);
    }
    if (hasRound) {
      output.WriteInt32(4, field_names[17], Round);
    }
    if (kills_.Count > 0) {
      output.WriteInt32Array(5, field_names[8], kills_);
    }
    if (assists_.Count > 0) {
      output.WriteInt32Array(6, field_names[0], assists_);
    }
    if (deaths_.Count > 0) {
      output.WriteInt32Array(7, field_names[2], deaths_);
    }
    if (scores_.Count > 0) {
      output.WriteInt32Array(8, field_names[19], scores_);
    }
    if (pings_.Count > 0) {
      output.WriteInt32Array(9, field_names[13], pings_);
    }
    if (hasRoundResult) {
      output.WriteInt32(10, field_names[18], RoundResult);
    }
    if (hasMatchResult) {
      output.WriteInt32(11, field_names[11], MatchResult);
    }
    if (teamScores_.Count > 0) {
      output.WriteInt32Array(12, field_names[23], teamScores_);
    }
    if (hasConfirm) {
      output.WriteMessage(13, field_names[1], Confirm);
    }
    if (hasReservationStage) {
      output.WriteInt32(14, field_names[15], ReservationStage);
    }
    if (hasMatchDuration) {
      output.WriteInt32(15, field_names[10], MatchDuration);
    }
    if (enemyKills_.Count > 0) {
      output.WriteInt32Array(16, field_names[7], enemyKills_);
    }
    if (enemyHeadshots_.Count > 0) {
      output.WriteInt32Array(17, field_names[6], enemyHeadshots_);
    }
    if (enemy3Ks_.Count > 0) {
      output.WriteInt32Array(18, field_names[3], enemy3Ks_);
    }
    if (enemy4Ks_.Count > 0) {
      output.WriteInt32Array(19, field_names[4], enemy4Ks_);
    }
    if (enemy5Ks_.Count > 0) {
      output.WriteInt32Array(20, field_names[5], enemy5Ks_);
    }
    if (mvps_.Count > 0) {
      output.WriteInt32Array(21, field_names[12], mvps_);
    }
    if (hasSpectatorsCount) {
      output.WriteUInt32(22, field_names[20], SpectatorsCount);
    }
    if (hasSpectatorsCountTv) {
      output.WriteUInt32(23, field_names[22], SpectatorsCountTv);
    }
    if (hasSpectatorsCountLnk) {
      output.WriteUInt32(24, field_names[21], SpectatorsCountLnk);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasReservationid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Reservationid);
      }
      if (hasReservation) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Reservation);
      }
      if (hasMap) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Map);
      }
      if (hasRound) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, Round);
      }
      {
        int dataSize = 0;
        foreach (int element in KillsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * kills_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in AssistsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * assists_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in DeathsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * deaths_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in ScoresList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * scores_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in PingsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * pings_.Count;
      }
      if (hasRoundResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, RoundResult);
      }
      if (hasMatchResult) {
        size += pb::CodedOutputStream.ComputeInt32Size(11, MatchResult);
      }
      {
        int dataSize = 0;
        foreach (int element in TeamScoresList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * teamScores_.Count;
      }
      if (hasConfirm) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, Confirm);
      }
      if (hasReservationStage) {
        size += pb::CodedOutputStream.ComputeInt32Size(14, ReservationStage);
      }
      if (hasMatchDuration) {
        size += pb::CodedOutputStream.ComputeInt32Size(15, MatchDuration);
      }
      {
        int dataSize = 0;
        foreach (int element in EnemyKillsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * enemyKills_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in EnemyHeadshotsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * enemyHeadshots_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in Enemy3KsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * enemy3Ks_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in Enemy4KsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * enemy4Ks_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in Enemy5KsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * enemy5Ks_.Count;
      }
      {
        int dataSize = 0;
        foreach (int element in MvpsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 2 * mvps_.Count;
      }
      if (hasSpectatorsCount) {
        size += pb::CodedOutputStream.ComputeUInt32Size(22, SpectatorsCount);
      }
      if (hasSpectatorsCountTv) {
        size += pb::CodedOutputStream.ComputeUInt32Size(23, SpectatorsCountTv);
      }
      if (hasSpectatorsCountLnk) {
        size += pb::CodedOutputStream.ComputeUInt32Size(24, SpectatorsCountLnk);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerRoundStats ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingServerRoundStats MakeReadOnly() {
    kills_.MakeReadOnly();
    assists_.MakeReadOnly();
    deaths_.MakeReadOnly();
    scores_.MakeReadOnly();
    pings_.MakeReadOnly();
    teamScores_.MakeReadOnly();
    enemyKills_.MakeReadOnly();
    enemyHeadshots_.MakeReadOnly();
    enemy3Ks_.MakeReadOnly();
    enemy4Ks_.MakeReadOnly();
    enemy5Ks_.MakeReadOnly();
    mvps_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingServerRoundStats prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingServerRoundStats, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingServerRoundStats cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingServerRoundStats result;
    
    private CMsgGCCStrike15_v2_MatchmakingServerRoundStats PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingServerRoundStats original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingServerRoundStats();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingServerRoundStats MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServerRoundStats DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServerRoundStats BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingServerRoundStats) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingServerRoundStats) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingServerRoundStats other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasReservationid) {
        Reservationid = other.Reservationid;
      }
      if (other.HasReservation) {
        MergeReservation(other.Reservation);
      }
      if (other.HasMap) {
        Map = other.Map;
      }
      if (other.HasRound) {
        Round = other.Round;
      }
      if (other.kills_.Count != 0) {
        result.kills_.Add(other.kills_);
      }
      if (other.assists_.Count != 0) {
        result.assists_.Add(other.assists_);
      }
      if (other.deaths_.Count != 0) {
        result.deaths_.Add(other.deaths_);
      }
      if (other.scores_.Count != 0) {
        result.scores_.Add(other.scores_);
      }
      if (other.pings_.Count != 0) {
        result.pings_.Add(other.pings_);
      }
      if (other.HasRoundResult) {
        RoundResult = other.RoundResult;
      }
      if (other.HasMatchResult) {
        MatchResult = other.MatchResult;
      }
      if (other.teamScores_.Count != 0) {
        result.teamScores_.Add(other.teamScores_);
      }
      if (other.HasConfirm) {
        MergeConfirm(other.Confirm);
      }
      if (other.HasReservationStage) {
        ReservationStage = other.ReservationStage;
      }
      if (other.HasMatchDuration) {
        MatchDuration = other.MatchDuration;
      }
      if (other.enemyKills_.Count != 0) {
        result.enemyKills_.Add(other.enemyKills_);
      }
      if (other.enemyHeadshots_.Count != 0) {
        result.enemyHeadshots_.Add(other.enemyHeadshots_);
      }
      if (other.enemy3Ks_.Count != 0) {
        result.enemy3Ks_.Add(other.enemy3Ks_);
      }
      if (other.enemy4Ks_.Count != 0) {
        result.enemy4Ks_.Add(other.enemy4Ks_);
      }
      if (other.enemy5Ks_.Count != 0) {
        result.enemy5Ks_.Add(other.enemy5Ks_);
      }
      if (other.mvps_.Count != 0) {
        result.mvps_.Add(other.mvps_);
      }
      if (other.HasSpectatorsCount) {
        SpectatorsCount = other.SpectatorsCount;
      }
      if (other.HasSpectatorsCountTv) {
        SpectatorsCountTv = other.SpectatorsCountTv;
      }
      if (other.HasSpectatorsCountLnk) {
        SpectatorsCountLnk = other.SpectatorsCountLnk;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingServerRoundStatsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingServerRoundStatsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasReservationid = input.ReadUInt64(ref result.reservationid_);
            break;
          }
          case 18: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder();
            if (result.hasReservation) {
              subBuilder.MergeFrom(Reservation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Reservation = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            result.hasMap = input.ReadString(ref result.map_);
            break;
          }
          case 32: {
            result.hasRound = input.ReadInt32(ref result.round_);
            break;
          }
          case 42:
          case 40: {
            input.ReadInt32Array(tag, field_name, result.kills_);
            break;
          }
          case 50:
          case 48: {
            input.ReadInt32Array(tag, field_name, result.assists_);
            break;
          }
          case 58:
          case 56: {
            input.ReadInt32Array(tag, field_name, result.deaths_);
            break;
          }
          case 66:
          case 64: {
            input.ReadInt32Array(tag, field_name, result.scores_);
            break;
          }
          case 74:
          case 72: {
            input.ReadInt32Array(tag, field_name, result.pings_);
            break;
          }
          case 80: {
            result.hasRoundResult = input.ReadInt32(ref result.roundResult_);
            break;
          }
          case 88: {
            result.hasMatchResult = input.ReadInt32(ref result.matchResult_);
            break;
          }
          case 98:
          case 96: {
            input.ReadInt32Array(tag, field_name, result.teamScores_);
            break;
          }
          case 106: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.CreateBuilder();
            if (result.hasConfirm) {
              subBuilder.MergeFrom(Confirm);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Confirm = subBuilder.BuildPartial();
            break;
          }
          case 112: {
            result.hasReservationStage = input.ReadInt32(ref result.reservationStage_);
            break;
          }
          case 120: {
            result.hasMatchDuration = input.ReadInt32(ref result.matchDuration_);
            break;
          }
          case 130:
          case 128: {
            input.ReadInt32Array(tag, field_name, result.enemyKills_);
            break;
          }
          case 138:
          case 136: {
            input.ReadInt32Array(tag, field_name, result.enemyHeadshots_);
            break;
          }
          case 146:
          case 144: {
            input.ReadInt32Array(tag, field_name, result.enemy3Ks_);
            break;
          }
          case 154:
          case 152: {
            input.ReadInt32Array(tag, field_name, result.enemy4Ks_);
            break;
          }
          case 162:
          case 160: {
            input.ReadInt32Array(tag, field_name, result.enemy5Ks_);
            break;
          }
          case 170:
          case 168: {
            input.ReadInt32Array(tag, field_name, result.mvps_);
            break;
          }
          case 176: {
            result.hasSpectatorsCount = input.ReadUInt32(ref result.spectatorsCount_);
            break;
          }
          case 184: {
            result.hasSpectatorsCountTv = input.ReadUInt32(ref result.spectatorsCountTv_);
            break;
          }
          case 192: {
            result.hasSpectatorsCountLnk = input.ReadUInt32(ref result.spectatorsCountLnk_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasReservationid {
      get { return result.hasReservationid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Reservationid {
      get { return result.Reservationid; }
      set { SetReservationid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReservationid(ulong value) {
      PrepareBuilder();
      result.hasReservationid = true;
      result.reservationid_ = value;
      return this;
    }
    public Builder ClearReservationid() {
      PrepareBuilder();
      result.hasReservationid = false;
      result.reservationid_ = 0UL;
      return this;
    }
    
    public bool HasReservation {
     get { return result.hasReservation; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
      get { return result.Reservation; }
      set { SetReservation(value); }
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = value;
      return this;
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReservation &&
          result.reservation_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance) {
          result.reservation_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder(result.reservation_).MergeFrom(value).BuildPartial();
      } else {
        result.reservation_ = value;
      }
      result.hasReservation = true;
      return this;
    }
    public Builder ClearReservation() {
      PrepareBuilder();
      result.hasReservation = false;
      result.reservation_ = null;
      return this;
    }
    
    public bool HasMap {
      get { return result.hasMap; }
    }
    public string Map {
      get { return result.Map; }
      set { SetMap(value); }
    }
    public Builder SetMap(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMap = true;
      result.map_ = value;
      return this;
    }
    public Builder ClearMap() {
      PrepareBuilder();
      result.hasMap = false;
      result.map_ = "";
      return this;
    }
    
    public bool HasRound {
      get { return result.hasRound; }
    }
    public int Round {
      get { return result.Round; }
      set { SetRound(value); }
    }
    public Builder SetRound(int value) {
      PrepareBuilder();
      result.hasRound = true;
      result.round_ = value;
      return this;
    }
    public Builder ClearRound() {
      PrepareBuilder();
      result.hasRound = false;
      result.round_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> KillsList {
      get { return PrepareBuilder().kills_; }
    }
    public int KillsCount {
      get { return result.KillsCount; }
    }
    public int GetKills(int index) {
      return result.GetKills(index);
    }
    public Builder SetKills(int index, int value) {
      PrepareBuilder();
      result.kills_[index] = value;
      return this;
    }
    public Builder AddKills(int value) {
      PrepareBuilder();
      result.kills_.Add(value);
      return this;
    }
    public Builder AddRangeKills(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.kills_.Add(values);
      return this;
    }
    public Builder ClearKills() {
      PrepareBuilder();
      result.kills_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> AssistsList {
      get { return PrepareBuilder().assists_; }
    }
    public int AssistsCount {
      get { return result.AssistsCount; }
    }
    public int GetAssists(int index) {
      return result.GetAssists(index);
    }
    public Builder SetAssists(int index, int value) {
      PrepareBuilder();
      result.assists_[index] = value;
      return this;
    }
    public Builder AddAssists(int value) {
      PrepareBuilder();
      result.assists_.Add(value);
      return this;
    }
    public Builder AddRangeAssists(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.assists_.Add(values);
      return this;
    }
    public Builder ClearAssists() {
      PrepareBuilder();
      result.assists_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> DeathsList {
      get { return PrepareBuilder().deaths_; }
    }
    public int DeathsCount {
      get { return result.DeathsCount; }
    }
    public int GetDeaths(int index) {
      return result.GetDeaths(index);
    }
    public Builder SetDeaths(int index, int value) {
      PrepareBuilder();
      result.deaths_[index] = value;
      return this;
    }
    public Builder AddDeaths(int value) {
      PrepareBuilder();
      result.deaths_.Add(value);
      return this;
    }
    public Builder AddRangeDeaths(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.deaths_.Add(values);
      return this;
    }
    public Builder ClearDeaths() {
      PrepareBuilder();
      result.deaths_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> ScoresList {
      get { return PrepareBuilder().scores_; }
    }
    public int ScoresCount {
      get { return result.ScoresCount; }
    }
    public int GetScores(int index) {
      return result.GetScores(index);
    }
    public Builder SetScores(int index, int value) {
      PrepareBuilder();
      result.scores_[index] = value;
      return this;
    }
    public Builder AddScores(int value) {
      PrepareBuilder();
      result.scores_.Add(value);
      return this;
    }
    public Builder AddRangeScores(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.scores_.Add(values);
      return this;
    }
    public Builder ClearScores() {
      PrepareBuilder();
      result.scores_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> PingsList {
      get { return PrepareBuilder().pings_; }
    }
    public int PingsCount {
      get { return result.PingsCount; }
    }
    public int GetPings(int index) {
      return result.GetPings(index);
    }
    public Builder SetPings(int index, int value) {
      PrepareBuilder();
      result.pings_[index] = value;
      return this;
    }
    public Builder AddPings(int value) {
      PrepareBuilder();
      result.pings_.Add(value);
      return this;
    }
    public Builder AddRangePings(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.pings_.Add(values);
      return this;
    }
    public Builder ClearPings() {
      PrepareBuilder();
      result.pings_.Clear();
      return this;
    }
    
    public bool HasRoundResult {
      get { return result.hasRoundResult; }
    }
    public int RoundResult {
      get { return result.RoundResult; }
      set { SetRoundResult(value); }
    }
    public Builder SetRoundResult(int value) {
      PrepareBuilder();
      result.hasRoundResult = true;
      result.roundResult_ = value;
      return this;
    }
    public Builder ClearRoundResult() {
      PrepareBuilder();
      result.hasRoundResult = false;
      result.roundResult_ = 0;
      return this;
    }
    
    public bool HasMatchResult {
      get { return result.hasMatchResult; }
    }
    public int MatchResult {
      get { return result.MatchResult; }
      set { SetMatchResult(value); }
    }
    public Builder SetMatchResult(int value) {
      PrepareBuilder();
      result.hasMatchResult = true;
      result.matchResult_ = value;
      return this;
    }
    public Builder ClearMatchResult() {
      PrepareBuilder();
      result.hasMatchResult = false;
      result.matchResult_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> TeamScoresList {
      get { return PrepareBuilder().teamScores_; }
    }
    public int TeamScoresCount {
      get { return result.TeamScoresCount; }
    }
    public int GetTeamScores(int index) {
      return result.GetTeamScores(index);
    }
    public Builder SetTeamScores(int index, int value) {
      PrepareBuilder();
      result.teamScores_[index] = value;
      return this;
    }
    public Builder AddTeamScores(int value) {
      PrepareBuilder();
      result.teamScores_.Add(value);
      return this;
    }
    public Builder AddRangeTeamScores(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.teamScores_.Add(values);
      return this;
    }
    public Builder ClearTeamScores() {
      PrepareBuilder();
      result.teamScores_.Clear();
      return this;
    }
    
    public bool HasConfirm {
     get { return result.hasConfirm; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm Confirm {
      get { return result.Confirm; }
      set { SetConfirm(value); }
    }
    public Builder SetConfirm(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasConfirm = true;
      result.confirm_ = value;
      return this;
    }
    public Builder SetConfirm(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasConfirm = true;
      result.confirm_ = builderForValue.Build();
      return this;
    }
    public Builder MergeConfirm(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasConfirm &&
          result.confirm_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.DefaultInstance) {
          result.confirm_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.CreateBuilder(result.confirm_).MergeFrom(value).BuildPartial();
      } else {
        result.confirm_ = value;
      }
      result.hasConfirm = true;
      return this;
    }
    public Builder ClearConfirm() {
      PrepareBuilder();
      result.hasConfirm = false;
      result.confirm_ = null;
      return this;
    }
    
    public bool HasReservationStage {
      get { return result.hasReservationStage; }
    }
    public int ReservationStage {
      get { return result.ReservationStage; }
      set { SetReservationStage(value); }
    }
    public Builder SetReservationStage(int value) {
      PrepareBuilder();
      result.hasReservationStage = true;
      result.reservationStage_ = value;
      return this;
    }
    public Builder ClearReservationStage() {
      PrepareBuilder();
      result.hasReservationStage = false;
      result.reservationStage_ = 0;
      return this;
    }
    
    public bool HasMatchDuration {
      get { return result.hasMatchDuration; }
    }
    public int MatchDuration {
      get { return result.MatchDuration; }
      set { SetMatchDuration(value); }
    }
    public Builder SetMatchDuration(int value) {
      PrepareBuilder();
      result.hasMatchDuration = true;
      result.matchDuration_ = value;
      return this;
    }
    public Builder ClearMatchDuration() {
      PrepareBuilder();
      result.hasMatchDuration = false;
      result.matchDuration_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<int> EnemyKillsList {
      get { return PrepareBuilder().enemyKills_; }
    }
    public int EnemyKillsCount {
      get { return result.EnemyKillsCount; }
    }
    public int GetEnemyKills(int index) {
      return result.GetEnemyKills(index);
    }
    public Builder SetEnemyKills(int index, int value) {
      PrepareBuilder();
      result.enemyKills_[index] = value;
      return this;
    }
    public Builder AddEnemyKills(int value) {
      PrepareBuilder();
      result.enemyKills_.Add(value);
      return this;
    }
    public Builder AddRangeEnemyKills(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.enemyKills_.Add(values);
      return this;
    }
    public Builder ClearEnemyKills() {
      PrepareBuilder();
      result.enemyKills_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> EnemyHeadshotsList {
      get { return PrepareBuilder().enemyHeadshots_; }
    }
    public int EnemyHeadshotsCount {
      get { return result.EnemyHeadshotsCount; }
    }
    public int GetEnemyHeadshots(int index) {
      return result.GetEnemyHeadshots(index);
    }
    public Builder SetEnemyHeadshots(int index, int value) {
      PrepareBuilder();
      result.enemyHeadshots_[index] = value;
      return this;
    }
    public Builder AddEnemyHeadshots(int value) {
      PrepareBuilder();
      result.enemyHeadshots_.Add(value);
      return this;
    }
    public Builder AddRangeEnemyHeadshots(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.enemyHeadshots_.Add(values);
      return this;
    }
    public Builder ClearEnemyHeadshots() {
      PrepareBuilder();
      result.enemyHeadshots_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> Enemy3KsList {
      get { return PrepareBuilder().enemy3Ks_; }
    }
    public int Enemy3KsCount {
      get { return result.Enemy3KsCount; }
    }
    public int GetEnemy3Ks(int index) {
      return result.GetEnemy3Ks(index);
    }
    public Builder SetEnemy3Ks(int index, int value) {
      PrepareBuilder();
      result.enemy3Ks_[index] = value;
      return this;
    }
    public Builder AddEnemy3Ks(int value) {
      PrepareBuilder();
      result.enemy3Ks_.Add(value);
      return this;
    }
    public Builder AddRangeEnemy3Ks(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.enemy3Ks_.Add(values);
      return this;
    }
    public Builder ClearEnemy3Ks() {
      PrepareBuilder();
      result.enemy3Ks_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> Enemy4KsList {
      get { return PrepareBuilder().enemy4Ks_; }
    }
    public int Enemy4KsCount {
      get { return result.Enemy4KsCount; }
    }
    public int GetEnemy4Ks(int index) {
      return result.GetEnemy4Ks(index);
    }
    public Builder SetEnemy4Ks(int index, int value) {
      PrepareBuilder();
      result.enemy4Ks_[index] = value;
      return this;
    }
    public Builder AddEnemy4Ks(int value) {
      PrepareBuilder();
      result.enemy4Ks_.Add(value);
      return this;
    }
    public Builder AddRangeEnemy4Ks(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.enemy4Ks_.Add(values);
      return this;
    }
    public Builder ClearEnemy4Ks() {
      PrepareBuilder();
      result.enemy4Ks_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> Enemy5KsList {
      get { return PrepareBuilder().enemy5Ks_; }
    }
    public int Enemy5KsCount {
      get { return result.Enemy5KsCount; }
    }
    public int GetEnemy5Ks(int index) {
      return result.GetEnemy5Ks(index);
    }
    public Builder SetEnemy5Ks(int index, int value) {
      PrepareBuilder();
      result.enemy5Ks_[index] = value;
      return this;
    }
    public Builder AddEnemy5Ks(int value) {
      PrepareBuilder();
      result.enemy5Ks_.Add(value);
      return this;
    }
    public Builder AddRangeEnemy5Ks(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.enemy5Ks_.Add(values);
      return this;
    }
    public Builder ClearEnemy5Ks() {
      PrepareBuilder();
      result.enemy5Ks_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> MvpsList {
      get { return PrepareBuilder().mvps_; }
    }
    public int MvpsCount {
      get { return result.MvpsCount; }
    }
    public int GetMvps(int index) {
      return result.GetMvps(index);
    }
    public Builder SetMvps(int index, int value) {
      PrepareBuilder();
      result.mvps_[index] = value;
      return this;
    }
    public Builder AddMvps(int value) {
      PrepareBuilder();
      result.mvps_.Add(value);
      return this;
    }
    public Builder AddRangeMvps(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.mvps_.Add(values);
      return this;
    }
    public Builder ClearMvps() {
      PrepareBuilder();
      result.mvps_.Clear();
      return this;
    }
    
    public bool HasSpectatorsCount {
      get { return result.hasSpectatorsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpectatorsCount {
      get { return result.SpectatorsCount; }
      set { SetSpectatorsCount(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSpectatorsCount(uint value) {
      PrepareBuilder();
      result.hasSpectatorsCount = true;
      result.spectatorsCount_ = value;
      return this;
    }
    public Builder ClearSpectatorsCount() {
      PrepareBuilder();
      result.hasSpectatorsCount = false;
      result.spectatorsCount_ = 0;
      return this;
    }
    
    public bool HasSpectatorsCountTv {
      get { return result.hasSpectatorsCountTv; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpectatorsCountTv {
      get { return result.SpectatorsCountTv; }
      set { SetSpectatorsCountTv(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSpectatorsCountTv(uint value) {
      PrepareBuilder();
      result.hasSpectatorsCountTv = true;
      result.spectatorsCountTv_ = value;
      return this;
    }
    public Builder ClearSpectatorsCountTv() {
      PrepareBuilder();
      result.hasSpectatorsCountTv = false;
      result.spectatorsCountTv_ = 0;
      return this;
    }
    
    public bool HasSpectatorsCountLnk {
      get { return result.hasSpectatorsCountLnk; }
    }
    [global::System.CLSCompliant(false)]
    public uint SpectatorsCountLnk {
      get { return result.SpectatorsCountLnk; }
      set { SetSpectatorsCountLnk(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSpectatorsCountLnk(uint value) {
      PrepareBuilder();
      result.hasSpectatorsCountLnk = true;
      result.spectatorsCountLnk_ = value;
      return this;
    }
    public Builder ClearSpectatorsCountLnk() {
      PrepareBuilder();
      result.hasSpectatorsCountLnk = false;
      result.spectatorsCountLnk_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingServerRoundStats() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingServerMatchEnd : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingServerMatchEnd defaultInstance = new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingServerMatchEndFieldNames = new string[] { "aborted_match", "confirm", "rematch", "replay_cluster_id", "replay_token", "stats" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingServerMatchEndFieldTags = new uint[] { 56, 26, 32, 48, 40, 10 };
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingServerMatchEnd DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServerMatchEnd__FieldAccessorTable; }
  }
  
  public const int StatsFieldNumber = 1;
  private bool hasStats;
  private global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats stats_;
  public bool HasStats {
    get { return hasStats; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats Stats {
    get { return stats_ ?? global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance; }
  }
  
  public const int ConfirmFieldNumber = 3;
  private bool hasConfirm;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm confirm_;
  public bool HasConfirm {
    get { return hasConfirm; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm Confirm {
    get { return confirm_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.DefaultInstance; }
  }
  
  public const int RematchFieldNumber = 4;
  private bool hasRematch;
  private ulong rematch_;
  public bool HasRematch {
    get { return hasRematch; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Rematch {
    get { return rematch_; }
  }
  
  public const int ReplayTokenFieldNumber = 5;
  private bool hasReplayToken;
  private uint replayToken_;
  public bool HasReplayToken {
    get { return hasReplayToken; }
  }
  [global::System.CLSCompliant(false)]
  public uint ReplayToken {
    get { return replayToken_; }
  }
  
  public const int ReplayClusterIdFieldNumber = 6;
  private bool hasReplayClusterId;
  private uint replayClusterId_;
  public bool HasReplayClusterId {
    get { return hasReplayClusterId; }
  }
  [global::System.CLSCompliant(false)]
  public uint ReplayClusterId {
    get { return replayClusterId_; }
  }
  
  public const int AbortedMatchFieldNumber = 7;
  private bool hasAbortedMatch;
  private bool abortedMatch_;
  public bool HasAbortedMatch {
    get { return hasAbortedMatch; }
  }
  public bool AbortedMatch {
    get { return abortedMatch_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingServerMatchEndFieldNames;
    if (hasStats) {
      output.WriteMessage(1, field_names[5], Stats);
    }
    if (hasConfirm) {
      output.WriteMessage(3, field_names[1], Confirm);
    }
    if (hasRematch) {
      output.WriteUInt64(4, field_names[2], Rematch);
    }
    if (hasReplayToken) {
      output.WriteUInt32(5, field_names[4], ReplayToken);
    }
    if (hasReplayClusterId) {
      output.WriteUInt32(6, field_names[3], ReplayClusterId);
    }
    if (hasAbortedMatch) {
      output.WriteBool(7, field_names[0], AbortedMatch);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStats) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Stats);
      }
      if (hasConfirm) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Confirm);
      }
      if (hasRematch) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Rematch);
      }
      if (hasReplayToken) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ReplayToken);
      }
      if (hasReplayClusterId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ReplayClusterId);
      }
      if (hasAbortedMatch) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, AbortedMatch);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingServerMatchEnd MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingServerMatchEnd, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingServerMatchEnd result;
    
    private CMsgGCCStrike15_v2_MatchmakingServerMatchEnd PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingServerMatchEnd original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingServerMatchEnd();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingServerMatchEnd MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServerMatchEnd DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServerMatchEnd BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingServerMatchEnd) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingServerMatchEnd) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingServerMatchEnd other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingServerMatchEnd.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStats) {
        MergeStats(other.Stats);
      }
      if (other.HasConfirm) {
        MergeConfirm(other.Confirm);
      }
      if (other.HasRematch) {
        Rematch = other.Rematch;
      }
      if (other.HasReplayToken) {
        ReplayToken = other.ReplayToken;
      }
      if (other.HasReplayClusterId) {
        ReplayClusterId = other.ReplayClusterId;
      }
      if (other.HasAbortedMatch) {
        AbortedMatch = other.AbortedMatch;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingServerMatchEndFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingServerMatchEndFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder();
            if (result.hasStats) {
              subBuilder.MergeFrom(Stats);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Stats = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.CreateBuilder();
            if (result.hasConfirm) {
              subBuilder.MergeFrom(Confirm);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Confirm = subBuilder.BuildPartial();
            break;
          }
          case 32: {
            result.hasRematch = input.ReadUInt64(ref result.rematch_);
            break;
          }
          case 40: {
            result.hasReplayToken = input.ReadUInt32(ref result.replayToken_);
            break;
          }
          case 48: {
            result.hasReplayClusterId = input.ReadUInt32(ref result.replayClusterId_);
            break;
          }
          case 56: {
            result.hasAbortedMatch = input.ReadBool(ref result.abortedMatch_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStats {
     get { return result.hasStats; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats Stats {
      get { return result.Stats; }
      set { SetStats(value); }
    }
    public Builder SetStats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasStats = true;
      result.stats_ = value;
      return this;
    }
    public Builder SetStats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasStats = true;
      result.stats_ = builderForValue.Build();
      return this;
    }
    public Builder MergeStats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasStats &&
          result.stats_ != global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance) {
          result.stats_ = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder(result.stats_).MergeFrom(value).BuildPartial();
      } else {
        result.stats_ = value;
      }
      result.hasStats = true;
      return this;
    }
    public Builder ClearStats() {
      PrepareBuilder();
      result.hasStats = false;
      result.stats_ = null;
      return this;
    }
    
    public bool HasConfirm {
     get { return result.hasConfirm; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm Confirm {
      get { return result.Confirm; }
      set { SetConfirm(value); }
    }
    public Builder SetConfirm(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasConfirm = true;
      result.confirm_ = value;
      return this;
    }
    public Builder SetConfirm(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasConfirm = true;
      result.confirm_ = builderForValue.Build();
      return this;
    }
    public Builder MergeConfirm(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasConfirm &&
          result.confirm_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.DefaultInstance) {
          result.confirm_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerConfirm.CreateBuilder(result.confirm_).MergeFrom(value).BuildPartial();
      } else {
        result.confirm_ = value;
      }
      result.hasConfirm = true;
      return this;
    }
    public Builder ClearConfirm() {
      PrepareBuilder();
      result.hasConfirm = false;
      result.confirm_ = null;
      return this;
    }
    
    public bool HasRematch {
      get { return result.hasRematch; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Rematch {
      get { return result.Rematch; }
      set { SetRematch(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRematch(ulong value) {
      PrepareBuilder();
      result.hasRematch = true;
      result.rematch_ = value;
      return this;
    }
    public Builder ClearRematch() {
      PrepareBuilder();
      result.hasRematch = false;
      result.rematch_ = 0UL;
      return this;
    }
    
    public bool HasReplayToken {
      get { return result.hasReplayToken; }
    }
    [global::System.CLSCompliant(false)]
    public uint ReplayToken {
      get { return result.ReplayToken; }
      set { SetReplayToken(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReplayToken(uint value) {
      PrepareBuilder();
      result.hasReplayToken = true;
      result.replayToken_ = value;
      return this;
    }
    public Builder ClearReplayToken() {
      PrepareBuilder();
      result.hasReplayToken = false;
      result.replayToken_ = 0;
      return this;
    }
    
    public bool HasReplayClusterId {
      get { return result.hasReplayClusterId; }
    }
    [global::System.CLSCompliant(false)]
    public uint ReplayClusterId {
      get { return result.ReplayClusterId; }
      set { SetReplayClusterId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReplayClusterId(uint value) {
      PrepareBuilder();
      result.hasReplayClusterId = true;
      result.replayClusterId_ = value;
      return this;
    }
    public Builder ClearReplayClusterId() {
      PrepareBuilder();
      result.hasReplayClusterId = false;
      result.replayClusterId_ = 0;
      return this;
    }
    
    public bool HasAbortedMatch {
      get { return result.hasAbortedMatch; }
    }
    public bool AbortedMatch {
      get { return result.AbortedMatch; }
      set { SetAbortedMatch(value); }
    }
    public Builder SetAbortedMatch(bool value) {
      PrepareBuilder();
      result.hasAbortedMatch = true;
      result.abortedMatch_ = value;
      return this;
    }
    public Builder ClearAbortedMatch() {
      PrepareBuilder();
      result.hasAbortedMatch = false;
      result.abortedMatch_ = false;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingServerMatchEnd() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingClient2GCHello : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingClient2GCHello, CMsgGCCStrike15_v2_MatchmakingClient2GCHello.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingClient2GCHello() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingClient2GCHello defaultInstance = new CMsgGCCStrike15_v2_MatchmakingClient2GCHello().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingClient2GCHelloFieldNames = new string[] {  };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingClient2GCHelloFieldTags = new uint[] {  };
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingClient2GCHello DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingClient2GCHello ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingClient2GCHello, CMsgGCCStrike15_v2_MatchmakingClient2GCHello.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingClient2GCHello__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingClient2GCHelloFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingClient2GCHello ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingClient2GCHello MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingClient2GCHello prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingClient2GCHello, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingClient2GCHello cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingClient2GCHello result;
    
    private CMsgGCCStrike15_v2_MatchmakingClient2GCHello PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingClient2GCHello original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingClient2GCHello();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingClient2GCHello MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingClient2GCHello DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingClient2GCHello BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingClient2GCHello) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingClient2GCHello) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingClient2GCHello other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingClient2GCHello.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingClient2GCHelloFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingClient2GCHelloFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CMsgGCCStrike15_v2_MatchmakingClient2GCHello() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ClientHello : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ClientHello defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ClientHelloFieldNames = new string[] { "account_id", "activity", "commendation", "global_stats", "medals", "my_current_event", "my_current_event_stages", "my_current_event_teams", "my_current_team", "ongoingmatch", "penalty_reason", "penalty_seconds", "ranking", "survey_vote", "vac_banned" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ClientHelloFieldTags = new uint[] { 8, 122, 66, 26, 74, 82, 106, 90, 98, 18, 40, 32, 58, 112, 48 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ClientHello DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientHello__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int OngoingmatchFieldNumber = 2;
  private bool hasOngoingmatch;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ongoingmatch_;
  public bool HasOngoingmatch {
    get { return hasOngoingmatch; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve Ongoingmatch {
    get { return ongoingmatch_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance; }
  }
  
  public const int GlobalStatsFieldNumber = 3;
  private bool hasGlobalStats;
  private global::GlobalStatistics globalStats_;
  public bool HasGlobalStats {
    get { return hasGlobalStats; }
  }
  public global::GlobalStatistics GlobalStats {
    get { return globalStats_ ?? global::GlobalStatistics.DefaultInstance; }
  }
  
  public const int PenaltySecondsFieldNumber = 4;
  private bool hasPenaltySeconds;
  private uint penaltySeconds_;
  public bool HasPenaltySeconds {
    get { return hasPenaltySeconds; }
  }
  [global::System.CLSCompliant(false)]
  public uint PenaltySeconds {
    get { return penaltySeconds_; }
  }
  
  public const int PenaltyReasonFieldNumber = 5;
  private bool hasPenaltyReason;
  private uint penaltyReason_;
  public bool HasPenaltyReason {
    get { return hasPenaltyReason; }
  }
  [global::System.CLSCompliant(false)]
  public uint PenaltyReason {
    get { return penaltyReason_; }
  }
  
  public const int VacBannedFieldNumber = 6;
  private bool hasVacBanned;
  private int vacBanned_;
  public bool HasVacBanned {
    get { return hasVacBanned; }
  }
  public int VacBanned {
    get { return vacBanned_; }
  }
  
  public const int RankingFieldNumber = 7;
  private bool hasRanking;
  private global::PlayerRankingInfo ranking_;
  public bool HasRanking {
    get { return hasRanking; }
  }
  public global::PlayerRankingInfo Ranking {
    get { return ranking_ ?? global::PlayerRankingInfo.DefaultInstance; }
  }
  
  public const int CommendationFieldNumber = 8;
  private bool hasCommendation;
  private global::PlayerCommendationInfo commendation_;
  public bool HasCommendation {
    get { return hasCommendation; }
  }
  public global::PlayerCommendationInfo Commendation {
    get { return commendation_ ?? global::PlayerCommendationInfo.DefaultInstance; }
  }
  
  public const int MedalsFieldNumber = 9;
  private bool hasMedals;
  private global::PlayerMedalsInfo medals_;
  public bool HasMedals {
    get { return hasMedals; }
  }
  public global::PlayerMedalsInfo Medals {
    get { return medals_ ?? global::PlayerMedalsInfo.DefaultInstance; }
  }
  
  public const int MyCurrentEventFieldNumber = 10;
  private bool hasMyCurrentEvent;
  private global::TournamentEvent myCurrentEvent_;
  public bool HasMyCurrentEvent {
    get { return hasMyCurrentEvent; }
  }
  public global::TournamentEvent MyCurrentEvent {
    get { return myCurrentEvent_ ?? global::TournamentEvent.DefaultInstance; }
  }
  
  public const int MyCurrentEventTeamsFieldNumber = 11;
  private pbc::PopsicleList<global::TournamentTeam> myCurrentEventTeams_ = new pbc::PopsicleList<global::TournamentTeam>();
  public scg::IList<global::TournamentTeam> MyCurrentEventTeamsList {
    get { return myCurrentEventTeams_; }
  }
  public int MyCurrentEventTeamsCount {
    get { return myCurrentEventTeams_.Count; }
  }
  public global::TournamentTeam GetMyCurrentEventTeams(int index) {
    return myCurrentEventTeams_[index];
  }
  
  public const int MyCurrentTeamFieldNumber = 12;
  private bool hasMyCurrentTeam;
  private global::TournamentTeam myCurrentTeam_;
  public bool HasMyCurrentTeam {
    get { return hasMyCurrentTeam; }
  }
  public global::TournamentTeam MyCurrentTeam {
    get { return myCurrentTeam_ ?? global::TournamentTeam.DefaultInstance; }
  }
  
  public const int MyCurrentEventStagesFieldNumber = 13;
  private pbc::PopsicleList<global::TournamentEvent> myCurrentEventStages_ = new pbc::PopsicleList<global::TournamentEvent>();
  public scg::IList<global::TournamentEvent> MyCurrentEventStagesList {
    get { return myCurrentEventStages_; }
  }
  public int MyCurrentEventStagesCount {
    get { return myCurrentEventStages_.Count; }
  }
  public global::TournamentEvent GetMyCurrentEventStages(int index) {
    return myCurrentEventStages_[index];
  }
  
  public const int SurveyVoteFieldNumber = 14;
  private bool hasSurveyVote;
  private uint surveyVote_;
  public bool HasSurveyVote {
    get { return hasSurveyVote; }
  }
  [global::System.CLSCompliant(false)]
  public uint SurveyVote {
    get { return surveyVote_; }
  }
  
  public const int ActivityFieldNumber = 15;
  private bool hasActivity;
  private global::AccountActivity activity_;
  public bool HasActivity {
    get { return hasActivity; }
  }
  public global::AccountActivity Activity {
    get { return activity_ ?? global::AccountActivity.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ClientHelloFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasOngoingmatch) {
      output.WriteMessage(2, field_names[9], Ongoingmatch);
    }
    if (hasGlobalStats) {
      output.WriteMessage(3, field_names[3], GlobalStats);
    }
    if (hasPenaltySeconds) {
      output.WriteUInt32(4, field_names[11], PenaltySeconds);
    }
    if (hasPenaltyReason) {
      output.WriteUInt32(5, field_names[10], PenaltyReason);
    }
    if (hasVacBanned) {
      output.WriteInt32(6, field_names[14], VacBanned);
    }
    if (hasRanking) {
      output.WriteMessage(7, field_names[12], Ranking);
    }
    if (hasCommendation) {
      output.WriteMessage(8, field_names[2], Commendation);
    }
    if (hasMedals) {
      output.WriteMessage(9, field_names[4], Medals);
    }
    if (hasMyCurrentEvent) {
      output.WriteMessage(10, field_names[5], MyCurrentEvent);
    }
    if (myCurrentEventTeams_.Count > 0) {
      output.WriteMessageArray(11, field_names[7], myCurrentEventTeams_);
    }
    if (hasMyCurrentTeam) {
      output.WriteMessage(12, field_names[8], MyCurrentTeam);
    }
    if (myCurrentEventStages_.Count > 0) {
      output.WriteMessageArray(13, field_names[6], myCurrentEventStages_);
    }
    if (hasSurveyVote) {
      output.WriteUInt32(14, field_names[13], SurveyVote);
    }
    if (hasActivity) {
      output.WriteMessage(15, field_names[1], Activity);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasOngoingmatch) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Ongoingmatch);
      }
      if (hasGlobalStats) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, GlobalStats);
      }
      if (hasPenaltySeconds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, PenaltySeconds);
      }
      if (hasPenaltyReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, PenaltyReason);
      }
      if (hasVacBanned) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, VacBanned);
      }
      if (hasRanking) {
        size += pb::CodedOutputStream.ComputeMessageSize(7, Ranking);
      }
      if (hasCommendation) {
        size += pb::CodedOutputStream.ComputeMessageSize(8, Commendation);
      }
      if (hasMedals) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, Medals);
      }
      if (hasMyCurrentEvent) {
        size += pb::CodedOutputStream.ComputeMessageSize(10, MyCurrentEvent);
      }
      foreach (global::TournamentTeam element in MyCurrentEventTeamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(11, element);
      }
      if (hasMyCurrentTeam) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, MyCurrentTeam);
      }
      foreach (global::TournamentEvent element in MyCurrentEventStagesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(13, element);
      }
      if (hasSurveyVote) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, SurveyVote);
      }
      if (hasActivity) {
        size += pb::CodedOutputStream.ComputeMessageSize(15, Activity);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientHello MakeReadOnly() {
    myCurrentEventTeams_.MakeReadOnly();
    myCurrentEventStages_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ClientHello, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientHello result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientHello PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ClientHello original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ClientHello();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientHello MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientHello DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientHello BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ClientHello) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ClientHello) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ClientHello other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasOngoingmatch) {
        MergeOngoingmatch(other.Ongoingmatch);
      }
      if (other.HasGlobalStats) {
        MergeGlobalStats(other.GlobalStats);
      }
      if (other.HasPenaltySeconds) {
        PenaltySeconds = other.PenaltySeconds;
      }
      if (other.HasPenaltyReason) {
        PenaltyReason = other.PenaltyReason;
      }
      if (other.HasVacBanned) {
        VacBanned = other.VacBanned;
      }
      if (other.HasRanking) {
        MergeRanking(other.Ranking);
      }
      if (other.HasCommendation) {
        MergeCommendation(other.Commendation);
      }
      if (other.HasMedals) {
        MergeMedals(other.Medals);
      }
      if (other.HasMyCurrentEvent) {
        MergeMyCurrentEvent(other.MyCurrentEvent);
      }
      if (other.myCurrentEventTeams_.Count != 0) {
        result.myCurrentEventTeams_.Add(other.myCurrentEventTeams_);
      }
      if (other.HasMyCurrentTeam) {
        MergeMyCurrentTeam(other.MyCurrentTeam);
      }
      if (other.myCurrentEventStages_.Count != 0) {
        result.myCurrentEventStages_.Add(other.myCurrentEventStages_);
      }
      if (other.HasSurveyVote) {
        SurveyVote = other.SurveyVote;
      }
      if (other.HasActivity) {
        MergeActivity(other.Activity);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ClientHelloFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ClientHelloFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 18: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.CreateBuilder();
            if (result.hasOngoingmatch) {
              subBuilder.MergeFrom(Ongoingmatch);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Ongoingmatch = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            global::GlobalStatistics.Builder subBuilder = global::GlobalStatistics.CreateBuilder();
            if (result.hasGlobalStats) {
              subBuilder.MergeFrom(GlobalStats);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            GlobalStats = subBuilder.BuildPartial();
            break;
          }
          case 32: {
            result.hasPenaltySeconds = input.ReadUInt32(ref result.penaltySeconds_);
            break;
          }
          case 40: {
            result.hasPenaltyReason = input.ReadUInt32(ref result.penaltyReason_);
            break;
          }
          case 48: {
            result.hasVacBanned = input.ReadInt32(ref result.vacBanned_);
            break;
          }
          case 58: {
            global::PlayerRankingInfo.Builder subBuilder = global::PlayerRankingInfo.CreateBuilder();
            if (result.hasRanking) {
              subBuilder.MergeFrom(Ranking);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Ranking = subBuilder.BuildPartial();
            break;
          }
          case 66: {
            global::PlayerCommendationInfo.Builder subBuilder = global::PlayerCommendationInfo.CreateBuilder();
            if (result.hasCommendation) {
              subBuilder.MergeFrom(Commendation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Commendation = subBuilder.BuildPartial();
            break;
          }
          case 74: {
            global::PlayerMedalsInfo.Builder subBuilder = global::PlayerMedalsInfo.CreateBuilder();
            if (result.hasMedals) {
              subBuilder.MergeFrom(Medals);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Medals = subBuilder.BuildPartial();
            break;
          }
          case 82: {
            global::TournamentEvent.Builder subBuilder = global::TournamentEvent.CreateBuilder();
            if (result.hasMyCurrentEvent) {
              subBuilder.MergeFrom(MyCurrentEvent);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MyCurrentEvent = subBuilder.BuildPartial();
            break;
          }
          case 90: {
            input.ReadMessageArray(tag, field_name, result.myCurrentEventTeams_, global::TournamentTeam.DefaultInstance, extensionRegistry);
            break;
          }
          case 98: {
            global::TournamentTeam.Builder subBuilder = global::TournamentTeam.CreateBuilder();
            if (result.hasMyCurrentTeam) {
              subBuilder.MergeFrom(MyCurrentTeam);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MyCurrentTeam = subBuilder.BuildPartial();
            break;
          }
          case 106: {
            input.ReadMessageArray(tag, field_name, result.myCurrentEventStages_, global::TournamentEvent.DefaultInstance, extensionRegistry);
            break;
          }
          case 112: {
            result.hasSurveyVote = input.ReadUInt32(ref result.surveyVote_);
            break;
          }
          case 122: {
            global::AccountActivity.Builder subBuilder = global::AccountActivity.CreateBuilder();
            if (result.hasActivity) {
              subBuilder.MergeFrom(Activity);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Activity = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasOngoingmatch {
     get { return result.hasOngoingmatch; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve Ongoingmatch {
      get { return result.Ongoingmatch; }
      set { SetOngoingmatch(value); }
    }
    public Builder SetOngoingmatch(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasOngoingmatch = true;
      result.ongoingmatch_ = value;
      return this;
    }
    public Builder SetOngoingmatch(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasOngoingmatch = true;
      result.ongoingmatch_ = builderForValue.Build();
      return this;
    }
    public Builder MergeOngoingmatch(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasOngoingmatch &&
          result.ongoingmatch_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance) {
          result.ongoingmatch_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.CreateBuilder(result.ongoingmatch_).MergeFrom(value).BuildPartial();
      } else {
        result.ongoingmatch_ = value;
      }
      result.hasOngoingmatch = true;
      return this;
    }
    public Builder ClearOngoingmatch() {
      PrepareBuilder();
      result.hasOngoingmatch = false;
      result.ongoingmatch_ = null;
      return this;
    }
    
    public bool HasGlobalStats {
     get { return result.hasGlobalStats; }
    }
    public global::GlobalStatistics GlobalStats {
      get { return result.GlobalStats; }
      set { SetGlobalStats(value); }
    }
    public Builder SetGlobalStats(global::GlobalStatistics value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGlobalStats = true;
      result.globalStats_ = value;
      return this;
    }
    public Builder SetGlobalStats(global::GlobalStatistics.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasGlobalStats = true;
      result.globalStats_ = builderForValue.Build();
      return this;
    }
    public Builder MergeGlobalStats(global::GlobalStatistics value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasGlobalStats &&
          result.globalStats_ != global::GlobalStatistics.DefaultInstance) {
          result.globalStats_ = global::GlobalStatistics.CreateBuilder(result.globalStats_).MergeFrom(value).BuildPartial();
      } else {
        result.globalStats_ = value;
      }
      result.hasGlobalStats = true;
      return this;
    }
    public Builder ClearGlobalStats() {
      PrepareBuilder();
      result.hasGlobalStats = false;
      result.globalStats_ = null;
      return this;
    }
    
    public bool HasPenaltySeconds {
      get { return result.hasPenaltySeconds; }
    }
    [global::System.CLSCompliant(false)]
    public uint PenaltySeconds {
      get { return result.PenaltySeconds; }
      set { SetPenaltySeconds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPenaltySeconds(uint value) {
      PrepareBuilder();
      result.hasPenaltySeconds = true;
      result.penaltySeconds_ = value;
      return this;
    }
    public Builder ClearPenaltySeconds() {
      PrepareBuilder();
      result.hasPenaltySeconds = false;
      result.penaltySeconds_ = 0;
      return this;
    }
    
    public bool HasPenaltyReason {
      get { return result.hasPenaltyReason; }
    }
    [global::System.CLSCompliant(false)]
    public uint PenaltyReason {
      get { return result.PenaltyReason; }
      set { SetPenaltyReason(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPenaltyReason(uint value) {
      PrepareBuilder();
      result.hasPenaltyReason = true;
      result.penaltyReason_ = value;
      return this;
    }
    public Builder ClearPenaltyReason() {
      PrepareBuilder();
      result.hasPenaltyReason = false;
      result.penaltyReason_ = 0;
      return this;
    }
    
    public bool HasVacBanned {
      get { return result.hasVacBanned; }
    }
    public int VacBanned {
      get { return result.VacBanned; }
      set { SetVacBanned(value); }
    }
    public Builder SetVacBanned(int value) {
      PrepareBuilder();
      result.hasVacBanned = true;
      result.vacBanned_ = value;
      return this;
    }
    public Builder ClearVacBanned() {
      PrepareBuilder();
      result.hasVacBanned = false;
      result.vacBanned_ = 0;
      return this;
    }
    
    public bool HasRanking {
     get { return result.hasRanking; }
    }
    public global::PlayerRankingInfo Ranking {
      get { return result.Ranking; }
      set { SetRanking(value); }
    }
    public Builder SetRanking(global::PlayerRankingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRanking = true;
      result.ranking_ = value;
      return this;
    }
    public Builder SetRanking(global::PlayerRankingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRanking = true;
      result.ranking_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRanking(global::PlayerRankingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRanking &&
          result.ranking_ != global::PlayerRankingInfo.DefaultInstance) {
          result.ranking_ = global::PlayerRankingInfo.CreateBuilder(result.ranking_).MergeFrom(value).BuildPartial();
      } else {
        result.ranking_ = value;
      }
      result.hasRanking = true;
      return this;
    }
    public Builder ClearRanking() {
      PrepareBuilder();
      result.hasRanking = false;
      result.ranking_ = null;
      return this;
    }
    
    public bool HasCommendation {
     get { return result.hasCommendation; }
    }
    public global::PlayerCommendationInfo Commendation {
      get { return result.Commendation; }
      set { SetCommendation(value); }
    }
    public Builder SetCommendation(global::PlayerCommendationInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCommendation = true;
      result.commendation_ = value;
      return this;
    }
    public Builder SetCommendation(global::PlayerCommendationInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCommendation = true;
      result.commendation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCommendation(global::PlayerCommendationInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCommendation &&
          result.commendation_ != global::PlayerCommendationInfo.DefaultInstance) {
          result.commendation_ = global::PlayerCommendationInfo.CreateBuilder(result.commendation_).MergeFrom(value).BuildPartial();
      } else {
        result.commendation_ = value;
      }
      result.hasCommendation = true;
      return this;
    }
    public Builder ClearCommendation() {
      PrepareBuilder();
      result.hasCommendation = false;
      result.commendation_ = null;
      return this;
    }
    
    public bool HasMedals {
     get { return result.hasMedals; }
    }
    public global::PlayerMedalsInfo Medals {
      get { return result.Medals; }
      set { SetMedals(value); }
    }
    public Builder SetMedals(global::PlayerMedalsInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMedals = true;
      result.medals_ = value;
      return this;
    }
    public Builder SetMedals(global::PlayerMedalsInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMedals = true;
      result.medals_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMedals(global::PlayerMedalsInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMedals &&
          result.medals_ != global::PlayerMedalsInfo.DefaultInstance) {
          result.medals_ = global::PlayerMedalsInfo.CreateBuilder(result.medals_).MergeFrom(value).BuildPartial();
      } else {
        result.medals_ = value;
      }
      result.hasMedals = true;
      return this;
    }
    public Builder ClearMedals() {
      PrepareBuilder();
      result.hasMedals = false;
      result.medals_ = null;
      return this;
    }
    
    public bool HasMyCurrentEvent {
     get { return result.hasMyCurrentEvent; }
    }
    public global::TournamentEvent MyCurrentEvent {
      get { return result.MyCurrentEvent; }
      set { SetMyCurrentEvent(value); }
    }
    public Builder SetMyCurrentEvent(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMyCurrentEvent = true;
      result.myCurrentEvent_ = value;
      return this;
    }
    public Builder SetMyCurrentEvent(global::TournamentEvent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMyCurrentEvent = true;
      result.myCurrentEvent_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMyCurrentEvent(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMyCurrentEvent &&
          result.myCurrentEvent_ != global::TournamentEvent.DefaultInstance) {
          result.myCurrentEvent_ = global::TournamentEvent.CreateBuilder(result.myCurrentEvent_).MergeFrom(value).BuildPartial();
      } else {
        result.myCurrentEvent_ = value;
      }
      result.hasMyCurrentEvent = true;
      return this;
    }
    public Builder ClearMyCurrentEvent() {
      PrepareBuilder();
      result.hasMyCurrentEvent = false;
      result.myCurrentEvent_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::TournamentTeam> MyCurrentEventTeamsList {
      get { return PrepareBuilder().myCurrentEventTeams_; }
    }
    public int MyCurrentEventTeamsCount {
      get { return result.MyCurrentEventTeamsCount; }
    }
    public global::TournamentTeam GetMyCurrentEventTeams(int index) {
      return result.GetMyCurrentEventTeams(index);
    }
    public Builder SetMyCurrentEventTeams(int index, global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.myCurrentEventTeams_[index] = value;
      return this;
    }
    public Builder SetMyCurrentEventTeams(int index, global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.myCurrentEventTeams_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMyCurrentEventTeams(global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.myCurrentEventTeams_.Add(value);
      return this;
    }
    public Builder AddMyCurrentEventTeams(global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.myCurrentEventTeams_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMyCurrentEventTeams(scg::IEnumerable<global::TournamentTeam> values) {
      PrepareBuilder();
      result.myCurrentEventTeams_.Add(values);
      return this;
    }
    public Builder ClearMyCurrentEventTeams() {
      PrepareBuilder();
      result.myCurrentEventTeams_.Clear();
      return this;
    }
    
    public bool HasMyCurrentTeam {
     get { return result.hasMyCurrentTeam; }
    }
    public global::TournamentTeam MyCurrentTeam {
      get { return result.MyCurrentTeam; }
      set { SetMyCurrentTeam(value); }
    }
    public Builder SetMyCurrentTeam(global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMyCurrentTeam = true;
      result.myCurrentTeam_ = value;
      return this;
    }
    public Builder SetMyCurrentTeam(global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMyCurrentTeam = true;
      result.myCurrentTeam_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMyCurrentTeam(global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMyCurrentTeam &&
          result.myCurrentTeam_ != global::TournamentTeam.DefaultInstance) {
          result.myCurrentTeam_ = global::TournamentTeam.CreateBuilder(result.myCurrentTeam_).MergeFrom(value).BuildPartial();
      } else {
        result.myCurrentTeam_ = value;
      }
      result.hasMyCurrentTeam = true;
      return this;
    }
    public Builder ClearMyCurrentTeam() {
      PrepareBuilder();
      result.hasMyCurrentTeam = false;
      result.myCurrentTeam_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::TournamentEvent> MyCurrentEventStagesList {
      get { return PrepareBuilder().myCurrentEventStages_; }
    }
    public int MyCurrentEventStagesCount {
      get { return result.MyCurrentEventStagesCount; }
    }
    public global::TournamentEvent GetMyCurrentEventStages(int index) {
      return result.GetMyCurrentEventStages(index);
    }
    public Builder SetMyCurrentEventStages(int index, global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.myCurrentEventStages_[index] = value;
      return this;
    }
    public Builder SetMyCurrentEventStages(int index, global::TournamentEvent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.myCurrentEventStages_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMyCurrentEventStages(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.myCurrentEventStages_.Add(value);
      return this;
    }
    public Builder AddMyCurrentEventStages(global::TournamentEvent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.myCurrentEventStages_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMyCurrentEventStages(scg::IEnumerable<global::TournamentEvent> values) {
      PrepareBuilder();
      result.myCurrentEventStages_.Add(values);
      return this;
    }
    public Builder ClearMyCurrentEventStages() {
      PrepareBuilder();
      result.myCurrentEventStages_.Clear();
      return this;
    }
    
    public bool HasSurveyVote {
      get { return result.hasSurveyVote; }
    }
    [global::System.CLSCompliant(false)]
    public uint SurveyVote {
      get { return result.SurveyVote; }
      set { SetSurveyVote(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSurveyVote(uint value) {
      PrepareBuilder();
      result.hasSurveyVote = true;
      result.surveyVote_ = value;
      return this;
    }
    public Builder ClearSurveyVote() {
      PrepareBuilder();
      result.hasSurveyVote = false;
      result.surveyVote_ = 0;
      return this;
    }
    
    public bool HasActivity {
     get { return result.hasActivity; }
    }
    public global::AccountActivity Activity {
      get { return result.Activity; }
      set { SetActivity(value); }
    }
    public Builder SetActivity(global::AccountActivity value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasActivity = true;
      result.activity_ = value;
      return this;
    }
    public Builder SetActivity(global::AccountActivity.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasActivity = true;
      result.activity_ = builderForValue.Build();
      return this;
    }
    public Builder MergeActivity(global::AccountActivity value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasActivity &&
          result.activity_ != global::AccountActivity.DefaultInstance) {
          result.activity_ = global::AccountActivity.CreateBuilder(result.activity_).MergeFrom(value).BuildPartial();
      } else {
        result.activity_ = value;
      }
      result.hasActivity = true;
      return this;
    }
    public Builder ClearActivity() {
      PrepareBuilder();
      result.hasActivity = false;
      result.activity_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientHello() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_AccountPrivacySettings : pb::GeneratedMessage<CMsgGCCStrike15_v2_AccountPrivacySettings, CMsgGCCStrike15_v2_AccountPrivacySettings.Builder> {
  private CMsgGCCStrike15_v2_AccountPrivacySettings() { }
  private static readonly CMsgGCCStrike15_v2_AccountPrivacySettings defaultInstance = new CMsgGCCStrike15_v2_AccountPrivacySettings().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2AccountPrivacySettingsFieldNames = new string[] { "settings" };
  private static readonly uint[] _cMsgGCCStrike15V2AccountPrivacySettingsFieldTags = new uint[] { 10 };
  public static CMsgGCCStrike15_v2_AccountPrivacySettings DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_AccountPrivacySettings DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_AccountPrivacySettings ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_AccountPrivacySettings, CMsgGCCStrike15_v2_AccountPrivacySettings.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Setting : pb::GeneratedMessage<Setting, Setting.Builder> {
      private Setting() { }
      private static readonly Setting defaultInstance = new Setting().MakeReadOnly();
      private static readonly string[] _settingFieldNames = new string[] { "setting_type", "setting_value" };
      private static readonly uint[] _settingFieldTags = new uint[] { 8, 16 };
      public static Setting DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Setting DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Setting ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Setting, Setting.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_AccountPrivacySettings_Setting__FieldAccessorTable; }
      }
      
      public const int SettingTypeFieldNumber = 1;
      private bool hasSettingType;
      private uint settingType_;
      public bool HasSettingType {
        get { return hasSettingType; }
      }
      [global::System.CLSCompliant(false)]
      public uint SettingType {
        get { return settingType_; }
      }
      
      public const int SettingValueFieldNumber = 2;
      private bool hasSettingValue;
      private uint settingValue_;
      public bool HasSettingValue {
        get { return hasSettingValue; }
      }
      [global::System.CLSCompliant(false)]
      public uint SettingValue {
        get { return settingValue_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _settingFieldNames;
        if (hasSettingType) {
          output.WriteUInt32(1, field_names[0], SettingType);
        }
        if (hasSettingValue) {
          output.WriteUInt32(2, field_names[1], SettingValue);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasSettingType) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, SettingType);
          }
          if (hasSettingValue) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, SettingValue);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static Setting ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Setting ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Setting ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Setting ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Setting ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Setting ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Setting ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Setting ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Setting ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Setting ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Setting MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Setting prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Setting, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Setting cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Setting result;
        
        private Setting PrepareBuilder() {
          if (resultIsReadOnly) {
            Setting original = result;
            result = new Setting();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Setting MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.Descriptor; }
        }
        
        public override Setting DefaultInstanceForType {
          get { return global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.DefaultInstance; }
        }
        
        public override Setting BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Setting) {
            return MergeFrom((Setting) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Setting other) {
          if (other == global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSettingType) {
            SettingType = other.SettingType;
          }
          if (other.HasSettingValue) {
            SettingValue = other.SettingValue;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_settingFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _settingFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasSettingType = input.ReadUInt32(ref result.settingType_);
                break;
              }
              case 16: {
                result.hasSettingValue = input.ReadUInt32(ref result.settingValue_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSettingType {
          get { return result.hasSettingType; }
        }
        [global::System.CLSCompliant(false)]
        public uint SettingType {
          get { return result.SettingType; }
          set { SetSettingType(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetSettingType(uint value) {
          PrepareBuilder();
          result.hasSettingType = true;
          result.settingType_ = value;
          return this;
        }
        public Builder ClearSettingType() {
          PrepareBuilder();
          result.hasSettingType = false;
          result.settingType_ = 0;
          return this;
        }
        
        public bool HasSettingValue {
          get { return result.hasSettingValue; }
        }
        [global::System.CLSCompliant(false)]
        public uint SettingValue {
          get { return result.SettingValue; }
          set { SetSettingValue(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetSettingValue(uint value) {
          PrepareBuilder();
          result.hasSettingValue = true;
          result.settingValue_ = value;
          return this;
        }
        public Builder ClearSettingValue() {
          PrepareBuilder();
          result.hasSettingValue = false;
          result.settingValue_ = 0;
          return this;
        }
      }
      static Setting() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int SettingsFieldNumber = 1;
  private pbc::PopsicleList<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting> settings_ = new pbc::PopsicleList<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting>();
  public scg::IList<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting> SettingsList {
    get { return settings_; }
  }
  public int SettingsCount {
    get { return settings_.Count; }
  }
  public global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting GetSettings(int index) {
    return settings_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2AccountPrivacySettingsFieldNames;
    if (settings_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], settings_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting element in SettingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_AccountPrivacySettings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_AccountPrivacySettings MakeReadOnly() {
    settings_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_AccountPrivacySettings prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_AccountPrivacySettings, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_AccountPrivacySettings cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_AccountPrivacySettings result;
    
    private CMsgGCCStrike15_v2_AccountPrivacySettings PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_AccountPrivacySettings original = result;
        result = new CMsgGCCStrike15_v2_AccountPrivacySettings();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_AccountPrivacySettings MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_AccountPrivacySettings.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_AccountPrivacySettings DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_AccountPrivacySettings.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_AccountPrivacySettings BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_AccountPrivacySettings) {
        return MergeFrom((CMsgGCCStrike15_v2_AccountPrivacySettings) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_AccountPrivacySettings other) {
      if (other == global::CMsgGCCStrike15_v2_AccountPrivacySettings.DefaultInstance) return this;
      PrepareBuilder();
      if (other.settings_.Count != 0) {
        result.settings_.Add(other.settings_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2AccountPrivacySettingsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2AccountPrivacySettingsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.settings_, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting> SettingsList {
      get { return PrepareBuilder().settings_; }
    }
    public int SettingsCount {
      get { return result.SettingsCount; }
    }
    public global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting GetSettings(int index) {
      return result.GetSettings(index);
    }
    public Builder SetSettings(int index, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.settings_[index] = value;
      return this;
    }
    public Builder SetSettings(int index, global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.settings_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSettings(global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.settings_.Add(value);
      return this;
    }
    public Builder AddSettings(global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.settings_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSettings(scg::IEnumerable<global::CMsgGCCStrike15_v2_AccountPrivacySettings.Types.Setting> values) {
      PrepareBuilder();
      result.settings_.Add(values);
      return this;
    }
    public Builder ClearSettings() {
      PrepareBuilder();
      result.settings_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_AccountPrivacySettings() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ClientAbandonFieldNames = new string[] { "abandoned_match", "account_id", "penalty_seconds" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ClientAbandonFieldTags = new uint[] { 18, 8, 24 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int AbandonedMatchFieldNumber = 2;
  private bool hasAbandonedMatch;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve abandonedMatch_;
  public bool HasAbandonedMatch {
    get { return hasAbandonedMatch; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve AbandonedMatch {
    get { return abandonedMatch_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance; }
  }
  
  public const int PenaltySecondsFieldNumber = 3;
  private bool hasPenaltySeconds;
  private uint penaltySeconds_;
  public bool HasPenaltySeconds {
    get { return hasPenaltySeconds; }
  }
  [global::System.CLSCompliant(false)]
  public uint PenaltySeconds {
    get { return penaltySeconds_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ClientAbandonFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[1], AccountId);
    }
    if (hasAbandonedMatch) {
      output.WriteMessage(2, field_names[0], AbandonedMatch);
    }
    if (hasPenaltySeconds) {
      output.WriteUInt32(3, field_names[2], PenaltySeconds);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasAbandonedMatch) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, AbandonedMatch);
      }
      if (hasPenaltySeconds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, PenaltySeconds);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasAbandonedMatch) {
        MergeAbandonedMatch(other.AbandonedMatch);
      }
      if (other.HasPenaltySeconds) {
        PenaltySeconds = other.PenaltySeconds;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ClientAbandonFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ClientAbandonFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 18: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.CreateBuilder();
            if (result.hasAbandonedMatch) {
              subBuilder.MergeFrom(AbandonedMatch);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            AbandonedMatch = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasPenaltySeconds = input.ReadUInt32(ref result.penaltySeconds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasAbandonedMatch {
     get { return result.hasAbandonedMatch; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve AbandonedMatch {
      get { return result.AbandonedMatch; }
      set { SetAbandonedMatch(value); }
    }
    public Builder SetAbandonedMatch(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasAbandonedMatch = true;
      result.abandonedMatch_ = value;
      return this;
    }
    public Builder SetAbandonedMatch(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasAbandonedMatch = true;
      result.abandonedMatch_ = builderForValue.Build();
      return this;
    }
    public Builder MergeAbandonedMatch(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasAbandonedMatch &&
          result.abandonedMatch_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance) {
          result.abandonedMatch_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.CreateBuilder(result.abandonedMatch_).MergeFrom(value).BuildPartial();
      } else {
        result.abandonedMatch_ = value;
      }
      result.hasAbandonedMatch = true;
      return this;
    }
    public Builder ClearAbandonedMatch() {
      PrepareBuilder();
      result.hasAbandonedMatch = false;
      result.abandonedMatch_ = null;
      return this;
    }
    
    public bool HasPenaltySeconds {
      get { return result.hasPenaltySeconds; }
    }
    [global::System.CLSCompliant(false)]
    public uint PenaltySeconds {
      get { return result.PenaltySeconds; }
      set { SetPenaltySeconds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPenaltySeconds(uint value) {
      PrepareBuilder();
      result.hasPenaltySeconds = true;
      result.penaltySeconds_ = value;
      return this;
    }
    public Builder ClearPenaltySeconds() {
      PrepareBuilder();
      result.hasPenaltySeconds = false;
      result.penaltySeconds_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ClientAbandon() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingServer2GCKick : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingServer2GCKick, CMsgGCCStrike15_v2_MatchmakingServer2GCKick.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingServer2GCKick() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingServer2GCKick defaultInstance = new CMsgGCCStrike15_v2_MatchmakingServer2GCKick().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingServer2GCKickFieldNames = new string[] { "account_id", "reason", "reservation" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingServer2GCKickFieldTags = new uint[] { 8, 24, 18 };
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingServer2GCKick DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingServer2GCKick ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingServer2GCKick, CMsgGCCStrike15_v2_MatchmakingServer2GCKick.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingServer2GCKick__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int ReservationFieldNumber = 2;
  private bool hasReservation;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve reservation_;
  public bool HasReservation {
    get { return hasReservation; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
    get { return reservation_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance; }
  }
  
  public const int ReasonFieldNumber = 3;
  private bool hasReason;
  private uint reason_;
  public bool HasReason {
    get { return hasReason; }
  }
  [global::System.CLSCompliant(false)]
  public uint Reason {
    get { return reason_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingServer2GCKickFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasReservation) {
      output.WriteMessage(2, field_names[2], Reservation);
    }
    if (hasReason) {
      output.WriteUInt32(3, field_names[1], Reason);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasReservation) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, Reservation);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Reason);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingServer2GCKick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingServer2GCKick MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingServer2GCKick prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingServer2GCKick, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingServer2GCKick cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingServer2GCKick result;
    
    private CMsgGCCStrike15_v2_MatchmakingServer2GCKick PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingServer2GCKick original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingServer2GCKick();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingServer2GCKick MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServer2GCKick DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingServer2GCKick BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingServer2GCKick) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingServer2GCKick) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingServer2GCKick other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingServer2GCKick.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasReservation) {
        MergeReservation(other.Reservation);
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingServer2GCKickFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingServer2GCKickFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 18: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder();
            if (result.hasReservation) {
              subBuilder.MergeFrom(Reservation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Reservation = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasReason = input.ReadUInt32(ref result.reason_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasReservation {
     get { return result.hasReservation; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve Reservation {
      get { return result.Reservation; }
      set { SetReservation(value); }
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = value;
      return this;
    }
    public Builder SetReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasReservation = true;
      result.reservation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasReservation &&
          result.reservation_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.DefaultInstance) {
          result.reservation_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ServerReserve.CreateBuilder(result.reservation_).MergeFrom(value).BuildPartial();
      } else {
        result.reservation_ = value;
      }
      result.hasReservation = true;
      return this;
    }
    public Builder ClearReservation() {
      PrepareBuilder();
      result.hasReservation = false;
      result.reservation_ = null;
      return this;
    }
    
    public bool HasReason {
      get { return result.hasReason; }
    }
    [global::System.CLSCompliant(false)]
    public uint Reason {
      get { return result.Reason; }
      set { SetReason(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReason(uint value) {
      PrepareBuilder();
      result.hasReason = true;
      result.reason_ = value;
      return this;
    }
    public Builder ClearReason() {
      PrepareBuilder();
      result.hasReason = false;
      result.reason_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingServer2GCKick() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_MatchmakingLockedInMatch : pb::GeneratedMessage<CDataGCCStrike15_v2_MatchmakingLockedInMatch, CDataGCCStrike15_v2_MatchmakingLockedInMatch.Builder> {
  private CDataGCCStrike15_v2_MatchmakingLockedInMatch() { }
  private static readonly CDataGCCStrike15_v2_MatchmakingLockedInMatch defaultInstance = new CDataGCCStrike15_v2_MatchmakingLockedInMatch().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2MatchmakingLockedInMatchFieldNames = new string[] { "client_reservation", "last_round_stats_temp", "rtime32_server_info", "server_stats" };
  private static readonly uint[] _cDataGCCStrike15V2MatchmakingLockedInMatchFieldTags = new uint[] { 10, 34, 24, 18 };
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_MatchmakingLockedInMatch DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_MatchmakingLockedInMatch ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_MatchmakingLockedInMatch, CDataGCCStrike15_v2_MatchmakingLockedInMatch.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_MatchmakingLockedInMatch__FieldAccessorTable; }
  }
  
  public const int ClientReservationFieldNumber = 1;
  private bool hasClientReservation;
  private global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve clientReservation_;
  public bool HasClientReservation {
    get { return hasClientReservation; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ClientReservation {
    get { return clientReservation_ ?? global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance; }
  }
  
  public const int ServerStatsFieldNumber = 2;
  private bool hasServerStats;
  private global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats serverStats_;
  public bool HasServerStats {
    get { return hasServerStats; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats ServerStats {
    get { return serverStats_ ?? global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance; }
  }
  
  public const int Rtime32ServerInfoFieldNumber = 3;
  private bool hasRtime32ServerInfo;
  private uint rtime32ServerInfo_;
  public bool HasRtime32ServerInfo {
    get { return hasRtime32ServerInfo; }
  }
  [global::System.CLSCompliant(false)]
  public uint Rtime32ServerInfo {
    get { return rtime32ServerInfo_; }
  }
  
  public const int LastRoundStatsTempFieldNumber = 4;
  private bool hasLastRoundStatsTemp;
  private global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats lastRoundStatsTemp_;
  public bool HasLastRoundStatsTemp {
    get { return hasLastRoundStatsTemp; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats LastRoundStatsTemp {
    get { return lastRoundStatsTemp_ ?? global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2MatchmakingLockedInMatchFieldNames;
    if (hasClientReservation) {
      output.WriteMessage(1, field_names[0], ClientReservation);
    }
    if (hasServerStats) {
      output.WriteMessage(2, field_names[3], ServerStats);
    }
    if (hasRtime32ServerInfo) {
      output.WriteUInt32(3, field_names[2], Rtime32ServerInfo);
    }
    if (hasLastRoundStatsTemp) {
      output.WriteMessage(4, field_names[1], LastRoundStatsTemp);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasClientReservation) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, ClientReservation);
      }
      if (hasServerStats) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, ServerStats);
      }
      if (hasRtime32ServerInfo) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Rtime32ServerInfo);
      }
      if (hasLastRoundStatsTemp) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, LastRoundStatsTemp);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchmakingLockedInMatch ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_MatchmakingLockedInMatch MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_MatchmakingLockedInMatch prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_MatchmakingLockedInMatch, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_MatchmakingLockedInMatch cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_MatchmakingLockedInMatch result;
    
    private CDataGCCStrike15_v2_MatchmakingLockedInMatch PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_MatchmakingLockedInMatch original = result;
        result = new CDataGCCStrike15_v2_MatchmakingLockedInMatch();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_MatchmakingLockedInMatch MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_MatchmakingLockedInMatch.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_MatchmakingLockedInMatch DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_MatchmakingLockedInMatch.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_MatchmakingLockedInMatch BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_MatchmakingLockedInMatch) {
        return MergeFrom((CDataGCCStrike15_v2_MatchmakingLockedInMatch) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_MatchmakingLockedInMatch other) {
      if (other == global::CDataGCCStrike15_v2_MatchmakingLockedInMatch.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasClientReservation) {
        MergeClientReservation(other.ClientReservation);
      }
      if (other.HasServerStats) {
        MergeServerStats(other.ServerStats);
      }
      if (other.HasRtime32ServerInfo) {
        Rtime32ServerInfo = other.Rtime32ServerInfo;
      }
      if (other.HasLastRoundStatsTemp) {
        MergeLastRoundStatsTemp(other.LastRoundStatsTemp);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2MatchmakingLockedInMatchFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2MatchmakingLockedInMatchFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.CreateBuilder();
            if (result.hasClientReservation) {
              subBuilder.MergeFrom(ClientReservation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ClientReservation = subBuilder.BuildPartial();
            break;
          }
          case 18: {
            global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder();
            if (result.hasServerStats) {
              subBuilder.MergeFrom(ServerStats);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            ServerStats = subBuilder.BuildPartial();
            break;
          }
          case 24: {
            result.hasRtime32ServerInfo = input.ReadUInt32(ref result.rtime32ServerInfo_);
            break;
          }
          case 34: {
            global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder();
            if (result.hasLastRoundStatsTemp) {
              subBuilder.MergeFrom(LastRoundStatsTemp);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            LastRoundStatsTemp = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasClientReservation {
     get { return result.hasClientReservation; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve ClientReservation {
      get { return result.ClientReservation; }
      set { SetClientReservation(value); }
    }
    public Builder SetClientReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasClientReservation = true;
      result.clientReservation_ = value;
      return this;
    }
    public Builder SetClientReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasClientReservation = true;
      result.clientReservation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeClientReservation(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasClientReservation &&
          result.clientReservation_ != global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.DefaultInstance) {
          result.clientReservation_ = global::CMsgGCCStrike15_v2_MatchmakingGC2ClientReserve.CreateBuilder(result.clientReservation_).MergeFrom(value).BuildPartial();
      } else {
        result.clientReservation_ = value;
      }
      result.hasClientReservation = true;
      return this;
    }
    public Builder ClearClientReservation() {
      PrepareBuilder();
      result.hasClientReservation = false;
      result.clientReservation_ = null;
      return this;
    }
    
    public bool HasServerStats {
     get { return result.hasServerStats; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats ServerStats {
      get { return result.ServerStats; }
      set { SetServerStats(value); }
    }
    public Builder SetServerStats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasServerStats = true;
      result.serverStats_ = value;
      return this;
    }
    public Builder SetServerStats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasServerStats = true;
      result.serverStats_ = builderForValue.Build();
      return this;
    }
    public Builder MergeServerStats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasServerStats &&
          result.serverStats_ != global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance) {
          result.serverStats_ = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder(result.serverStats_).MergeFrom(value).BuildPartial();
      } else {
        result.serverStats_ = value;
      }
      result.hasServerStats = true;
      return this;
    }
    public Builder ClearServerStats() {
      PrepareBuilder();
      result.hasServerStats = false;
      result.serverStats_ = null;
      return this;
    }
    
    public bool HasRtime32ServerInfo {
      get { return result.hasRtime32ServerInfo; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rtime32ServerInfo {
      get { return result.Rtime32ServerInfo; }
      set { SetRtime32ServerInfo(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRtime32ServerInfo(uint value) {
      PrepareBuilder();
      result.hasRtime32ServerInfo = true;
      result.rtime32ServerInfo_ = value;
      return this;
    }
    public Builder ClearRtime32ServerInfo() {
      PrepareBuilder();
      result.hasRtime32ServerInfo = false;
      result.rtime32ServerInfo_ = 0;
      return this;
    }
    
    public bool HasLastRoundStatsTemp {
     get { return result.hasLastRoundStatsTemp; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats LastRoundStatsTemp {
      get { return result.LastRoundStatsTemp; }
      set { SetLastRoundStatsTemp(value); }
    }
    public Builder SetLastRoundStatsTemp(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasLastRoundStatsTemp = true;
      result.lastRoundStatsTemp_ = value;
      return this;
    }
    public Builder SetLastRoundStatsTemp(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasLastRoundStatsTemp = true;
      result.lastRoundStatsTemp_ = builderForValue.Build();
      return this;
    }
    public Builder MergeLastRoundStatsTemp(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasLastRoundStatsTemp &&
          result.lastRoundStatsTemp_ != global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance) {
          result.lastRoundStatsTemp_ = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder(result.lastRoundStatsTemp_).MergeFrom(value).BuildPartial();
      } else {
        result.lastRoundStatsTemp_ = value;
      }
      result.hasLastRoundStatsTemp = true;
      return this;
    }
    public Builder ClearLastRoundStatsTemp() {
      PrepareBuilder();
      result.hasLastRoundStatsTemp = false;
      result.lastRoundStatsTemp_ = null;
      return this;
    }
  }
  static CDataGCCStrike15_v2_MatchmakingLockedInMatch() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate defaultInstance = new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingGC2ServerRankUpdateFieldNames = new string[] { "match_id", "rankings" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingGC2ServerRankUpdateFieldTags = new uint[] { 16, 10 };
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate__FieldAccessorTable; }
  }
  
  public const int RankingsFieldNumber = 1;
  private pbc::PopsicleList<global::PlayerRankingInfo> rankings_ = new pbc::PopsicleList<global::PlayerRankingInfo>();
  public scg::IList<global::PlayerRankingInfo> RankingsList {
    get { return rankings_; }
  }
  public int RankingsCount {
    get { return rankings_.Count; }
  }
  public global::PlayerRankingInfo GetRankings(int index) {
    return rankings_[index];
  }
  
  public const int MatchIdFieldNumber = 2;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingGC2ServerRankUpdateFieldNames;
    if (rankings_.Count > 0) {
      output.WriteMessageArray(1, field_names[1], rankings_);
    }
    if (hasMatchId) {
      output.WriteUInt64(2, field_names[0], MatchId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::PlayerRankingInfo element in RankingsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, MatchId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate MakeReadOnly() {
    rankings_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate result;
    
    private CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.rankings_.Count != 0) {
        result.rankings_.Add(other.rankings_);
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingGC2ServerRankUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingGC2ServerRankUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.rankings_, global::PlayerRankingInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 16: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::PlayerRankingInfo> RankingsList {
      get { return PrepareBuilder().rankings_; }
    }
    public int RankingsCount {
      get { return result.RankingsCount; }
    }
    public global::PlayerRankingInfo GetRankings(int index) {
      return result.GetRankings(index);
    }
    public Builder SetRankings(int index, global::PlayerRankingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rankings_[index] = value;
      return this;
    }
    public Builder SetRankings(int index, global::PlayerRankingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rankings_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddRankings(global::PlayerRankingInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.rankings_.Add(value);
      return this;
    }
    public Builder AddRankings(global::PlayerRankingInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.rankings_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeRankings(scg::IEnumerable<global::PlayerRankingInfo> values) {
      PrepareBuilder();
      result.rankings_.Add(values);
      return this;
    }
    public Builder ClearRankings() {
      PrepareBuilder();
      result.rankings_.Clear();
      return this;
    }
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingGC2ServerRankUpdate() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.Builder> {
  private CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() { }
  private static readonly CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate defaultInstance = new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdateFieldNames = new string[] { "main_post_url" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdateFieldTags = new uint[] { 10 };
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate__FieldAccessorTable; }
  }
  
  public const int MainPostUrlFieldNumber = 1;
  private bool hasMainPostUrl;
  private string mainPostUrl_ = "";
  public bool HasMainPostUrl {
    get { return hasMainPostUrl; }
  }
  public string MainPostUrl {
    get { return mainPostUrl_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdateFieldNames;
    if (hasMainPostUrl) {
      output.WriteString(1, field_names[0], MainPostUrl);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMainPostUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(1, MainPostUrl);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate result;
    
    private CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate original = result;
        result = new CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate other) {
      if (other == global::CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMainPostUrl) {
        MainPostUrl = other.MainPostUrl;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchmakingOperator2GCBlogUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasMainPostUrl = input.ReadString(ref result.mainPostUrl_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMainPostUrl {
      get { return result.hasMainPostUrl; }
    }
    public string MainPostUrl {
      get { return result.MainPostUrl; }
      set { SetMainPostUrl(value); }
    }
    public Builder SetMainPostUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMainPostUrl = true;
      result.mainPostUrl_ = value;
      return this;
    }
    public Builder ClearMainPostUrl() {
      PrepareBuilder();
      result.hasMainPostUrl = false;
      result.mainPostUrl_ = "";
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchmakingOperator2GCBlogUpdate() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ServerNotificationForUserPenalty : pb::GeneratedMessage<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.Builder> {
  private CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() { }
  private static readonly CMsgGCCStrike15_v2_ServerNotificationForUserPenalty defaultInstance = new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ServerNotificationForUserPenaltyFieldNames = new string[] { "account_id", "reason", "seconds" };
  private static readonly uint[] _cMsgGCCStrike15V2ServerNotificationForUserPenaltyFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ServerNotificationForUserPenalty DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ServerNotificationForUserPenalty__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int ReasonFieldNumber = 2;
  private bool hasReason;
  private uint reason_;
  public bool HasReason {
    get { return hasReason; }
  }
  [global::System.CLSCompliant(false)]
  public uint Reason {
    get { return reason_; }
  }
  
  public const int SecondsFieldNumber = 3;
  private bool hasSeconds;
  private uint seconds_;
  public bool HasSeconds {
    get { return hasSeconds; }
  }
  [global::System.CLSCompliant(false)]
  public uint Seconds {
    get { return seconds_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ServerNotificationForUserPenaltyFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasReason) {
      output.WriteUInt32(2, field_names[1], Reason);
    }
    if (hasSeconds) {
      output.WriteUInt32(3, field_names[2], Seconds);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasReason) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Reason);
      }
      if (hasSeconds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Seconds);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ServerNotificationForUserPenalty MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ServerNotificationForUserPenalty, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ServerNotificationForUserPenalty result;
    
    private CMsgGCCStrike15_v2_ServerNotificationForUserPenalty PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ServerNotificationForUserPenalty original = result;
        result = new CMsgGCCStrike15_v2_ServerNotificationForUserPenalty();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ServerNotificationForUserPenalty MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ServerNotificationForUserPenalty DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ServerNotificationForUserPenalty BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ServerNotificationForUserPenalty) {
        return MergeFrom((CMsgGCCStrike15_v2_ServerNotificationForUserPenalty) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ServerNotificationForUserPenalty other) {
      if (other == global::CMsgGCCStrike15_v2_ServerNotificationForUserPenalty.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasReason) {
        Reason = other.Reason;
      }
      if (other.HasSeconds) {
        Seconds = other.Seconds;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ServerNotificationForUserPenaltyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ServerNotificationForUserPenaltyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 16: {
            result.hasReason = input.ReadUInt32(ref result.reason_);
            break;
          }
          case 24: {
            result.hasSeconds = input.ReadUInt32(ref result.seconds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasReason {
      get { return result.hasReason; }
    }
    [global::System.CLSCompliant(false)]
    public uint Reason {
      get { return result.Reason; }
      set { SetReason(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReason(uint value) {
      PrepareBuilder();
      result.hasReason = true;
      result.reason_ = value;
      return this;
    }
    public Builder ClearReason() {
      PrepareBuilder();
      result.hasReason = false;
      result.reason_ = 0;
      return this;
    }
    
    public bool HasSeconds {
      get { return result.hasSeconds; }
    }
    [global::System.CLSCompliant(false)]
    public uint Seconds {
      get { return result.Seconds; }
      set { SetSeconds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSeconds(uint value) {
      PrepareBuilder();
      result.hasSeconds = true;
      result.seconds_ = value;
      return this;
    }
    public Builder ClearSeconds() {
      PrepareBuilder();
      result.hasSeconds = false;
      result.seconds_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ServerNotificationForUserPenalty() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientReportPlayer : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientReportPlayer, CMsgGCCStrike15_v2_ClientReportPlayer.Builder> {
  private CMsgGCCStrike15_v2_ClientReportPlayer() { }
  private static readonly CMsgGCCStrike15_v2_ClientReportPlayer defaultInstance = new CMsgGCCStrike15_v2_ClientReportPlayer().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientReportPlayerFieldNames = new string[] { "account_id", "match_id", "rpt_aimbot", "rpt_speedhack", "rpt_teamharm", "rpt_textabuse", "rpt_voiceabuse", "rpt_wallhack" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientReportPlayerFieldTags = new uint[] { 8, 64, 16, 32, 40, 48, 56, 24 };
  public static CMsgGCCStrike15_v2_ClientReportPlayer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientReportPlayer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientReportPlayer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientReportPlayer, CMsgGCCStrike15_v2_ClientReportPlayer.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientReportPlayer__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int RptAimbotFieldNumber = 2;
  private bool hasRptAimbot;
  private uint rptAimbot_;
  public bool HasRptAimbot {
    get { return hasRptAimbot; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptAimbot {
    get { return rptAimbot_; }
  }
  
  public const int RptWallhackFieldNumber = 3;
  private bool hasRptWallhack;
  private uint rptWallhack_;
  public bool HasRptWallhack {
    get { return hasRptWallhack; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptWallhack {
    get { return rptWallhack_; }
  }
  
  public const int RptSpeedhackFieldNumber = 4;
  private bool hasRptSpeedhack;
  private uint rptSpeedhack_;
  public bool HasRptSpeedhack {
    get { return hasRptSpeedhack; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptSpeedhack {
    get { return rptSpeedhack_; }
  }
  
  public const int RptTeamharmFieldNumber = 5;
  private bool hasRptTeamharm;
  private uint rptTeamharm_;
  public bool HasRptTeamharm {
    get { return hasRptTeamharm; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptTeamharm {
    get { return rptTeamharm_; }
  }
  
  public const int RptTextabuseFieldNumber = 6;
  private bool hasRptTextabuse;
  private uint rptTextabuse_;
  public bool HasRptTextabuse {
    get { return hasRptTextabuse; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptTextabuse {
    get { return rptTextabuse_; }
  }
  
  public const int RptVoiceabuseFieldNumber = 7;
  private bool hasRptVoiceabuse;
  private uint rptVoiceabuse_;
  public bool HasRptVoiceabuse {
    get { return hasRptVoiceabuse; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptVoiceabuse {
    get { return rptVoiceabuse_; }
  }
  
  public const int MatchIdFieldNumber = 8;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientReportPlayerFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasRptAimbot) {
      output.WriteUInt32(2, field_names[2], RptAimbot);
    }
    if (hasRptWallhack) {
      output.WriteUInt32(3, field_names[7], RptWallhack);
    }
    if (hasRptSpeedhack) {
      output.WriteUInt32(4, field_names[3], RptSpeedhack);
    }
    if (hasRptTeamharm) {
      output.WriteUInt32(5, field_names[4], RptTeamharm);
    }
    if (hasRptTextabuse) {
      output.WriteUInt32(6, field_names[5], RptTextabuse);
    }
    if (hasRptVoiceabuse) {
      output.WriteUInt32(7, field_names[6], RptVoiceabuse);
    }
    if (hasMatchId) {
      output.WriteUInt64(8, field_names[1], MatchId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasRptAimbot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RptAimbot);
      }
      if (hasRptWallhack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, RptWallhack);
      }
      if (hasRptSpeedhack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, RptSpeedhack);
      }
      if (hasRptTeamharm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RptTeamharm);
      }
      if (hasRptTextabuse) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, RptTextabuse);
      }
      if (hasRptVoiceabuse) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, RptVoiceabuse);
      }
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, MatchId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientReportPlayer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientReportPlayer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientReportPlayer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientReportPlayer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientReportPlayer result;
    
    private CMsgGCCStrike15_v2_ClientReportPlayer PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientReportPlayer original = result;
        result = new CMsgGCCStrike15_v2_ClientReportPlayer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientReportPlayer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientReportPlayer.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientReportPlayer DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientReportPlayer.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientReportPlayer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientReportPlayer) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientReportPlayer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientReportPlayer other) {
      if (other == global::CMsgGCCStrike15_v2_ClientReportPlayer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasRptAimbot) {
        RptAimbot = other.RptAimbot;
      }
      if (other.HasRptWallhack) {
        RptWallhack = other.RptWallhack;
      }
      if (other.HasRptSpeedhack) {
        RptSpeedhack = other.RptSpeedhack;
      }
      if (other.HasRptTeamharm) {
        RptTeamharm = other.RptTeamharm;
      }
      if (other.HasRptTextabuse) {
        RptTextabuse = other.RptTextabuse;
      }
      if (other.HasRptVoiceabuse) {
        RptVoiceabuse = other.RptVoiceabuse;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientReportPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientReportPlayerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 16: {
            result.hasRptAimbot = input.ReadUInt32(ref result.rptAimbot_);
            break;
          }
          case 24: {
            result.hasRptWallhack = input.ReadUInt32(ref result.rptWallhack_);
            break;
          }
          case 32: {
            result.hasRptSpeedhack = input.ReadUInt32(ref result.rptSpeedhack_);
            break;
          }
          case 40: {
            result.hasRptTeamharm = input.ReadUInt32(ref result.rptTeamharm_);
            break;
          }
          case 48: {
            result.hasRptTextabuse = input.ReadUInt32(ref result.rptTextabuse_);
            break;
          }
          case 56: {
            result.hasRptVoiceabuse = input.ReadUInt32(ref result.rptVoiceabuse_);
            break;
          }
          case 64: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasRptAimbot {
      get { return result.hasRptAimbot; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptAimbot {
      get { return result.RptAimbot; }
      set { SetRptAimbot(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptAimbot(uint value) {
      PrepareBuilder();
      result.hasRptAimbot = true;
      result.rptAimbot_ = value;
      return this;
    }
    public Builder ClearRptAimbot() {
      PrepareBuilder();
      result.hasRptAimbot = false;
      result.rptAimbot_ = 0;
      return this;
    }
    
    public bool HasRptWallhack {
      get { return result.hasRptWallhack; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptWallhack {
      get { return result.RptWallhack; }
      set { SetRptWallhack(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptWallhack(uint value) {
      PrepareBuilder();
      result.hasRptWallhack = true;
      result.rptWallhack_ = value;
      return this;
    }
    public Builder ClearRptWallhack() {
      PrepareBuilder();
      result.hasRptWallhack = false;
      result.rptWallhack_ = 0;
      return this;
    }
    
    public bool HasRptSpeedhack {
      get { return result.hasRptSpeedhack; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptSpeedhack {
      get { return result.RptSpeedhack; }
      set { SetRptSpeedhack(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptSpeedhack(uint value) {
      PrepareBuilder();
      result.hasRptSpeedhack = true;
      result.rptSpeedhack_ = value;
      return this;
    }
    public Builder ClearRptSpeedhack() {
      PrepareBuilder();
      result.hasRptSpeedhack = false;
      result.rptSpeedhack_ = 0;
      return this;
    }
    
    public bool HasRptTeamharm {
      get { return result.hasRptTeamharm; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptTeamharm {
      get { return result.RptTeamharm; }
      set { SetRptTeamharm(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptTeamharm(uint value) {
      PrepareBuilder();
      result.hasRptTeamharm = true;
      result.rptTeamharm_ = value;
      return this;
    }
    public Builder ClearRptTeamharm() {
      PrepareBuilder();
      result.hasRptTeamharm = false;
      result.rptTeamharm_ = 0;
      return this;
    }
    
    public bool HasRptTextabuse {
      get { return result.hasRptTextabuse; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptTextabuse {
      get { return result.RptTextabuse; }
      set { SetRptTextabuse(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptTextabuse(uint value) {
      PrepareBuilder();
      result.hasRptTextabuse = true;
      result.rptTextabuse_ = value;
      return this;
    }
    public Builder ClearRptTextabuse() {
      PrepareBuilder();
      result.hasRptTextabuse = false;
      result.rptTextabuse_ = 0;
      return this;
    }
    
    public bool HasRptVoiceabuse {
      get { return result.hasRptVoiceabuse; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptVoiceabuse {
      get { return result.RptVoiceabuse; }
      set { SetRptVoiceabuse(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptVoiceabuse(uint value) {
      PrepareBuilder();
      result.hasRptVoiceabuse = true;
      result.rptVoiceabuse_ = value;
      return this;
    }
    public Builder ClearRptVoiceabuse() {
      PrepareBuilder();
      result.hasRptVoiceabuse = false;
      result.rptVoiceabuse_ = 0;
      return this;
    }
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientReportPlayer() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientCommendPlayer : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientCommendPlayer, CMsgGCCStrike15_v2_ClientCommendPlayer.Builder> {
  private CMsgGCCStrike15_v2_ClientCommendPlayer() { }
  private static readonly CMsgGCCStrike15_v2_ClientCommendPlayer defaultInstance = new CMsgGCCStrike15_v2_ClientCommendPlayer().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientCommendPlayerFieldNames = new string[] { "account_id", "commendation", "match_id", "tokens" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientCommendPlayerFieldTags = new uint[] { 8, 74, 64, 80 };
  public static CMsgGCCStrike15_v2_ClientCommendPlayer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientCommendPlayer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientCommendPlayer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientCommendPlayer, CMsgGCCStrike15_v2_ClientCommendPlayer.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientCommendPlayer__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int MatchIdFieldNumber = 8;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public const int CommendationFieldNumber = 9;
  private bool hasCommendation;
  private global::PlayerCommendationInfo commendation_;
  public bool HasCommendation {
    get { return hasCommendation; }
  }
  public global::PlayerCommendationInfo Commendation {
    get { return commendation_ ?? global::PlayerCommendationInfo.DefaultInstance; }
  }
  
  public const int TokensFieldNumber = 10;
  private bool hasTokens;
  private uint tokens_;
  public bool HasTokens {
    get { return hasTokens; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tokens {
    get { return tokens_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientCommendPlayerFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasMatchId) {
      output.WriteUInt64(8, field_names[2], MatchId);
    }
    if (hasCommendation) {
      output.WriteMessage(9, field_names[1], Commendation);
    }
    if (hasTokens) {
      output.WriteUInt32(10, field_names[3], Tokens);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, MatchId);
      }
      if (hasCommendation) {
        size += pb::CodedOutputStream.ComputeMessageSize(9, Commendation);
      }
      if (hasTokens) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Tokens);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientCommendPlayer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientCommendPlayer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientCommendPlayer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientCommendPlayer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientCommendPlayer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientCommendPlayer result;
    
    private CMsgGCCStrike15_v2_ClientCommendPlayer PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientCommendPlayer original = result;
        result = new CMsgGCCStrike15_v2_ClientCommendPlayer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientCommendPlayer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientCommendPlayer.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientCommendPlayer DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientCommendPlayer.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientCommendPlayer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientCommendPlayer) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientCommendPlayer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientCommendPlayer other) {
      if (other == global::CMsgGCCStrike15_v2_ClientCommendPlayer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasCommendation) {
        MergeCommendation(other.Commendation);
      }
      if (other.HasTokens) {
        Tokens = other.Tokens;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientCommendPlayerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientCommendPlayerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 64: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
          case 74: {
            global::PlayerCommendationInfo.Builder subBuilder = global::PlayerCommendationInfo.CreateBuilder();
            if (result.hasCommendation) {
              subBuilder.MergeFrom(Commendation);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Commendation = subBuilder.BuildPartial();
            break;
          }
          case 80: {
            result.hasTokens = input.ReadUInt32(ref result.tokens_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
    
    public bool HasCommendation {
     get { return result.hasCommendation; }
    }
    public global::PlayerCommendationInfo Commendation {
      get { return result.Commendation; }
      set { SetCommendation(value); }
    }
    public Builder SetCommendation(global::PlayerCommendationInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCommendation = true;
      result.commendation_ = value;
      return this;
    }
    public Builder SetCommendation(global::PlayerCommendationInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasCommendation = true;
      result.commendation_ = builderForValue.Build();
      return this;
    }
    public Builder MergeCommendation(global::PlayerCommendationInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasCommendation &&
          result.commendation_ != global::PlayerCommendationInfo.DefaultInstance) {
          result.commendation_ = global::PlayerCommendationInfo.CreateBuilder(result.commendation_).MergeFrom(value).BuildPartial();
      } else {
        result.commendation_ = value;
      }
      result.hasCommendation = true;
      return this;
    }
    public Builder ClearCommendation() {
      PrepareBuilder();
      result.hasCommendation = false;
      result.commendation_ = null;
      return this;
    }
    
    public bool HasTokens {
      get { return result.hasTokens; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tokens {
      get { return result.Tokens; }
      set { SetTokens(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTokens(uint value) {
      PrepareBuilder();
      result.hasTokens = true;
      result.tokens_ = value;
      return this;
    }
    public Builder ClearTokens() {
      PrepareBuilder();
      result.hasTokens = false;
      result.tokens_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientCommendPlayer() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientReportServer : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientReportServer, CMsgGCCStrike15_v2_ClientReportServer.Builder> {
  private CMsgGCCStrike15_v2_ClientReportServer() { }
  private static readonly CMsgGCCStrike15_v2_ClientReportServer defaultInstance = new CMsgGCCStrike15_v2_ClientReportServer().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientReportServerFieldNames = new string[] { "match_id", "rpt_abusivemodels", "rpt_badmotd", "rpt_listingabuse", "rpt_poorperf" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientReportServerFieldTags = new uint[] { 64, 16, 24, 32, 8 };
  public static CMsgGCCStrike15_v2_ClientReportServer DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientReportServer DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientReportServer ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientReportServer__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientReportServer, CMsgGCCStrike15_v2_ClientReportServer.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientReportServer__FieldAccessorTable; }
  }
  
  public const int RptPoorperfFieldNumber = 1;
  private bool hasRptPoorperf;
  private uint rptPoorperf_;
  public bool HasRptPoorperf {
    get { return hasRptPoorperf; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptPoorperf {
    get { return rptPoorperf_; }
  }
  
  public const int RptAbusivemodelsFieldNumber = 2;
  private bool hasRptAbusivemodels;
  private uint rptAbusivemodels_;
  public bool HasRptAbusivemodels {
    get { return hasRptAbusivemodels; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptAbusivemodels {
    get { return rptAbusivemodels_; }
  }
  
  public const int RptBadmotdFieldNumber = 3;
  private bool hasRptBadmotd;
  private uint rptBadmotd_;
  public bool HasRptBadmotd {
    get { return hasRptBadmotd; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptBadmotd {
    get { return rptBadmotd_; }
  }
  
  public const int RptListingabuseFieldNumber = 4;
  private bool hasRptListingabuse;
  private uint rptListingabuse_;
  public bool HasRptListingabuse {
    get { return hasRptListingabuse; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptListingabuse {
    get { return rptListingabuse_; }
  }
  
  public const int MatchIdFieldNumber = 8;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientReportServerFieldNames;
    if (hasRptPoorperf) {
      output.WriteUInt32(1, field_names[4], RptPoorperf);
    }
    if (hasRptAbusivemodels) {
      output.WriteUInt32(2, field_names[1], RptAbusivemodels);
    }
    if (hasRptBadmotd) {
      output.WriteUInt32(3, field_names[2], RptBadmotd);
    }
    if (hasRptListingabuse) {
      output.WriteUInt32(4, field_names[3], RptListingabuse);
    }
    if (hasMatchId) {
      output.WriteUInt64(8, field_names[0], MatchId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRptPoorperf) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RptPoorperf);
      }
      if (hasRptAbusivemodels) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RptAbusivemodels);
      }
      if (hasRptBadmotd) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, RptBadmotd);
      }
      if (hasRptListingabuse) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, RptListingabuse);
      }
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(8, MatchId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportServer ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientReportServer MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientReportServer prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientReportServer, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientReportServer cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientReportServer result;
    
    private CMsgGCCStrike15_v2_ClientReportServer PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientReportServer original = result;
        result = new CMsgGCCStrike15_v2_ClientReportServer();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientReportServer MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientReportServer.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientReportServer DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientReportServer.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientReportServer BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientReportServer) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientReportServer) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientReportServer other) {
      if (other == global::CMsgGCCStrike15_v2_ClientReportServer.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRptPoorperf) {
        RptPoorperf = other.RptPoorperf;
      }
      if (other.HasRptAbusivemodels) {
        RptAbusivemodels = other.RptAbusivemodels;
      }
      if (other.HasRptBadmotd) {
        RptBadmotd = other.RptBadmotd;
      }
      if (other.HasRptListingabuse) {
        RptListingabuse = other.RptListingabuse;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientReportServerFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientReportServerFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRptPoorperf = input.ReadUInt32(ref result.rptPoorperf_);
            break;
          }
          case 16: {
            result.hasRptAbusivemodels = input.ReadUInt32(ref result.rptAbusivemodels_);
            break;
          }
          case 24: {
            result.hasRptBadmotd = input.ReadUInt32(ref result.rptBadmotd_);
            break;
          }
          case 32: {
            result.hasRptListingabuse = input.ReadUInt32(ref result.rptListingabuse_);
            break;
          }
          case 64: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRptPoorperf {
      get { return result.hasRptPoorperf; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptPoorperf {
      get { return result.RptPoorperf; }
      set { SetRptPoorperf(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptPoorperf(uint value) {
      PrepareBuilder();
      result.hasRptPoorperf = true;
      result.rptPoorperf_ = value;
      return this;
    }
    public Builder ClearRptPoorperf() {
      PrepareBuilder();
      result.hasRptPoorperf = false;
      result.rptPoorperf_ = 0;
      return this;
    }
    
    public bool HasRptAbusivemodels {
      get { return result.hasRptAbusivemodels; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptAbusivemodels {
      get { return result.RptAbusivemodels; }
      set { SetRptAbusivemodels(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptAbusivemodels(uint value) {
      PrepareBuilder();
      result.hasRptAbusivemodels = true;
      result.rptAbusivemodels_ = value;
      return this;
    }
    public Builder ClearRptAbusivemodels() {
      PrepareBuilder();
      result.hasRptAbusivemodels = false;
      result.rptAbusivemodels_ = 0;
      return this;
    }
    
    public bool HasRptBadmotd {
      get { return result.hasRptBadmotd; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptBadmotd {
      get { return result.RptBadmotd; }
      set { SetRptBadmotd(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptBadmotd(uint value) {
      PrepareBuilder();
      result.hasRptBadmotd = true;
      result.rptBadmotd_ = value;
      return this;
    }
    public Builder ClearRptBadmotd() {
      PrepareBuilder();
      result.hasRptBadmotd = false;
      result.rptBadmotd_ = 0;
      return this;
    }
    
    public bool HasRptListingabuse {
      get { return result.hasRptListingabuse; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptListingabuse {
      get { return result.RptListingabuse; }
      set { SetRptListingabuse(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptListingabuse(uint value) {
      PrepareBuilder();
      result.hasRptListingabuse = true;
      result.rptListingabuse_ = value;
      return this;
    }
    public Builder ClearRptListingabuse() {
      PrepareBuilder();
      result.hasRptListingabuse = false;
      result.rptListingabuse_ = 0;
      return this;
    }
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientReportServer() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientReportResponse : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientReportResponse, CMsgGCCStrike15_v2_ClientReportResponse.Builder> {
  private CMsgGCCStrike15_v2_ClientReportResponse() { }
  private static readonly CMsgGCCStrike15_v2_ClientReportResponse defaultInstance = new CMsgGCCStrike15_v2_ClientReportResponse().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientReportResponseFieldNames = new string[] { "account_id", "confirmation_id", "response_result", "response_type", "server_ip", "tokens" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientReportResponseFieldTags = new uint[] { 16, 8, 40, 32, 24, 48 };
  public static CMsgGCCStrike15_v2_ClientReportResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientReportResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientReportResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientReportResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientReportResponse, CMsgGCCStrike15_v2_ClientReportResponse.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientReportResponse__FieldAccessorTable; }
  }
  
  public const int ConfirmationIdFieldNumber = 1;
  private bool hasConfirmationId;
  private ulong confirmationId_;
  public bool HasConfirmationId {
    get { return hasConfirmationId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ConfirmationId {
    get { return confirmationId_; }
  }
  
  public const int AccountIdFieldNumber = 2;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int ServerIpFieldNumber = 3;
  private bool hasServerIp;
  private uint serverIp_;
  public bool HasServerIp {
    get { return hasServerIp; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServerIp {
    get { return serverIp_; }
  }
  
  public const int ResponseTypeFieldNumber = 4;
  private bool hasResponseType;
  private uint responseType_;
  public bool HasResponseType {
    get { return hasResponseType; }
  }
  [global::System.CLSCompliant(false)]
  public uint ResponseType {
    get { return responseType_; }
  }
  
  public const int ResponseResultFieldNumber = 5;
  private bool hasResponseResult;
  private uint responseResult_;
  public bool HasResponseResult {
    get { return hasResponseResult; }
  }
  [global::System.CLSCompliant(false)]
  public uint ResponseResult {
    get { return responseResult_; }
  }
  
  public const int TokensFieldNumber = 6;
  private bool hasTokens;
  private uint tokens_;
  public bool HasTokens {
    get { return hasTokens; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tokens {
    get { return tokens_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientReportResponseFieldNames;
    if (hasConfirmationId) {
      output.WriteUInt64(1, field_names[1], ConfirmationId);
    }
    if (hasAccountId) {
      output.WriteUInt32(2, field_names[0], AccountId);
    }
    if (hasServerIp) {
      output.WriteUInt32(3, field_names[4], ServerIp);
    }
    if (hasResponseType) {
      output.WriteUInt32(4, field_names[3], ResponseType);
    }
    if (hasResponseResult) {
      output.WriteUInt32(5, field_names[2], ResponseResult);
    }
    if (hasTokens) {
      output.WriteUInt32(6, field_names[5], Tokens);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasConfirmationId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ConfirmationId);
      }
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, AccountId);
      }
      if (hasServerIp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ServerIp);
      }
      if (hasResponseType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ResponseType);
      }
      if (hasResponseResult) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ResponseResult);
      }
      if (hasTokens) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Tokens);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientReportResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientReportResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientReportResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientReportResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientReportResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientReportResponse result;
    
    private CMsgGCCStrike15_v2_ClientReportResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientReportResponse original = result;
        result = new CMsgGCCStrike15_v2_ClientReportResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientReportResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientReportResponse.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientReportResponse DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientReportResponse.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientReportResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientReportResponse) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientReportResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientReportResponse other) {
      if (other == global::CMsgGCCStrike15_v2_ClientReportResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasConfirmationId) {
        ConfirmationId = other.ConfirmationId;
      }
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasServerIp) {
        ServerIp = other.ServerIp;
      }
      if (other.HasResponseType) {
        ResponseType = other.ResponseType;
      }
      if (other.HasResponseResult) {
        ResponseResult = other.ResponseResult;
      }
      if (other.HasTokens) {
        Tokens = other.Tokens;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientReportResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientReportResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasConfirmationId = input.ReadUInt64(ref result.confirmationId_);
            break;
          }
          case 16: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 24: {
            result.hasServerIp = input.ReadUInt32(ref result.serverIp_);
            break;
          }
          case 32: {
            result.hasResponseType = input.ReadUInt32(ref result.responseType_);
            break;
          }
          case 40: {
            result.hasResponseResult = input.ReadUInt32(ref result.responseResult_);
            break;
          }
          case 48: {
            result.hasTokens = input.ReadUInt32(ref result.tokens_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasConfirmationId {
      get { return result.hasConfirmationId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ConfirmationId {
      get { return result.ConfirmationId; }
      set { SetConfirmationId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetConfirmationId(ulong value) {
      PrepareBuilder();
      result.hasConfirmationId = true;
      result.confirmationId_ = value;
      return this;
    }
    public Builder ClearConfirmationId() {
      PrepareBuilder();
      result.hasConfirmationId = false;
      result.confirmationId_ = 0UL;
      return this;
    }
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasServerIp {
      get { return result.hasServerIp; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerIp {
      get { return result.ServerIp; }
      set { SetServerIp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerIp(uint value) {
      PrepareBuilder();
      result.hasServerIp = true;
      result.serverIp_ = value;
      return this;
    }
    public Builder ClearServerIp() {
      PrepareBuilder();
      result.hasServerIp = false;
      result.serverIp_ = 0;
      return this;
    }
    
    public bool HasResponseType {
      get { return result.hasResponseType; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResponseType {
      get { return result.ResponseType; }
      set { SetResponseType(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetResponseType(uint value) {
      PrepareBuilder();
      result.hasResponseType = true;
      result.responseType_ = value;
      return this;
    }
    public Builder ClearResponseType() {
      PrepareBuilder();
      result.hasResponseType = false;
      result.responseType_ = 0;
      return this;
    }
    
    public bool HasResponseResult {
      get { return result.hasResponseResult; }
    }
    [global::System.CLSCompliant(false)]
    public uint ResponseResult {
      get { return result.ResponseResult; }
      set { SetResponseResult(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetResponseResult(uint value) {
      PrepareBuilder();
      result.hasResponseResult = true;
      result.responseResult_ = value;
      return this;
    }
    public Builder ClearResponseResult() {
      PrepareBuilder();
      result.hasResponseResult = false;
      result.responseResult_ = 0;
      return this;
    }
    
    public bool HasTokens {
      get { return result.hasTokens; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tokens {
      get { return result.Tokens; }
      set { SetTokens(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTokens(uint value) {
      PrepareBuilder();
      result.hasTokens = true;
      result.tokens_ = value;
      return this;
    }
    public Builder ClearTokens() {
      PrepareBuilder();
      result.hasTokens = false;
      result.tokens_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientReportResponse() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.Builder> {
  private CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() { }
  private static readonly CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends defaultInstance = new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientRequestWatchInfoFriendsFieldNames = new string[] { "account_ids", "matchid", "request_id", "serverid" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientRequestWatchInfoFriendsFieldTags = new uint[] { 16, 32, 8, 24 };
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends__FieldAccessorTable; }
  }
  
  public const int RequestIdFieldNumber = 1;
  private bool hasRequestId;
  private uint requestId_;
  public bool HasRequestId {
    get { return hasRequestId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequestId {
    get { return requestId_; }
  }
  
  public const int AccountIdsFieldNumber = 2;
  private pbc::PopsicleList<uint> accountIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AccountIdsList {
    get { return pbc::Lists.AsReadOnly(accountIds_); }
  }
  public int AccountIdsCount {
    get { return accountIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAccountIds(int index) {
    return accountIds_[index];
  }
  
  public const int ServeridFieldNumber = 3;
  private bool hasServerid;
  private ulong serverid_;
  public bool HasServerid {
    get { return hasServerid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Serverid {
    get { return serverid_; }
  }
  
  public const int MatchidFieldNumber = 4;
  private bool hasMatchid;
  private ulong matchid_;
  public bool HasMatchid {
    get { return hasMatchid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Matchid {
    get { return matchid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientRequestWatchInfoFriendsFieldNames;
    if (hasRequestId) {
      output.WriteUInt32(1, field_names[2], RequestId);
    }
    if (accountIds_.Count > 0) {
      output.WriteUInt32Array(2, field_names[0], accountIds_);
    }
    if (hasServerid) {
      output.WriteUInt64(3, field_names[3], Serverid);
    }
    if (hasMatchid) {
      output.WriteUInt64(4, field_names[1], Matchid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RequestId);
      }
      {
        int dataSize = 0;
        foreach (uint element in AccountIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * accountIds_.Count;
      }
      if (hasServerid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, Serverid);
      }
      if (hasMatchid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(4, Matchid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends MakeReadOnly() {
    accountIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends result;
    
    private CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends original = result;
        result = new CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends other) {
      if (other == global::CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.accountIds_.Count != 0) {
        result.accountIds_.Add(other.accountIds_);
      }
      if (other.HasServerid) {
        Serverid = other.Serverid;
      }
      if (other.HasMatchid) {
        Matchid = other.Matchid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientRequestWatchInfoFriendsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientRequestWatchInfoFriendsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRequestId = input.ReadUInt32(ref result.requestId_);
            break;
          }
          case 18:
          case 16: {
            input.ReadUInt32Array(tag, field_name, result.accountIds_);
            break;
          }
          case 24: {
            result.hasServerid = input.ReadUInt64(ref result.serverid_);
            break;
          }
          case 32: {
            result.hasMatchid = input.ReadUInt64(ref result.matchid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRequestId {
      get { return result.hasRequestId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestId {
      get { return result.RequestId; }
      set { SetRequestId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequestId(uint value) {
      PrepareBuilder();
      result.hasRequestId = true;
      result.requestId_ = value;
      return this;
    }
    public Builder ClearRequestId() {
      PrepareBuilder();
      result.hasRequestId = false;
      result.requestId_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AccountIdsList {
      get { return PrepareBuilder().accountIds_; }
    }
    public int AccountIdsCount {
      get { return result.AccountIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAccountIds(int index) {
      return result.GetAccountIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountIds(int index, uint value) {
      PrepareBuilder();
      result.accountIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAccountIds(uint value) {
      PrepareBuilder();
      result.accountIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAccountIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.accountIds_.Add(values);
      return this;
    }
    public Builder ClearAccountIds() {
      PrepareBuilder();
      result.accountIds_.Clear();
      return this;
    }
    
    public bool HasServerid {
      get { return result.hasServerid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Serverid {
      get { return result.Serverid; }
      set { SetServerid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerid(ulong value) {
      PrepareBuilder();
      result.hasServerid = true;
      result.serverid_ = value;
      return this;
    }
    public Builder ClearServerid() {
      PrepareBuilder();
      result.hasServerid = false;
      result.serverid_ = 0UL;
      return this;
    }
    
    public bool HasMatchid {
      get { return result.hasMatchid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Matchid {
      get { return result.Matchid; }
      set { SetMatchid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchid(ulong value) {
      PrepareBuilder();
      result.hasMatchid = true;
      result.matchid_ = value;
      return this;
    }
    public Builder ClearMatchid() {
      PrepareBuilder();
      result.hasMatchid = false;
      result.matchid_ = 0UL;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientRequestWatchInfoFriends() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class WatchableMatchInfo : pb::GeneratedMessage<WatchableMatchInfo, WatchableMatchInfo.Builder> {
  private WatchableMatchInfo() { }
  private static readonly WatchableMatchInfo defaultInstance = new WatchableMatchInfo().MakeReadOnly();
  private static readonly string[] _watchableMatchInfoFieldNames = new string[] { "cl_decryptdata_key", "cl_decryptdata_key_pub", "game_map", "game_mapgroup", "game_mode", "match_id", "reservation_id", "server_id", "server_ip", "tv_port", "tv_spectators", "tv_time", "tv_watch_password" };
  private static readonly uint[] _watchableMatchInfoFieldTags = new uint[] { 48, 56, 82, 74, 64, 96, 104, 88, 8, 16, 24, 32, 42 };
  public static WatchableMatchInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override WatchableMatchInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override WatchableMatchInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_WatchableMatchInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<WatchableMatchInfo, WatchableMatchInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_WatchableMatchInfo__FieldAccessorTable; }
  }
  
  public const int ServerIpFieldNumber = 1;
  private bool hasServerIp;
  private uint serverIp_;
  public bool HasServerIp {
    get { return hasServerIp; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServerIp {
    get { return serverIp_; }
  }
  
  public const int TvPortFieldNumber = 2;
  private bool hasTvPort;
  private uint tvPort_;
  public bool HasTvPort {
    get { return hasTvPort; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvPort {
    get { return tvPort_; }
  }
  
  public const int TvSpectatorsFieldNumber = 3;
  private bool hasTvSpectators;
  private uint tvSpectators_;
  public bool HasTvSpectators {
    get { return hasTvSpectators; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvSpectators {
    get { return tvSpectators_; }
  }
  
  public const int TvTimeFieldNumber = 4;
  private bool hasTvTime;
  private uint tvTime_;
  public bool HasTvTime {
    get { return hasTvTime; }
  }
  [global::System.CLSCompliant(false)]
  public uint TvTime {
    get { return tvTime_; }
  }
  
  public const int TvWatchPasswordFieldNumber = 5;
  private bool hasTvWatchPassword;
  private pb::ByteString tvWatchPassword_ = pb::ByteString.Empty;
  public bool HasTvWatchPassword {
    get { return hasTvWatchPassword; }
  }
  public pb::ByteString TvWatchPassword {
    get { return tvWatchPassword_; }
  }
  
  public const int ClDecryptdataKeyFieldNumber = 6;
  private bool hasClDecryptdataKey;
  private ulong clDecryptdataKey_;
  public bool HasClDecryptdataKey {
    get { return hasClDecryptdataKey; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ClDecryptdataKey {
    get { return clDecryptdataKey_; }
  }
  
  public const int ClDecryptdataKeyPubFieldNumber = 7;
  private bool hasClDecryptdataKeyPub;
  private ulong clDecryptdataKeyPub_;
  public bool HasClDecryptdataKeyPub {
    get { return hasClDecryptdataKeyPub; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ClDecryptdataKeyPub {
    get { return clDecryptdataKeyPub_; }
  }
  
  public const int GameModeFieldNumber = 8;
  private bool hasGameMode;
  private uint gameMode_;
  public bool HasGameMode {
    get { return hasGameMode; }
  }
  [global::System.CLSCompliant(false)]
  public uint GameMode {
    get { return gameMode_; }
  }
  
  public const int GameMapgroupFieldNumber = 9;
  private bool hasGameMapgroup;
  private string gameMapgroup_ = "";
  public bool HasGameMapgroup {
    get { return hasGameMapgroup; }
  }
  public string GameMapgroup {
    get { return gameMapgroup_; }
  }
  
  public const int GameMapFieldNumber = 10;
  private bool hasGameMap;
  private string gameMap_ = "";
  public bool HasGameMap {
    get { return hasGameMap; }
  }
  public string GameMap {
    get { return gameMap_; }
  }
  
  public const int ServerIdFieldNumber = 11;
  private bool hasServerId;
  private ulong serverId_;
  public bool HasServerId {
    get { return hasServerId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ServerId {
    get { return serverId_; }
  }
  
  public const int MatchIdFieldNumber = 12;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public const int ReservationIdFieldNumber = 13;
  private bool hasReservationId;
  private ulong reservationId_;
  public bool HasReservationId {
    get { return hasReservationId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ReservationId {
    get { return reservationId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _watchableMatchInfoFieldNames;
    if (hasServerIp) {
      output.WriteUInt32(1, field_names[8], ServerIp);
    }
    if (hasTvPort) {
      output.WriteUInt32(2, field_names[9], TvPort);
    }
    if (hasTvSpectators) {
      output.WriteUInt32(3, field_names[10], TvSpectators);
    }
    if (hasTvTime) {
      output.WriteUInt32(4, field_names[11], TvTime);
    }
    if (hasTvWatchPassword) {
      output.WriteBytes(5, field_names[12], TvWatchPassword);
    }
    if (hasClDecryptdataKey) {
      output.WriteUInt64(6, field_names[0], ClDecryptdataKey);
    }
    if (hasClDecryptdataKeyPub) {
      output.WriteUInt64(7, field_names[1], ClDecryptdataKeyPub);
    }
    if (hasGameMode) {
      output.WriteUInt32(8, field_names[4], GameMode);
    }
    if (hasGameMapgroup) {
      output.WriteString(9, field_names[3], GameMapgroup);
    }
    if (hasGameMap) {
      output.WriteString(10, field_names[2], GameMap);
    }
    if (hasServerId) {
      output.WriteUInt64(11, field_names[7], ServerId);
    }
    if (hasMatchId) {
      output.WriteUInt64(12, field_names[5], MatchId);
    }
    if (hasReservationId) {
      output.WriteUInt64(13, field_names[6], ReservationId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerIp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, ServerIp);
      }
      if (hasTvPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TvPort);
      }
      if (hasTvSpectators) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TvSpectators);
      }
      if (hasTvTime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, TvTime);
      }
      if (hasTvWatchPassword) {
        size += pb::CodedOutputStream.ComputeBytesSize(5, TvWatchPassword);
      }
      if (hasClDecryptdataKey) {
        size += pb::CodedOutputStream.ComputeUInt64Size(6, ClDecryptdataKey);
      }
      if (hasClDecryptdataKeyPub) {
        size += pb::CodedOutputStream.ComputeUInt64Size(7, ClDecryptdataKeyPub);
      }
      if (hasGameMode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, GameMode);
      }
      if (hasGameMapgroup) {
        size += pb::CodedOutputStream.ComputeStringSize(9, GameMapgroup);
      }
      if (hasGameMap) {
        size += pb::CodedOutputStream.ComputeStringSize(10, GameMap);
      }
      if (hasServerId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(11, ServerId);
      }
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(12, MatchId);
      }
      if (hasReservationId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(13, ReservationId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static WatchableMatchInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static WatchableMatchInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static WatchableMatchInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static WatchableMatchInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private WatchableMatchInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(WatchableMatchInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<WatchableMatchInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(WatchableMatchInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private WatchableMatchInfo result;
    
    private WatchableMatchInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        WatchableMatchInfo original = result;
        result = new WatchableMatchInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override WatchableMatchInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::WatchableMatchInfo.Descriptor; }
    }
    
    public override WatchableMatchInfo DefaultInstanceForType {
      get { return global::WatchableMatchInfo.DefaultInstance; }
    }
    
    public override WatchableMatchInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is WatchableMatchInfo) {
        return MergeFrom((WatchableMatchInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(WatchableMatchInfo other) {
      if (other == global::WatchableMatchInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasServerIp) {
        ServerIp = other.ServerIp;
      }
      if (other.HasTvPort) {
        TvPort = other.TvPort;
      }
      if (other.HasTvSpectators) {
        TvSpectators = other.TvSpectators;
      }
      if (other.HasTvTime) {
        TvTime = other.TvTime;
      }
      if (other.HasTvWatchPassword) {
        TvWatchPassword = other.TvWatchPassword;
      }
      if (other.HasClDecryptdataKey) {
        ClDecryptdataKey = other.ClDecryptdataKey;
      }
      if (other.HasClDecryptdataKeyPub) {
        ClDecryptdataKeyPub = other.ClDecryptdataKeyPub;
      }
      if (other.HasGameMode) {
        GameMode = other.GameMode;
      }
      if (other.HasGameMapgroup) {
        GameMapgroup = other.GameMapgroup;
      }
      if (other.HasGameMap) {
        GameMap = other.GameMap;
      }
      if (other.HasServerId) {
        ServerId = other.ServerId;
      }
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasReservationId) {
        ReservationId = other.ReservationId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_watchableMatchInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _watchableMatchInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasServerIp = input.ReadUInt32(ref result.serverIp_);
            break;
          }
          case 16: {
            result.hasTvPort = input.ReadUInt32(ref result.tvPort_);
            break;
          }
          case 24: {
            result.hasTvSpectators = input.ReadUInt32(ref result.tvSpectators_);
            break;
          }
          case 32: {
            result.hasTvTime = input.ReadUInt32(ref result.tvTime_);
            break;
          }
          case 42: {
            result.hasTvWatchPassword = input.ReadBytes(ref result.tvWatchPassword_);
            break;
          }
          case 48: {
            result.hasClDecryptdataKey = input.ReadUInt64(ref result.clDecryptdataKey_);
            break;
          }
          case 56: {
            result.hasClDecryptdataKeyPub = input.ReadUInt64(ref result.clDecryptdataKeyPub_);
            break;
          }
          case 64: {
            result.hasGameMode = input.ReadUInt32(ref result.gameMode_);
            break;
          }
          case 74: {
            result.hasGameMapgroup = input.ReadString(ref result.gameMapgroup_);
            break;
          }
          case 82: {
            result.hasGameMap = input.ReadString(ref result.gameMap_);
            break;
          }
          case 88: {
            result.hasServerId = input.ReadUInt64(ref result.serverId_);
            break;
          }
          case 96: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
          case 104: {
            result.hasReservationId = input.ReadUInt64(ref result.reservationId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasServerIp {
      get { return result.hasServerIp; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerIp {
      get { return result.ServerIp; }
      set { SetServerIp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerIp(uint value) {
      PrepareBuilder();
      result.hasServerIp = true;
      result.serverIp_ = value;
      return this;
    }
    public Builder ClearServerIp() {
      PrepareBuilder();
      result.hasServerIp = false;
      result.serverIp_ = 0;
      return this;
    }
    
    public bool HasTvPort {
      get { return result.hasTvPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvPort {
      get { return result.TvPort; }
      set { SetTvPort(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvPort(uint value) {
      PrepareBuilder();
      result.hasTvPort = true;
      result.tvPort_ = value;
      return this;
    }
    public Builder ClearTvPort() {
      PrepareBuilder();
      result.hasTvPort = false;
      result.tvPort_ = 0;
      return this;
    }
    
    public bool HasTvSpectators {
      get { return result.hasTvSpectators; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvSpectators {
      get { return result.TvSpectators; }
      set { SetTvSpectators(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvSpectators(uint value) {
      PrepareBuilder();
      result.hasTvSpectators = true;
      result.tvSpectators_ = value;
      return this;
    }
    public Builder ClearTvSpectators() {
      PrepareBuilder();
      result.hasTvSpectators = false;
      result.tvSpectators_ = 0;
      return this;
    }
    
    public bool HasTvTime {
      get { return result.hasTvTime; }
    }
    [global::System.CLSCompliant(false)]
    public uint TvTime {
      get { return result.TvTime; }
      set { SetTvTime(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTvTime(uint value) {
      PrepareBuilder();
      result.hasTvTime = true;
      result.tvTime_ = value;
      return this;
    }
    public Builder ClearTvTime() {
      PrepareBuilder();
      result.hasTvTime = false;
      result.tvTime_ = 0;
      return this;
    }
    
    public bool HasTvWatchPassword {
      get { return result.hasTvWatchPassword; }
    }
    public pb::ByteString TvWatchPassword {
      get { return result.TvWatchPassword; }
      set { SetTvWatchPassword(value); }
    }
    public Builder SetTvWatchPassword(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTvWatchPassword = true;
      result.tvWatchPassword_ = value;
      return this;
    }
    public Builder ClearTvWatchPassword() {
      PrepareBuilder();
      result.hasTvWatchPassword = false;
      result.tvWatchPassword_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasClDecryptdataKey {
      get { return result.hasClDecryptdataKey; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ClDecryptdataKey {
      get { return result.ClDecryptdataKey; }
      set { SetClDecryptdataKey(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetClDecryptdataKey(ulong value) {
      PrepareBuilder();
      result.hasClDecryptdataKey = true;
      result.clDecryptdataKey_ = value;
      return this;
    }
    public Builder ClearClDecryptdataKey() {
      PrepareBuilder();
      result.hasClDecryptdataKey = false;
      result.clDecryptdataKey_ = 0UL;
      return this;
    }
    
    public bool HasClDecryptdataKeyPub {
      get { return result.hasClDecryptdataKeyPub; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ClDecryptdataKeyPub {
      get { return result.ClDecryptdataKeyPub; }
      set { SetClDecryptdataKeyPub(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetClDecryptdataKeyPub(ulong value) {
      PrepareBuilder();
      result.hasClDecryptdataKeyPub = true;
      result.clDecryptdataKeyPub_ = value;
      return this;
    }
    public Builder ClearClDecryptdataKeyPub() {
      PrepareBuilder();
      result.hasClDecryptdataKeyPub = false;
      result.clDecryptdataKeyPub_ = 0UL;
      return this;
    }
    
    public bool HasGameMode {
      get { return result.hasGameMode; }
    }
    [global::System.CLSCompliant(false)]
    public uint GameMode {
      get { return result.GameMode; }
      set { SetGameMode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGameMode(uint value) {
      PrepareBuilder();
      result.hasGameMode = true;
      result.gameMode_ = value;
      return this;
    }
    public Builder ClearGameMode() {
      PrepareBuilder();
      result.hasGameMode = false;
      result.gameMode_ = 0;
      return this;
    }
    
    public bool HasGameMapgroup {
      get { return result.hasGameMapgroup; }
    }
    public string GameMapgroup {
      get { return result.GameMapgroup; }
      set { SetGameMapgroup(value); }
    }
    public Builder SetGameMapgroup(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGameMapgroup = true;
      result.gameMapgroup_ = value;
      return this;
    }
    public Builder ClearGameMapgroup() {
      PrepareBuilder();
      result.hasGameMapgroup = false;
      result.gameMapgroup_ = "";
      return this;
    }
    
    public bool HasGameMap {
      get { return result.hasGameMap; }
    }
    public string GameMap {
      get { return result.GameMap; }
      set { SetGameMap(value); }
    }
    public Builder SetGameMap(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasGameMap = true;
      result.gameMap_ = value;
      return this;
    }
    public Builder ClearGameMap() {
      PrepareBuilder();
      result.hasGameMap = false;
      result.gameMap_ = "";
      return this;
    }
    
    public bool HasServerId {
      get { return result.hasServerId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ServerId {
      get { return result.ServerId; }
      set { SetServerId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerId(ulong value) {
      PrepareBuilder();
      result.hasServerId = true;
      result.serverId_ = value;
      return this;
    }
    public Builder ClearServerId() {
      PrepareBuilder();
      result.hasServerId = false;
      result.serverId_ = 0UL;
      return this;
    }
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
    
    public bool HasReservationId {
      get { return result.hasReservationId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ReservationId {
      get { return result.ReservationId; }
      set { SetReservationId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetReservationId(ulong value) {
      PrepareBuilder();
      result.hasReservationId = true;
      result.reservationId_ = value;
      return this;
    }
    public Builder ClearReservationId() {
      PrepareBuilder();
      result.hasReservationId = false;
      result.reservationId_ = 0UL;
      return this;
    }
  }
  static WatchableMatchInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_WatchInfoUsers : pb::GeneratedMessage<CMsgGCCStrike15_v2_WatchInfoUsers, CMsgGCCStrike15_v2_WatchInfoUsers.Builder> {
  private CMsgGCCStrike15_v2_WatchInfoUsers() { }
  private static readonly CMsgGCCStrike15_v2_WatchInfoUsers defaultInstance = new CMsgGCCStrike15_v2_WatchInfoUsers().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2WatchInfoUsersFieldNames = new string[] { "account_ids", "extended_timeout", "request_id", "watchable_match_infos" };
  private static readonly uint[] _cMsgGCCStrike15V2WatchInfoUsersFieldTags = new uint[] { 16, 40, 8, 26 };
  public static CMsgGCCStrike15_v2_WatchInfoUsers DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_WatchInfoUsers DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_WatchInfoUsers ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_WatchInfoUsers, CMsgGCCStrike15_v2_WatchInfoUsers.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_WatchInfoUsers__FieldAccessorTable; }
  }
  
  public const int RequestIdFieldNumber = 1;
  private bool hasRequestId;
  private uint requestId_;
  public bool HasRequestId {
    get { return hasRequestId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequestId {
    get { return requestId_; }
  }
  
  public const int AccountIdsFieldNumber = 2;
  private pbc::PopsicleList<uint> accountIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AccountIdsList {
    get { return pbc::Lists.AsReadOnly(accountIds_); }
  }
  public int AccountIdsCount {
    get { return accountIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAccountIds(int index) {
    return accountIds_[index];
  }
  
  public const int WatchableMatchInfosFieldNumber = 3;
  private pbc::PopsicleList<global::WatchableMatchInfo> watchableMatchInfos_ = new pbc::PopsicleList<global::WatchableMatchInfo>();
  public scg::IList<global::WatchableMatchInfo> WatchableMatchInfosList {
    get { return watchableMatchInfos_; }
  }
  public int WatchableMatchInfosCount {
    get { return watchableMatchInfos_.Count; }
  }
  public global::WatchableMatchInfo GetWatchableMatchInfos(int index) {
    return watchableMatchInfos_[index];
  }
  
  public const int ExtendedTimeoutFieldNumber = 5;
  private bool hasExtendedTimeout;
  private uint extendedTimeout_;
  public bool HasExtendedTimeout {
    get { return hasExtendedTimeout; }
  }
  [global::System.CLSCompliant(false)]
  public uint ExtendedTimeout {
    get { return extendedTimeout_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2WatchInfoUsersFieldNames;
    if (hasRequestId) {
      output.WriteUInt32(1, field_names[2], RequestId);
    }
    if (accountIds_.Count > 0) {
      output.WriteUInt32Array(2, field_names[0], accountIds_);
    }
    if (watchableMatchInfos_.Count > 0) {
      output.WriteMessageArray(3, field_names[3], watchableMatchInfos_);
    }
    if (hasExtendedTimeout) {
      output.WriteUInt32(5, field_names[1], ExtendedTimeout);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RequestId);
      }
      {
        int dataSize = 0;
        foreach (uint element in AccountIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * accountIds_.Count;
      }
      foreach (global::WatchableMatchInfo element in WatchableMatchInfosList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      if (hasExtendedTimeout) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, ExtendedTimeout);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_WatchInfoUsers ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_WatchInfoUsers MakeReadOnly() {
    accountIds_.MakeReadOnly();
    watchableMatchInfos_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_WatchInfoUsers prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_WatchInfoUsers, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_WatchInfoUsers cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_WatchInfoUsers result;
    
    private CMsgGCCStrike15_v2_WatchInfoUsers PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_WatchInfoUsers original = result;
        result = new CMsgGCCStrike15_v2_WatchInfoUsers();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_WatchInfoUsers MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_WatchInfoUsers.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_WatchInfoUsers DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_WatchInfoUsers.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_WatchInfoUsers BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_WatchInfoUsers) {
        return MergeFrom((CMsgGCCStrike15_v2_WatchInfoUsers) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_WatchInfoUsers other) {
      if (other == global::CMsgGCCStrike15_v2_WatchInfoUsers.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.accountIds_.Count != 0) {
        result.accountIds_.Add(other.accountIds_);
      }
      if (other.watchableMatchInfos_.Count != 0) {
        result.watchableMatchInfos_.Add(other.watchableMatchInfos_);
      }
      if (other.HasExtendedTimeout) {
        ExtendedTimeout = other.ExtendedTimeout;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2WatchInfoUsersFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2WatchInfoUsersFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRequestId = input.ReadUInt32(ref result.requestId_);
            break;
          }
          case 18:
          case 16: {
            input.ReadUInt32Array(tag, field_name, result.accountIds_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.watchableMatchInfos_, global::WatchableMatchInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 40: {
            result.hasExtendedTimeout = input.ReadUInt32(ref result.extendedTimeout_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRequestId {
      get { return result.hasRequestId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestId {
      get { return result.RequestId; }
      set { SetRequestId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequestId(uint value) {
      PrepareBuilder();
      result.hasRequestId = true;
      result.requestId_ = value;
      return this;
    }
    public Builder ClearRequestId() {
      PrepareBuilder();
      result.hasRequestId = false;
      result.requestId_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AccountIdsList {
      get { return PrepareBuilder().accountIds_; }
    }
    public int AccountIdsCount {
      get { return result.AccountIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAccountIds(int index) {
      return result.GetAccountIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountIds(int index, uint value) {
      PrepareBuilder();
      result.accountIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAccountIds(uint value) {
      PrepareBuilder();
      result.accountIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAccountIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.accountIds_.Add(values);
      return this;
    }
    public Builder ClearAccountIds() {
      PrepareBuilder();
      result.accountIds_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::WatchableMatchInfo> WatchableMatchInfosList {
      get { return PrepareBuilder().watchableMatchInfos_; }
    }
    public int WatchableMatchInfosCount {
      get { return result.WatchableMatchInfosCount; }
    }
    public global::WatchableMatchInfo GetWatchableMatchInfos(int index) {
      return result.GetWatchableMatchInfos(index);
    }
    public Builder SetWatchableMatchInfos(int index, global::WatchableMatchInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.watchableMatchInfos_[index] = value;
      return this;
    }
    public Builder SetWatchableMatchInfos(int index, global::WatchableMatchInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.watchableMatchInfos_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddWatchableMatchInfos(global::WatchableMatchInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.watchableMatchInfos_.Add(value);
      return this;
    }
    public Builder AddWatchableMatchInfos(global::WatchableMatchInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.watchableMatchInfos_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeWatchableMatchInfos(scg::IEnumerable<global::WatchableMatchInfo> values) {
      PrepareBuilder();
      result.watchableMatchInfos_.Add(values);
      return this;
    }
    public Builder ClearWatchableMatchInfos() {
      PrepareBuilder();
      result.watchableMatchInfos_.Clear();
      return this;
    }
    
    public bool HasExtendedTimeout {
      get { return result.hasExtendedTimeout; }
    }
    [global::System.CLSCompliant(false)]
    public uint ExtendedTimeout {
      get { return result.ExtendedTimeout; }
      set { SetExtendedTimeout(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetExtendedTimeout(uint value) {
      PrepareBuilder();
      result.hasExtendedTimeout = true;
      result.extendedTimeout_ = value;
      return this;
    }
    public Builder ClearExtendedTimeout() {
      PrepareBuilder();
      result.hasExtendedTimeout = false;
      result.extendedTimeout_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_WatchInfoUsers() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientRequestPlayersProfile : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientRequestPlayersProfile, CMsgGCCStrike15_v2_ClientRequestPlayersProfile.Builder> {
  private CMsgGCCStrike15_v2_ClientRequestPlayersProfile() { }
  private static readonly CMsgGCCStrike15_v2_ClientRequestPlayersProfile defaultInstance = new CMsgGCCStrike15_v2_ClientRequestPlayersProfile().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientRequestPlayersProfileFieldNames = new string[] { "account_ids", "request_id" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientRequestPlayersProfileFieldTags = new uint[] { 16, 8 };
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientRequestPlayersProfile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientRequestPlayersProfile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientRequestPlayersProfile, CMsgGCCStrike15_v2_ClientRequestPlayersProfile.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientRequestPlayersProfile__FieldAccessorTable; }
  }
  
  public const int RequestIdFieldNumber = 1;
  private bool hasRequestId;
  private uint requestId_;
  public bool HasRequestId {
    get { return hasRequestId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequestId {
    get { return requestId_; }
  }
  
  public const int AccountIdsFieldNumber = 2;
  private pbc::PopsicleList<uint> accountIds_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AccountIdsList {
    get { return pbc::Lists.AsReadOnly(accountIds_); }
  }
  public int AccountIdsCount {
    get { return accountIds_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAccountIds(int index) {
    return accountIds_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientRequestPlayersProfileFieldNames;
    if (hasRequestId) {
      output.WriteUInt32(1, field_names[1], RequestId);
    }
    if (accountIds_.Count > 0) {
      output.WriteUInt32Array(2, field_names[0], accountIds_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RequestId);
      }
      {
        int dataSize = 0;
        foreach (uint element in AccountIdsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * accountIds_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientRequestPlayersProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientRequestPlayersProfile MakeReadOnly() {
    accountIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientRequestPlayersProfile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientRequestPlayersProfile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientRequestPlayersProfile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientRequestPlayersProfile result;
    
    private CMsgGCCStrike15_v2_ClientRequestPlayersProfile PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientRequestPlayersProfile original = result;
        result = new CMsgGCCStrike15_v2_ClientRequestPlayersProfile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientRequestPlayersProfile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientRequestPlayersProfile DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientRequestPlayersProfile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientRequestPlayersProfile) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientRequestPlayersProfile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientRequestPlayersProfile other) {
      if (other == global::CMsgGCCStrike15_v2_ClientRequestPlayersProfile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.accountIds_.Count != 0) {
        result.accountIds_.Add(other.accountIds_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientRequestPlayersProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientRequestPlayersProfileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRequestId = input.ReadUInt32(ref result.requestId_);
            break;
          }
          case 18:
          case 16: {
            input.ReadUInt32Array(tag, field_name, result.accountIds_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRequestId {
      get { return result.hasRequestId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestId {
      get { return result.RequestId; }
      set { SetRequestId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequestId(uint value) {
      PrepareBuilder();
      result.hasRequestId = true;
      result.requestId_ = value;
      return this;
    }
    public Builder ClearRequestId() {
      PrepareBuilder();
      result.hasRequestId = false;
      result.requestId_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AccountIdsList {
      get { return PrepareBuilder().accountIds_; }
    }
    public int AccountIdsCount {
      get { return result.AccountIdsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAccountIds(int index) {
      return result.GetAccountIds(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountIds(int index, uint value) {
      PrepareBuilder();
      result.accountIds_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAccountIds(uint value) {
      PrepareBuilder();
      result.accountIds_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAccountIds(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.accountIds_.Add(values);
      return this;
    }
    public Builder ClearAccountIds() {
      PrepareBuilder();
      result.accountIds_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientRequestPlayersProfile() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_PlayersProfile : pb::GeneratedMessage<CMsgGCCStrike15_v2_PlayersProfile, CMsgGCCStrike15_v2_PlayersProfile.Builder> {
  private CMsgGCCStrike15_v2_PlayersProfile() { }
  private static readonly CMsgGCCStrike15_v2_PlayersProfile defaultInstance = new CMsgGCCStrike15_v2_PlayersProfile().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2PlayersProfileFieldNames = new string[] { "account_profiles", "request_id" };
  private static readonly uint[] _cMsgGCCStrike15V2PlayersProfileFieldTags = new uint[] { 18, 8 };
  public static CMsgGCCStrike15_v2_PlayersProfile DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_PlayersProfile DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_PlayersProfile ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayersProfile__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_PlayersProfile, CMsgGCCStrike15_v2_PlayersProfile.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayersProfile__FieldAccessorTable; }
  }
  
  public const int RequestIdFieldNumber = 1;
  private bool hasRequestId;
  private uint requestId_;
  public bool HasRequestId {
    get { return hasRequestId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequestId {
    get { return requestId_; }
  }
  
  public const int AccountProfilesFieldNumber = 2;
  private pbc::PopsicleList<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello> accountProfiles_ = new pbc::PopsicleList<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello>();
  public scg::IList<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello> AccountProfilesList {
    get { return accountProfiles_; }
  }
  public int AccountProfilesCount {
    get { return accountProfiles_.Count; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello GetAccountProfiles(int index) {
    return accountProfiles_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2PlayersProfileFieldNames;
    if (hasRequestId) {
      output.WriteUInt32(1, field_names[1], RequestId);
    }
    if (accountProfiles_.Count > 0) {
      output.WriteMessageArray(2, field_names[0], accountProfiles_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RequestId);
      }
      foreach (global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello element in AccountProfilesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayersProfile ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_PlayersProfile MakeReadOnly() {
    accountProfiles_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_PlayersProfile prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_PlayersProfile, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_PlayersProfile cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_PlayersProfile result;
    
    private CMsgGCCStrike15_v2_PlayersProfile PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_PlayersProfile original = result;
        result = new CMsgGCCStrike15_v2_PlayersProfile();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_PlayersProfile MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_PlayersProfile.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_PlayersProfile DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_PlayersProfile.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_PlayersProfile BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_PlayersProfile) {
        return MergeFrom((CMsgGCCStrike15_v2_PlayersProfile) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_PlayersProfile other) {
      if (other == global::CMsgGCCStrike15_v2_PlayersProfile.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.accountProfiles_.Count != 0) {
        result.accountProfiles_.Add(other.accountProfiles_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2PlayersProfileFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2PlayersProfileFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRequestId = input.ReadUInt32(ref result.requestId_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.accountProfiles_, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRequestId {
      get { return result.hasRequestId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestId {
      get { return result.RequestId; }
      set { SetRequestId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequestId(uint value) {
      PrepareBuilder();
      result.hasRequestId = true;
      result.requestId_ = value;
      return this;
    }
    public Builder ClearRequestId() {
      PrepareBuilder();
      result.hasRequestId = false;
      result.requestId_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello> AccountProfilesList {
      get { return PrepareBuilder().accountProfiles_; }
    }
    public int AccountProfilesCount {
      get { return result.AccountProfilesCount; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello GetAccountProfiles(int index) {
      return result.GetAccountProfiles(index);
    }
    public Builder SetAccountProfiles(int index, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.accountProfiles_[index] = value;
      return this;
    }
    public Builder SetAccountProfiles(int index, global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.accountProfiles_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddAccountProfiles(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.accountProfiles_.Add(value);
      return this;
    }
    public Builder AddAccountProfiles(global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.accountProfiles_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeAccountProfiles(scg::IEnumerable<global::CMsgGCCStrike15_v2_MatchmakingGC2ClientHello> values) {
      PrepareBuilder();
      result.accountProfiles_.Add(values);
      return this;
    }
    public Builder ClearAccountProfiles() {
      PrepareBuilder();
      result.accountProfiles_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_PlayersProfile() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_PlayerEarnedRewardNotification : pb::GeneratedMessage<CMsgGCCStrike15_v2_PlayerEarnedRewardNotification, CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.Builder> {
  private CMsgGCCStrike15_v2_PlayerEarnedRewardNotification() { }
  private static readonly CMsgGCCStrike15_v2_PlayerEarnedRewardNotification defaultInstance = new CMsgGCCStrike15_v2_PlayerEarnedRewardNotification().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2PlayerEarnedRewardNotificationFieldNames = new string[] { "account_id", "attr_def_index", "attr_value", "item_def_index" };
  private static readonly uint[] _cMsgGCCStrike15V2PlayerEarnedRewardNotificationFieldTags = new uint[] { 8, 24, 32, 16 };
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_PlayerEarnedRewardNotification DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_PlayerEarnedRewardNotification, CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerEarnedRewardNotification__FieldAccessorTable; }
  }
  
  public const int AccountIdFieldNumber = 1;
  private bool hasAccountId;
  private uint accountId_;
  public bool HasAccountId {
    get { return hasAccountId; }
  }
  [global::System.CLSCompliant(false)]
  public uint AccountId {
    get { return accountId_; }
  }
  
  public const int ItemDefIndexFieldNumber = 2;
  private bool hasItemDefIndex;
  private uint itemDefIndex_;
  public bool HasItemDefIndex {
    get { return hasItemDefIndex; }
  }
  [global::System.CLSCompliant(false)]
  public uint ItemDefIndex {
    get { return itemDefIndex_; }
  }
  
  public const int AttrDefIndexFieldNumber = 3;
  private bool hasAttrDefIndex;
  private uint attrDefIndex_;
  public bool HasAttrDefIndex {
    get { return hasAttrDefIndex; }
  }
  [global::System.CLSCompliant(false)]
  public uint AttrDefIndex {
    get { return attrDefIndex_; }
  }
  
  public const int AttrValueFieldNumber = 4;
  private bool hasAttrValue;
  private uint attrValue_;
  public bool HasAttrValue {
    get { return hasAttrValue; }
  }
  [global::System.CLSCompliant(false)]
  public uint AttrValue {
    get { return attrValue_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2PlayerEarnedRewardNotificationFieldNames;
    if (hasAccountId) {
      output.WriteUInt32(1, field_names[0], AccountId);
    }
    if (hasItemDefIndex) {
      output.WriteUInt32(2, field_names[3], ItemDefIndex);
    }
    if (hasAttrDefIndex) {
      output.WriteUInt32(3, field_names[1], AttrDefIndex);
    }
    if (hasAttrValue) {
      output.WriteUInt32(4, field_names[2], AttrValue);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, AccountId);
      }
      if (hasItemDefIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, ItemDefIndex);
      }
      if (hasAttrDefIndex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, AttrDefIndex);
      }
      if (hasAttrValue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, AttrValue);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_PlayerEarnedRewardNotification MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_PlayerEarnedRewardNotification prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_PlayerEarnedRewardNotification, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_PlayerEarnedRewardNotification cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_PlayerEarnedRewardNotification result;
    
    private CMsgGCCStrike15_v2_PlayerEarnedRewardNotification PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_PlayerEarnedRewardNotification original = result;
        result = new CMsgGCCStrike15_v2_PlayerEarnedRewardNotification();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_PlayerEarnedRewardNotification MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerEarnedRewardNotification DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerEarnedRewardNotification BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_PlayerEarnedRewardNotification) {
        return MergeFrom((CMsgGCCStrike15_v2_PlayerEarnedRewardNotification) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_PlayerEarnedRewardNotification other) {
      if (other == global::CMsgGCCStrike15_v2_PlayerEarnedRewardNotification.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountId) {
        AccountId = other.AccountId;
      }
      if (other.HasItemDefIndex) {
        ItemDefIndex = other.ItemDefIndex;
      }
      if (other.HasAttrDefIndex) {
        AttrDefIndex = other.AttrDefIndex;
      }
      if (other.HasAttrValue) {
        AttrValue = other.AttrValue;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2PlayerEarnedRewardNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2PlayerEarnedRewardNotificationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountId = input.ReadUInt32(ref result.accountId_);
            break;
          }
          case 16: {
            result.hasItemDefIndex = input.ReadUInt32(ref result.itemDefIndex_);
            break;
          }
          case 24: {
            result.hasAttrDefIndex = input.ReadUInt32(ref result.attrDefIndex_);
            break;
          }
          case 32: {
            result.hasAttrValue = input.ReadUInt32(ref result.attrValue_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountId {
      get { return result.hasAccountId; }
    }
    [global::System.CLSCompliant(false)]
    public uint AccountId {
      get { return result.AccountId; }
      set { SetAccountId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountId(uint value) {
      PrepareBuilder();
      result.hasAccountId = true;
      result.accountId_ = value;
      return this;
    }
    public Builder ClearAccountId() {
      PrepareBuilder();
      result.hasAccountId = false;
      result.accountId_ = 0;
      return this;
    }
    
    public bool HasItemDefIndex {
      get { return result.hasItemDefIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint ItemDefIndex {
      get { return result.ItemDefIndex; }
      set { SetItemDefIndex(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetItemDefIndex(uint value) {
      PrepareBuilder();
      result.hasItemDefIndex = true;
      result.itemDefIndex_ = value;
      return this;
    }
    public Builder ClearItemDefIndex() {
      PrepareBuilder();
      result.hasItemDefIndex = false;
      result.itemDefIndex_ = 0;
      return this;
    }
    
    public bool HasAttrDefIndex {
      get { return result.hasAttrDefIndex; }
    }
    [global::System.CLSCompliant(false)]
    public uint AttrDefIndex {
      get { return result.AttrDefIndex; }
      set { SetAttrDefIndex(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAttrDefIndex(uint value) {
      PrepareBuilder();
      result.hasAttrDefIndex = true;
      result.attrDefIndex_ = value;
      return this;
    }
    public Builder ClearAttrDefIndex() {
      PrepareBuilder();
      result.hasAttrDefIndex = false;
      result.attrDefIndex_ = 0;
      return this;
    }
    
    public bool HasAttrValue {
      get { return result.hasAttrValue; }
    }
    [global::System.CLSCompliant(false)]
    public uint AttrValue {
      get { return result.AttrValue; }
      set { SetAttrValue(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAttrValue(uint value) {
      PrepareBuilder();
      result.hasAttrValue = true;
      result.attrValue_ = value;
      return this;
    }
    public Builder ClearAttrValue() {
      PrepareBuilder();
      result.hasAttrValue = false;
      result.attrValue_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_PlayerEarnedRewardNotification() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate : pb::GeneratedMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.Builder> {
  private CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() { }
  private static readonly CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate defaultInstance = new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2PlayerOverwatchCaseUpdateFieldNames = new string[] { "caseid", "fractionid", "rpt_aimbot", "rpt_speedhack", "rpt_teamharm", "rpt_wallhack", "suspectid", "verdict_legacy" };
  private static readonly uint[] _cMsgGCCStrike15V2PlayerOverwatchCaseUpdateFieldTags = new uint[] { 8, 32, 40, 56, 64, 48, 24, 16 };
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate__FieldAccessorTable; }
  }
  
  public const int CaseidFieldNumber = 1;
  private bool hasCaseid;
  private ulong caseid_;
  public bool HasCaseid {
    get { return hasCaseid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Caseid {
    get { return caseid_; }
  }
  
  public const int VerdictLegacyFieldNumber = 2;
  private bool hasVerdictLegacy;
  private uint verdictLegacy_;
  public bool HasVerdictLegacy {
    get { return hasVerdictLegacy; }
  }
  [global::System.CLSCompliant(false)]
  public uint VerdictLegacy {
    get { return verdictLegacy_; }
  }
  
  public const int SuspectidFieldNumber = 3;
  private bool hasSuspectid;
  private uint suspectid_;
  public bool HasSuspectid {
    get { return hasSuspectid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Suspectid {
    get { return suspectid_; }
  }
  
  public const int FractionidFieldNumber = 4;
  private bool hasFractionid;
  private uint fractionid_;
  public bool HasFractionid {
    get { return hasFractionid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Fractionid {
    get { return fractionid_; }
  }
  
  public const int RptAimbotFieldNumber = 5;
  private bool hasRptAimbot;
  private uint rptAimbot_;
  public bool HasRptAimbot {
    get { return hasRptAimbot; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptAimbot {
    get { return rptAimbot_; }
  }
  
  public const int RptWallhackFieldNumber = 6;
  private bool hasRptWallhack;
  private uint rptWallhack_;
  public bool HasRptWallhack {
    get { return hasRptWallhack; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptWallhack {
    get { return rptWallhack_; }
  }
  
  public const int RptSpeedhackFieldNumber = 7;
  private bool hasRptSpeedhack;
  private uint rptSpeedhack_;
  public bool HasRptSpeedhack {
    get { return hasRptSpeedhack; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptSpeedhack {
    get { return rptSpeedhack_; }
  }
  
  public const int RptTeamharmFieldNumber = 8;
  private bool hasRptTeamharm;
  private uint rptTeamharm_;
  public bool HasRptTeamharm {
    get { return hasRptTeamharm; }
  }
  [global::System.CLSCompliant(false)]
  public uint RptTeamharm {
    get { return rptTeamharm_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2PlayerOverwatchCaseUpdateFieldNames;
    if (hasCaseid) {
      output.WriteUInt64(1, field_names[0], Caseid);
    }
    if (hasVerdictLegacy) {
      output.WriteUInt32(2, field_names[7], VerdictLegacy);
    }
    if (hasSuspectid) {
      output.WriteUInt32(3, field_names[6], Suspectid);
    }
    if (hasFractionid) {
      output.WriteUInt32(4, field_names[1], Fractionid);
    }
    if (hasRptAimbot) {
      output.WriteUInt32(5, field_names[2], RptAimbot);
    }
    if (hasRptWallhack) {
      output.WriteUInt32(6, field_names[5], RptWallhack);
    }
    if (hasRptSpeedhack) {
      output.WriteUInt32(7, field_names[3], RptSpeedhack);
    }
    if (hasRptTeamharm) {
      output.WriteUInt32(8, field_names[4], RptTeamharm);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCaseid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Caseid);
      }
      if (hasVerdictLegacy) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, VerdictLegacy);
      }
      if (hasSuspectid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Suspectid);
      }
      if (hasFractionid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Fractionid);
      }
      if (hasRptAimbot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, RptAimbot);
      }
      if (hasRptWallhack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, RptWallhack);
      }
      if (hasRptSpeedhack) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, RptSpeedhack);
      }
      if (hasRptTeamharm) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, RptTeamharm);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate result;
    
    private CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate original = result;
        result = new CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate) {
        return MergeFrom((CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate other) {
      if (other == global::CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCaseid) {
        Caseid = other.Caseid;
      }
      if (other.HasVerdictLegacy) {
        VerdictLegacy = other.VerdictLegacy;
      }
      if (other.HasSuspectid) {
        Suspectid = other.Suspectid;
      }
      if (other.HasFractionid) {
        Fractionid = other.Fractionid;
      }
      if (other.HasRptAimbot) {
        RptAimbot = other.RptAimbot;
      }
      if (other.HasRptWallhack) {
        RptWallhack = other.RptWallhack;
      }
      if (other.HasRptSpeedhack) {
        RptSpeedhack = other.RptSpeedhack;
      }
      if (other.HasRptTeamharm) {
        RptTeamharm = other.RptTeamharm;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2PlayerOverwatchCaseUpdateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2PlayerOverwatchCaseUpdateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCaseid = input.ReadUInt64(ref result.caseid_);
            break;
          }
          case 16: {
            result.hasVerdictLegacy = input.ReadUInt32(ref result.verdictLegacy_);
            break;
          }
          case 24: {
            result.hasSuspectid = input.ReadUInt32(ref result.suspectid_);
            break;
          }
          case 32: {
            result.hasFractionid = input.ReadUInt32(ref result.fractionid_);
            break;
          }
          case 40: {
            result.hasRptAimbot = input.ReadUInt32(ref result.rptAimbot_);
            break;
          }
          case 48: {
            result.hasRptWallhack = input.ReadUInt32(ref result.rptWallhack_);
            break;
          }
          case 56: {
            result.hasRptSpeedhack = input.ReadUInt32(ref result.rptSpeedhack_);
            break;
          }
          case 64: {
            result.hasRptTeamharm = input.ReadUInt32(ref result.rptTeamharm_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCaseid {
      get { return result.hasCaseid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Caseid {
      get { return result.Caseid; }
      set { SetCaseid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCaseid(ulong value) {
      PrepareBuilder();
      result.hasCaseid = true;
      result.caseid_ = value;
      return this;
    }
    public Builder ClearCaseid() {
      PrepareBuilder();
      result.hasCaseid = false;
      result.caseid_ = 0UL;
      return this;
    }
    
    public bool HasVerdictLegacy {
      get { return result.hasVerdictLegacy; }
    }
    [global::System.CLSCompliant(false)]
    public uint VerdictLegacy {
      get { return result.VerdictLegacy; }
      set { SetVerdictLegacy(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetVerdictLegacy(uint value) {
      PrepareBuilder();
      result.hasVerdictLegacy = true;
      result.verdictLegacy_ = value;
      return this;
    }
    public Builder ClearVerdictLegacy() {
      PrepareBuilder();
      result.hasVerdictLegacy = false;
      result.verdictLegacy_ = 0;
      return this;
    }
    
    public bool HasSuspectid {
      get { return result.hasSuspectid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Suspectid {
      get { return result.Suspectid; }
      set { SetSuspectid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSuspectid(uint value) {
      PrepareBuilder();
      result.hasSuspectid = true;
      result.suspectid_ = value;
      return this;
    }
    public Builder ClearSuspectid() {
      PrepareBuilder();
      result.hasSuspectid = false;
      result.suspectid_ = 0;
      return this;
    }
    
    public bool HasFractionid {
      get { return result.hasFractionid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Fractionid {
      get { return result.Fractionid; }
      set { SetFractionid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFractionid(uint value) {
      PrepareBuilder();
      result.hasFractionid = true;
      result.fractionid_ = value;
      return this;
    }
    public Builder ClearFractionid() {
      PrepareBuilder();
      result.hasFractionid = false;
      result.fractionid_ = 0;
      return this;
    }
    
    public bool HasRptAimbot {
      get { return result.hasRptAimbot; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptAimbot {
      get { return result.RptAimbot; }
      set { SetRptAimbot(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptAimbot(uint value) {
      PrepareBuilder();
      result.hasRptAimbot = true;
      result.rptAimbot_ = value;
      return this;
    }
    public Builder ClearRptAimbot() {
      PrepareBuilder();
      result.hasRptAimbot = false;
      result.rptAimbot_ = 0;
      return this;
    }
    
    public bool HasRptWallhack {
      get { return result.hasRptWallhack; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptWallhack {
      get { return result.RptWallhack; }
      set { SetRptWallhack(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptWallhack(uint value) {
      PrepareBuilder();
      result.hasRptWallhack = true;
      result.rptWallhack_ = value;
      return this;
    }
    public Builder ClearRptWallhack() {
      PrepareBuilder();
      result.hasRptWallhack = false;
      result.rptWallhack_ = 0;
      return this;
    }
    
    public bool HasRptSpeedhack {
      get { return result.hasRptSpeedhack; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptSpeedhack {
      get { return result.RptSpeedhack; }
      set { SetRptSpeedhack(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptSpeedhack(uint value) {
      PrepareBuilder();
      result.hasRptSpeedhack = true;
      result.rptSpeedhack_ = value;
      return this;
    }
    public Builder ClearRptSpeedhack() {
      PrepareBuilder();
      result.hasRptSpeedhack = false;
      result.rptSpeedhack_ = 0;
      return this;
    }
    
    public bool HasRptTeamharm {
      get { return result.hasRptTeamharm; }
    }
    [global::System.CLSCompliant(false)]
    public uint RptTeamharm {
      get { return result.RptTeamharm; }
      set { SetRptTeamharm(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRptTeamharm(uint value) {
      PrepareBuilder();
      result.hasRptTeamharm = true;
      result.rptTeamharm_ = value;
      return this;
    }
    public Builder ClearRptTeamharm() {
      PrepareBuilder();
      result.hasRptTeamharm = false;
      result.rptTeamharm_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_PlayerOverwatchCaseUpdate() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment : pb::GeneratedMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.Builder> {
  private CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() { }
  private static readonly CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment defaultInstance = new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2PlayerOverwatchCaseAssignmentFieldNames = new string[] { "caseid", "caseurl", "fractionid", "fractionrounds", "numrounds", "streakconvictions", "suspectid", "throttleseconds", "timestamp", "verdict" };
  private static readonly uint[] _cMsgGCCStrike15V2PlayerOverwatchCaseAssignmentFieldTags = new uint[] { 8, 18, 56, 72, 64, 80, 48, 40, 32, 24 };
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment__FieldAccessorTable; }
  }
  
  public const int CaseidFieldNumber = 1;
  private bool hasCaseid;
  private ulong caseid_;
  public bool HasCaseid {
    get { return hasCaseid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Caseid {
    get { return caseid_; }
  }
  
  public const int CaseurlFieldNumber = 2;
  private bool hasCaseurl;
  private string caseurl_ = "";
  public bool HasCaseurl {
    get { return hasCaseurl; }
  }
  public string Caseurl {
    get { return caseurl_; }
  }
  
  public const int VerdictFieldNumber = 3;
  private bool hasVerdict;
  private uint verdict_;
  public bool HasVerdict {
    get { return hasVerdict; }
  }
  [global::System.CLSCompliant(false)]
  public uint Verdict {
    get { return verdict_; }
  }
  
  public const int TimestampFieldNumber = 4;
  private bool hasTimestamp;
  private uint timestamp_;
  public bool HasTimestamp {
    get { return hasTimestamp; }
  }
  [global::System.CLSCompliant(false)]
  public uint Timestamp {
    get { return timestamp_; }
  }
  
  public const int ThrottlesecondsFieldNumber = 5;
  private bool hasThrottleseconds;
  private uint throttleseconds_;
  public bool HasThrottleseconds {
    get { return hasThrottleseconds; }
  }
  [global::System.CLSCompliant(false)]
  public uint Throttleseconds {
    get { return throttleseconds_; }
  }
  
  public const int SuspectidFieldNumber = 6;
  private bool hasSuspectid;
  private uint suspectid_;
  public bool HasSuspectid {
    get { return hasSuspectid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Suspectid {
    get { return suspectid_; }
  }
  
  public const int FractionidFieldNumber = 7;
  private bool hasFractionid;
  private uint fractionid_;
  public bool HasFractionid {
    get { return hasFractionid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Fractionid {
    get { return fractionid_; }
  }
  
  public const int NumroundsFieldNumber = 8;
  private bool hasNumrounds;
  private uint numrounds_;
  public bool HasNumrounds {
    get { return hasNumrounds; }
  }
  [global::System.CLSCompliant(false)]
  public uint Numrounds {
    get { return numrounds_; }
  }
  
  public const int FractionroundsFieldNumber = 9;
  private bool hasFractionrounds;
  private uint fractionrounds_;
  public bool HasFractionrounds {
    get { return hasFractionrounds; }
  }
  [global::System.CLSCompliant(false)]
  public uint Fractionrounds {
    get { return fractionrounds_; }
  }
  
  public const int StreakconvictionsFieldNumber = 10;
  private bool hasStreakconvictions;
  private int streakconvictions_;
  public bool HasStreakconvictions {
    get { return hasStreakconvictions; }
  }
  public int Streakconvictions {
    get { return streakconvictions_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2PlayerOverwatchCaseAssignmentFieldNames;
    if (hasCaseid) {
      output.WriteUInt64(1, field_names[0], Caseid);
    }
    if (hasCaseurl) {
      output.WriteString(2, field_names[1], Caseurl);
    }
    if (hasVerdict) {
      output.WriteUInt32(3, field_names[9], Verdict);
    }
    if (hasTimestamp) {
      output.WriteUInt32(4, field_names[8], Timestamp);
    }
    if (hasThrottleseconds) {
      output.WriteUInt32(5, field_names[7], Throttleseconds);
    }
    if (hasSuspectid) {
      output.WriteUInt32(6, field_names[6], Suspectid);
    }
    if (hasFractionid) {
      output.WriteUInt32(7, field_names[2], Fractionid);
    }
    if (hasNumrounds) {
      output.WriteUInt32(8, field_names[4], Numrounds);
    }
    if (hasFractionrounds) {
      output.WriteUInt32(9, field_names[3], Fractionrounds);
    }
    if (hasStreakconvictions) {
      output.WriteInt32(10, field_names[5], Streakconvictions);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCaseid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Caseid);
      }
      if (hasCaseurl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Caseurl);
      }
      if (hasVerdict) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Verdict);
      }
      if (hasTimestamp) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Timestamp);
      }
      if (hasThrottleseconds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Throttleseconds);
      }
      if (hasSuspectid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Suspectid);
      }
      if (hasFractionid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Fractionid);
      }
      if (hasNumrounds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Numrounds);
      }
      if (hasFractionrounds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Fractionrounds);
      }
      if (hasStreakconvictions) {
        size += pb::CodedOutputStream.ComputeInt32Size(10, Streakconvictions);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment result;
    
    private CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment original = result;
        result = new CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment) {
        return MergeFrom((CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment other) {
      if (other == global::CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCaseid) {
        Caseid = other.Caseid;
      }
      if (other.HasCaseurl) {
        Caseurl = other.Caseurl;
      }
      if (other.HasVerdict) {
        Verdict = other.Verdict;
      }
      if (other.HasTimestamp) {
        Timestamp = other.Timestamp;
      }
      if (other.HasThrottleseconds) {
        Throttleseconds = other.Throttleseconds;
      }
      if (other.HasSuspectid) {
        Suspectid = other.Suspectid;
      }
      if (other.HasFractionid) {
        Fractionid = other.Fractionid;
      }
      if (other.HasNumrounds) {
        Numrounds = other.Numrounds;
      }
      if (other.HasFractionrounds) {
        Fractionrounds = other.Fractionrounds;
      }
      if (other.HasStreakconvictions) {
        Streakconvictions = other.Streakconvictions;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2PlayerOverwatchCaseAssignmentFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2PlayerOverwatchCaseAssignmentFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCaseid = input.ReadUInt64(ref result.caseid_);
            break;
          }
          case 18: {
            result.hasCaseurl = input.ReadString(ref result.caseurl_);
            break;
          }
          case 24: {
            result.hasVerdict = input.ReadUInt32(ref result.verdict_);
            break;
          }
          case 32: {
            result.hasTimestamp = input.ReadUInt32(ref result.timestamp_);
            break;
          }
          case 40: {
            result.hasThrottleseconds = input.ReadUInt32(ref result.throttleseconds_);
            break;
          }
          case 48: {
            result.hasSuspectid = input.ReadUInt32(ref result.suspectid_);
            break;
          }
          case 56: {
            result.hasFractionid = input.ReadUInt32(ref result.fractionid_);
            break;
          }
          case 64: {
            result.hasNumrounds = input.ReadUInt32(ref result.numrounds_);
            break;
          }
          case 72: {
            result.hasFractionrounds = input.ReadUInt32(ref result.fractionrounds_);
            break;
          }
          case 80: {
            result.hasStreakconvictions = input.ReadInt32(ref result.streakconvictions_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCaseid {
      get { return result.hasCaseid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Caseid {
      get { return result.Caseid; }
      set { SetCaseid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCaseid(ulong value) {
      PrepareBuilder();
      result.hasCaseid = true;
      result.caseid_ = value;
      return this;
    }
    public Builder ClearCaseid() {
      PrepareBuilder();
      result.hasCaseid = false;
      result.caseid_ = 0UL;
      return this;
    }
    
    public bool HasCaseurl {
      get { return result.hasCaseurl; }
    }
    public string Caseurl {
      get { return result.Caseurl; }
      set { SetCaseurl(value); }
    }
    public Builder SetCaseurl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCaseurl = true;
      result.caseurl_ = value;
      return this;
    }
    public Builder ClearCaseurl() {
      PrepareBuilder();
      result.hasCaseurl = false;
      result.caseurl_ = "";
      return this;
    }
    
    public bool HasVerdict {
      get { return result.hasVerdict; }
    }
    [global::System.CLSCompliant(false)]
    public uint Verdict {
      get { return result.Verdict; }
      set { SetVerdict(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetVerdict(uint value) {
      PrepareBuilder();
      result.hasVerdict = true;
      result.verdict_ = value;
      return this;
    }
    public Builder ClearVerdict() {
      PrepareBuilder();
      result.hasVerdict = false;
      result.verdict_ = 0;
      return this;
    }
    
    public bool HasTimestamp {
      get { return result.hasTimestamp; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timestamp {
      get { return result.Timestamp; }
      set { SetTimestamp(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTimestamp(uint value) {
      PrepareBuilder();
      result.hasTimestamp = true;
      result.timestamp_ = value;
      return this;
    }
    public Builder ClearTimestamp() {
      PrepareBuilder();
      result.hasTimestamp = false;
      result.timestamp_ = 0;
      return this;
    }
    
    public bool HasThrottleseconds {
      get { return result.hasThrottleseconds; }
    }
    [global::System.CLSCompliant(false)]
    public uint Throttleseconds {
      get { return result.Throttleseconds; }
      set { SetThrottleseconds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetThrottleseconds(uint value) {
      PrepareBuilder();
      result.hasThrottleseconds = true;
      result.throttleseconds_ = value;
      return this;
    }
    public Builder ClearThrottleseconds() {
      PrepareBuilder();
      result.hasThrottleseconds = false;
      result.throttleseconds_ = 0;
      return this;
    }
    
    public bool HasSuspectid {
      get { return result.hasSuspectid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Suspectid {
      get { return result.Suspectid; }
      set { SetSuspectid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSuspectid(uint value) {
      PrepareBuilder();
      result.hasSuspectid = true;
      result.suspectid_ = value;
      return this;
    }
    public Builder ClearSuspectid() {
      PrepareBuilder();
      result.hasSuspectid = false;
      result.suspectid_ = 0;
      return this;
    }
    
    public bool HasFractionid {
      get { return result.hasFractionid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Fractionid {
      get { return result.Fractionid; }
      set { SetFractionid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFractionid(uint value) {
      PrepareBuilder();
      result.hasFractionid = true;
      result.fractionid_ = value;
      return this;
    }
    public Builder ClearFractionid() {
      PrepareBuilder();
      result.hasFractionid = false;
      result.fractionid_ = 0;
      return this;
    }
    
    public bool HasNumrounds {
      get { return result.hasNumrounds; }
    }
    [global::System.CLSCompliant(false)]
    public uint Numrounds {
      get { return result.Numrounds; }
      set { SetNumrounds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetNumrounds(uint value) {
      PrepareBuilder();
      result.hasNumrounds = true;
      result.numrounds_ = value;
      return this;
    }
    public Builder ClearNumrounds() {
      PrepareBuilder();
      result.hasNumrounds = false;
      result.numrounds_ = 0;
      return this;
    }
    
    public bool HasFractionrounds {
      get { return result.hasFractionrounds; }
    }
    [global::System.CLSCompliant(false)]
    public uint Fractionrounds {
      get { return result.Fractionrounds; }
      set { SetFractionrounds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFractionrounds(uint value) {
      PrepareBuilder();
      result.hasFractionrounds = true;
      result.fractionrounds_ = value;
      return this;
    }
    public Builder ClearFractionrounds() {
      PrepareBuilder();
      result.hasFractionrounds = false;
      result.fractionrounds_ = 0;
      return this;
    }
    
    public bool HasStreakconvictions {
      get { return result.hasStreakconvictions; }
    }
    public int Streakconvictions {
      get { return result.Streakconvictions; }
      set { SetStreakconvictions(value); }
    }
    public Builder SetStreakconvictions(int value) {
      PrepareBuilder();
      result.hasStreakconvictions = true;
      result.streakconvictions_ = value;
      return this;
    }
    public Builder ClearStreakconvictions() {
      PrepareBuilder();
      result.hasStreakconvictions = false;
      result.streakconvictions_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_PlayerOverwatchCaseAssignment() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus : pb::GeneratedMessage<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.Builder> {
  private CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() { }
  private static readonly CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus defaultInstance = new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2PlayerOverwatchCaseStatusFieldNames = new string[] { "caseid", "statusid" };
  private static readonly uint[] _cMsgGCCStrike15V2PlayerOverwatchCaseStatusFieldTags = new uint[] { 8, 16 };
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus__FieldAccessorTable; }
  }
  
  public const int CaseidFieldNumber = 1;
  private bool hasCaseid;
  private ulong caseid_;
  public bool HasCaseid {
    get { return hasCaseid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Caseid {
    get { return caseid_; }
  }
  
  public const int StatusidFieldNumber = 2;
  private bool hasStatusid;
  private uint statusid_;
  public bool HasStatusid {
    get { return hasStatusid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Statusid {
    get { return statusid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2PlayerOverwatchCaseStatusFieldNames;
    if (hasCaseid) {
      output.WriteUInt64(1, field_names[0], Caseid);
    }
    if (hasStatusid) {
      output.WriteUInt32(2, field_names[1], Statusid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasCaseid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Caseid);
      }
      if (hasStatusid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Statusid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus result;
    
    private CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus original = result;
        result = new CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus) {
        return MergeFrom((CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus other) {
      if (other == global::CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasCaseid) {
        Caseid = other.Caseid;
      }
      if (other.HasStatusid) {
        Statusid = other.Statusid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2PlayerOverwatchCaseStatusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2PlayerOverwatchCaseStatusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasCaseid = input.ReadUInt64(ref result.caseid_);
            break;
          }
          case 16: {
            result.hasStatusid = input.ReadUInt32(ref result.statusid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasCaseid {
      get { return result.hasCaseid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Caseid {
      get { return result.Caseid; }
      set { SetCaseid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCaseid(ulong value) {
      PrepareBuilder();
      result.hasCaseid = true;
      result.caseid_ = value;
      return this;
    }
    public Builder ClearCaseid() {
      PrepareBuilder();
      result.hasCaseid = false;
      result.caseid_ = 0UL;
      return this;
    }
    
    public bool HasStatusid {
      get { return result.hasStatusid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Statusid {
      get { return result.Statusid; }
      set { SetStatusid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetStatusid(uint value) {
      PrepareBuilder();
      result.hasStatusid = true;
      result.statusid_ = value;
      return this;
    }
    public Builder ClearStatusid() {
      PrepareBuilder();
      result.hasStatusid = false;
      result.statusid_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_PlayerOverwatchCaseStatus() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CClientHeaderOverwatchEvidence : pb::GeneratedMessage<CClientHeaderOverwatchEvidence, CClientHeaderOverwatchEvidence.Builder> {
  private CClientHeaderOverwatchEvidence() { }
  private static readonly CClientHeaderOverwatchEvidence defaultInstance = new CClientHeaderOverwatchEvidence().MakeReadOnly();
  private static readonly string[] _cClientHeaderOverwatchEvidenceFieldNames = new string[] { "accountid", "caseid" };
  private static readonly uint[] _cClientHeaderOverwatchEvidenceFieldTags = new uint[] { 8, 16 };
  public static CClientHeaderOverwatchEvidence DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CClientHeaderOverwatchEvidence DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CClientHeaderOverwatchEvidence ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CClientHeaderOverwatchEvidence__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CClientHeaderOverwatchEvidence, CClientHeaderOverwatchEvidence.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CClientHeaderOverwatchEvidence__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public const int CaseidFieldNumber = 2;
  private bool hasCaseid;
  private ulong caseid_;
  public bool HasCaseid {
    get { return hasCaseid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Caseid {
    get { return caseid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cClientHeaderOverwatchEvidenceFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    if (hasCaseid) {
      output.WriteUInt64(2, field_names[1], Caseid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      if (hasCaseid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Caseid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CClientHeaderOverwatchEvidence ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CClientHeaderOverwatchEvidence ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CClientHeaderOverwatchEvidence MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CClientHeaderOverwatchEvidence prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CClientHeaderOverwatchEvidence, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CClientHeaderOverwatchEvidence cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CClientHeaderOverwatchEvidence result;
    
    private CClientHeaderOverwatchEvidence PrepareBuilder() {
      if (resultIsReadOnly) {
        CClientHeaderOverwatchEvidence original = result;
        result = new CClientHeaderOverwatchEvidence();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CClientHeaderOverwatchEvidence MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CClientHeaderOverwatchEvidence.Descriptor; }
    }
    
    public override CClientHeaderOverwatchEvidence DefaultInstanceForType {
      get { return global::CClientHeaderOverwatchEvidence.DefaultInstance; }
    }
    
    public override CClientHeaderOverwatchEvidence BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CClientHeaderOverwatchEvidence) {
        return MergeFrom((CClientHeaderOverwatchEvidence) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CClientHeaderOverwatchEvidence other) {
      if (other == global::CClientHeaderOverwatchEvidence.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      if (other.HasCaseid) {
        Caseid = other.Caseid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cClientHeaderOverwatchEvidenceFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cClientHeaderOverwatchEvidenceFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
          case 16: {
            result.hasCaseid = input.ReadUInt64(ref result.caseid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
    
    public bool HasCaseid {
      get { return result.hasCaseid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Caseid {
      get { return result.Caseid; }
      set { SetCaseid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCaseid(ulong value) {
      PrepareBuilder();
      result.hasCaseid = true;
      result.caseid_ = value;
      return this;
    }
    public Builder ClearCaseid() {
      PrepareBuilder();
      result.hasCaseid = false;
      result.caseid_ = 0UL;
      return this;
    }
  }
  static CClientHeaderOverwatchEvidence() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_GC2ClientTextMsg : pb::GeneratedMessage<CMsgGCCStrike15_v2_GC2ClientTextMsg, CMsgGCCStrike15_v2_GC2ClientTextMsg.Builder> {
  private CMsgGCCStrike15_v2_GC2ClientTextMsg() { }
  private static readonly CMsgGCCStrike15_v2_GC2ClientTextMsg defaultInstance = new CMsgGCCStrike15_v2_GC2ClientTextMsg().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2GC2ClientTextMsgFieldNames = new string[] { "id", "payload", "type" };
  private static readonly uint[] _cMsgGCCStrike15V2GC2ClientTextMsgFieldTags = new uint[] { 8, 26, 16 };
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_GC2ClientTextMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_GC2ClientTextMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_GC2ClientTextMsg, CMsgGCCStrike15_v2_GC2ClientTextMsg.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GC2ClientTextMsg__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private uint id_;
  public bool HasId {
    get { return hasId; }
  }
  [global::System.CLSCompliant(false)]
  public uint Id {
    get { return id_; }
  }
  
  public const int TypeFieldNumber = 2;
  private bool hasType;
  private uint type_;
  public bool HasType {
    get { return hasType; }
  }
  [global::System.CLSCompliant(false)]
  public uint Type {
    get { return type_; }
  }
  
  public const int PayloadFieldNumber = 3;
  private bool hasPayload;
  private pb::ByteString payload_ = pb::ByteString.Empty;
  public bool HasPayload {
    get { return hasPayload; }
  }
  public pb::ByteString Payload {
    get { return payload_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2GC2ClientTextMsgFieldNames;
    if (hasId) {
      output.WriteUInt32(1, field_names[0], Id);
    }
    if (hasType) {
      output.WriteUInt32(2, field_names[2], Type);
    }
    if (hasPayload) {
      output.WriteBytes(3, field_names[1], Payload);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      if (hasType) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Type);
      }
      if (hasPayload) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, Payload);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GC2ClientTextMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_GC2ClientTextMsg MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_GC2ClientTextMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_GC2ClientTextMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_GC2ClientTextMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_GC2ClientTextMsg result;
    
    private CMsgGCCStrike15_v2_GC2ClientTextMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_GC2ClientTextMsg original = result;
        result = new CMsgGCCStrike15_v2_GC2ClientTextMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_GC2ClientTextMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_GC2ClientTextMsg.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_GC2ClientTextMsg DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_GC2ClientTextMsg.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_GC2ClientTextMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_GC2ClientTextMsg) {
        return MergeFrom((CMsgGCCStrike15_v2_GC2ClientTextMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_GC2ClientTextMsg other) {
      if (other == global::CMsgGCCStrike15_v2_GC2ClientTextMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.HasType) {
        Type = other.Type;
      }
      if (other.HasPayload) {
        Payload = other.Payload;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2GC2ClientTextMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2GC2ClientTextMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadUInt32(ref result.id_);
            break;
          }
          case 16: {
            result.hasType = input.ReadUInt32(ref result.type_);
            break;
          }
          case 26: {
            result.hasPayload = input.ReadBytes(ref result.payload_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetId(uint value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public bool HasType {
      get { return result.hasType; }
    }
    [global::System.CLSCompliant(false)]
    public uint Type {
      get { return result.Type; }
      set { SetType(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetType(uint value) {
      PrepareBuilder();
      result.hasType = true;
      result.type_ = value;
      return this;
    }
    public Builder ClearType() {
      PrepareBuilder();
      result.hasType = false;
      result.type_ = 0;
      return this;
    }
    
    public bool HasPayload {
      get { return result.hasPayload; }
    }
    public pb::ByteString Payload {
      get { return result.Payload; }
      set { SetPayload(value); }
    }
    public Builder SetPayload(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPayload = true;
      result.payload_ = value;
      return this;
    }
    public Builder ClearPayload() {
      PrepareBuilder();
      result.hasPayload = false;
      result.payload_ = pb::ByteString.Empty;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_GC2ClientTextMsg() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_Client2GCTextMsg : pb::GeneratedMessage<CMsgGCCStrike15_v2_Client2GCTextMsg, CMsgGCCStrike15_v2_Client2GCTextMsg.Builder> {
  private CMsgGCCStrike15_v2_Client2GCTextMsg() { }
  private static readonly CMsgGCCStrike15_v2_Client2GCTextMsg defaultInstance = new CMsgGCCStrike15_v2_Client2GCTextMsg().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2Client2GCTextMsgFieldNames = new string[] { "args", "id" };
  private static readonly uint[] _cMsgGCCStrike15V2Client2GCTextMsgFieldTags = new uint[] { 18, 8 };
  public static CMsgGCCStrike15_v2_Client2GCTextMsg DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_Client2GCTextMsg DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_Client2GCTextMsg ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_Client2GCTextMsg, CMsgGCCStrike15_v2_Client2GCTextMsg.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Client2GCTextMsg__FieldAccessorTable; }
  }
  
  public const int IdFieldNumber = 1;
  private bool hasId;
  private uint id_;
  public bool HasId {
    get { return hasId; }
  }
  [global::System.CLSCompliant(false)]
  public uint Id {
    get { return id_; }
  }
  
  public const int ArgsFieldNumber = 2;
  private pbc::PopsicleList<pb::ByteString> args_ = new pbc::PopsicleList<pb::ByteString>();
  public scg::IList<pb::ByteString> ArgsList {
    get { return pbc::Lists.AsReadOnly(args_); }
  }
  public int ArgsCount {
    get { return args_.Count; }
  }
  public pb::ByteString GetArgs(int index) {
    return args_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2Client2GCTextMsgFieldNames;
    if (hasId) {
      output.WriteUInt32(1, field_names[1], Id);
    }
    if (args_.Count > 0) {
      output.WriteBytesArray(2, field_names[0], args_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Id);
      }
      {
        int dataSize = 0;
        foreach (pb::ByteString element in ArgsList) {
          dataSize += pb::CodedOutputStream.ComputeBytesSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * args_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCTextMsg ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_Client2GCTextMsg MakeReadOnly() {
    args_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_Client2GCTextMsg prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_Client2GCTextMsg, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_Client2GCTextMsg cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_Client2GCTextMsg result;
    
    private CMsgGCCStrike15_v2_Client2GCTextMsg PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_Client2GCTextMsg original = result;
        result = new CMsgGCCStrike15_v2_Client2GCTextMsg();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_Client2GCTextMsg MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_Client2GCTextMsg.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_Client2GCTextMsg DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_Client2GCTextMsg.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_Client2GCTextMsg BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_Client2GCTextMsg) {
        return MergeFrom((CMsgGCCStrike15_v2_Client2GCTextMsg) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_Client2GCTextMsg other) {
      if (other == global::CMsgGCCStrike15_v2_Client2GCTextMsg.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasId) {
        Id = other.Id;
      }
      if (other.args_.Count != 0) {
        result.args_.Add(other.args_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2Client2GCTextMsgFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2Client2GCTextMsgFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasId = input.ReadUInt32(ref result.id_);
            break;
          }
          case 18: {
            input.ReadBytesArray(tag, field_name, result.args_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasId {
      get { return result.hasId; }
    }
    [global::System.CLSCompliant(false)]
    public uint Id {
      get { return result.Id; }
      set { SetId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetId(uint value) {
      PrepareBuilder();
      result.hasId = true;
      result.id_ = value;
      return this;
    }
    public Builder ClearId() {
      PrepareBuilder();
      result.hasId = false;
      result.id_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<pb::ByteString> ArgsList {
      get { return PrepareBuilder().args_; }
    }
    public int ArgsCount {
      get { return result.ArgsCount; }
    }
    public pb::ByteString GetArgs(int index) {
      return result.GetArgs(index);
    }
    public Builder SetArgs(int index, pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.args_[index] = value;
      return this;
    }
    public Builder AddArgs(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.args_.Add(value);
      return this;
    }
    public Builder AddRangeArgs(scg::IEnumerable<pb::ByteString> values) {
      PrepareBuilder();
      result.args_.Add(values);
      return this;
    }
    public Builder ClearArgs() {
      PrepareBuilder();
      result.args_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_Client2GCTextMsg() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGC_ServerQuestUpdateData : pb::GeneratedMessage<CMsgGC_ServerQuestUpdateData, CMsgGC_ServerQuestUpdateData.Builder> {
  private CMsgGC_ServerQuestUpdateData() { }
  private static readonly CMsgGC_ServerQuestUpdateData defaultInstance = new CMsgGC_ServerQuestUpdateData().MakeReadOnly();
  private static readonly string[] _cMsgGCServerQuestUpdateDataFieldNames = new string[] { "player_quest_data" };
  private static readonly uint[] _cMsgGCServerQuestUpdateDataFieldTags = new uint[] { 10 };
  public static CMsgGC_ServerQuestUpdateData DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGC_ServerQuestUpdateData DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGC_ServerQuestUpdateData ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGC_ServerQuestUpdateData__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGC_ServerQuestUpdateData, CMsgGC_ServerQuestUpdateData.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGC_ServerQuestUpdateData__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class PlayerQuestData : pb::GeneratedMessage<PlayerQuestData, PlayerQuestData.Builder> {
      private PlayerQuestData() { }
      private static readonly PlayerQuestData defaultInstance = new PlayerQuestData().MakeReadOnly();
      private static readonly string[] _playerQuestDataFieldNames = new string[] { "quest_item_data", "quester_account_id" };
      private static readonly uint[] _playerQuestDataFieldTags = new uint[] { 18, 8 };
      public static PlayerQuestData DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override PlayerQuestData DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override PlayerQuestData ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<PlayerQuestData, PlayerQuestData.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData__FieldAccessorTable; }
      }
      
      #region Nested types
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public static partial class Types {
        [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
        public sealed partial class QuestItemData : pb::GeneratedMessage<QuestItemData, QuestItemData.Builder> {
          private QuestItemData() { }
          private static readonly QuestItemData defaultInstance = new QuestItemData().MakeReadOnly();
          private static readonly string[] _questItemDataFieldNames = new string[] { "quest_item_id", "quest_points_earned" };
          private static readonly uint[] _questItemDataFieldTags = new uint[] { 8, 16 };
          public static QuestItemData DefaultInstance {
            get { return defaultInstance; }
          }
          
          public override QuestItemData DefaultInstanceForType {
            get { return DefaultInstance; }
          }
          
          protected override QuestItemData ThisMessage {
            get { return this; }
          }
          
          public static pbd::MessageDescriptor Descriptor {
            get { return global::Cstrike15Gcmessages.internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__Descriptor; }
          }
          
          protected override pb::FieldAccess.FieldAccessorTable<QuestItemData, QuestItemData.Builder> InternalFieldAccessors {
            get { return global::Cstrike15Gcmessages.internal__static_CMsgGC_ServerQuestUpdateData_PlayerQuestData_QuestItemData__FieldAccessorTable; }
          }
          
          public const int QuestItemIdFieldNumber = 1;
          private bool hasQuestItemId;
          private ulong questItemId_;
          public bool HasQuestItemId {
            get { return hasQuestItemId; }
          }
          [global::System.CLSCompliant(false)]
          public ulong QuestItemId {
            get { return questItemId_; }
          }
          
          public const int QuestPointsEarnedFieldNumber = 2;
          private bool hasQuestPointsEarned;
          private int questPointsEarned_;
          public bool HasQuestPointsEarned {
            get { return hasQuestPointsEarned; }
          }
          public int QuestPointsEarned {
            get { return questPointsEarned_; }
          }
          
          public override bool IsInitialized {
            get {
              return true;
            }
          }
          
          public override void WriteTo(pb::ICodedOutputStream output) {
            int size = SerializedSize;
            string[] field_names = _questItemDataFieldNames;
            if (hasQuestItemId) {
              output.WriteUInt64(1, field_names[0], QuestItemId);
            }
            if (hasQuestPointsEarned) {
              output.WriteInt32(2, field_names[1], QuestPointsEarned);
            }
            UnknownFields.WriteTo(output);
          }
          
          private int memoizedSerializedSize = -1;
          public override int SerializedSize {
            get {
              int size = memoizedSerializedSize;
              if (size != -1) return size;
              
              size = 0;
              if (hasQuestItemId) {
                size += pb::CodedOutputStream.ComputeUInt64Size(1, QuestItemId);
              }
              if (hasQuestPointsEarned) {
                size += pb::CodedOutputStream.ComputeInt32Size(2, QuestPointsEarned);
              }
              size += UnknownFields.SerializedSize;
              memoizedSerializedSize = size;
              return size;
            }
          }
          
          public static QuestItemData ParseFrom(pb::ByteString data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static QuestItemData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static QuestItemData ParseFrom(byte[] data) {
            return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
          }
          public static QuestItemData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
          }
          public static QuestItemData ParseFrom(global::System.IO.Stream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static QuestItemData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          public static QuestItemData ParseDelimitedFrom(global::System.IO.Stream input) {
            return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
          }
          public static QuestItemData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
            return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
          }
          public static QuestItemData ParseFrom(pb::ICodedInputStream input) {
            return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
          }
          public static QuestItemData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
            return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
          }
          private QuestItemData MakeReadOnly() {
            return this;
          }
          
          public static Builder CreateBuilder() { return new Builder(); }
          public override Builder ToBuilder() { return CreateBuilder(this); }
          public override Builder CreateBuilderForType() { return new Builder(); }
          public static Builder CreateBuilder(QuestItemData prototype) {
            return new Builder(prototype);
          }
          
          [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
          public sealed partial class Builder : pb::GeneratedBuilder<QuestItemData, Builder> {
            protected override Builder ThisBuilder {
              get { return this; }
            }
            public Builder() {
              result = DefaultInstance;
              resultIsReadOnly = true;
            }
            internal Builder(QuestItemData cloneFrom) {
              result = cloneFrom;
              resultIsReadOnly = true;
            }
            
            private bool resultIsReadOnly;
            private QuestItemData result;
            
            private QuestItemData PrepareBuilder() {
              if (resultIsReadOnly) {
                QuestItemData original = result;
                result = new QuestItemData();
                resultIsReadOnly = false;
                MergeFrom(original);
              }
              return result;
            }
            
            public override bool IsInitialized {
              get { return result.IsInitialized; }
            }
            
            protected override QuestItemData MessageBeingBuilt {
              get { return PrepareBuilder(); }
            }
            
            public override Builder Clear() {
              result = DefaultInstance;
              resultIsReadOnly = true;
              return this;
            }
            
            public override Builder Clone() {
              if (resultIsReadOnly) {
                return new Builder(result);
              } else {
                return new Builder().MergeFrom(result);
              }
            }
            
            public override pbd::MessageDescriptor DescriptorForType {
              get { return global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.Descriptor; }
            }
            
            public override QuestItemData DefaultInstanceForType {
              get { return global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.DefaultInstance; }
            }
            
            public override QuestItemData BuildPartial() {
              if (resultIsReadOnly) {
                return result;
              }
              resultIsReadOnly = true;
              return result.MakeReadOnly();
            }
            
            public override Builder MergeFrom(pb::IMessage other) {
              if (other is QuestItemData) {
                return MergeFrom((QuestItemData) other);
              } else {
                base.MergeFrom(other);
                return this;
              }
            }
            
            public override Builder MergeFrom(QuestItemData other) {
              if (other == global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.DefaultInstance) return this;
              PrepareBuilder();
              if (other.HasQuestItemId) {
                QuestItemId = other.QuestItemId;
              }
              if (other.HasQuestPointsEarned) {
                QuestPointsEarned = other.QuestPointsEarned;
              }
              this.MergeUnknownFields(other.UnknownFields);
              return this;
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input) {
              return MergeFrom(input, pb::ExtensionRegistry.Empty);
            }
            
            public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
              PrepareBuilder();
              pb::UnknownFieldSet.Builder unknownFields = null;
              uint tag;
              string field_name;
              while (input.ReadTag(out tag, out field_name)) {
                if(tag == 0 && field_name != null) {
                  int field_ordinal = global::System.Array.BinarySearch(_questItemDataFieldNames, field_name, global::System.StringComparer.Ordinal);
                  if(field_ordinal >= 0)
                    tag = _questItemDataFieldTags[field_ordinal];
                  else {
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    continue;
                  }
                }
                switch (tag) {
                  case 0: {
                    throw pb::InvalidProtocolBufferException.InvalidTag();
                  }
                  default: {
                    if (pb::WireFormat.IsEndGroupTag(tag)) {
                      if (unknownFields != null) {
                        this.UnknownFields = unknownFields.Build();
                      }
                      return this;
                    }
                    if (unknownFields == null) {
                      unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                    }
                    ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                    break;
                  }
                  case 8: {
                    result.hasQuestItemId = input.ReadUInt64(ref result.questItemId_);
                    break;
                  }
                  case 16: {
                    result.hasQuestPointsEarned = input.ReadInt32(ref result.questPointsEarned_);
                    break;
                  }
                }
              }
              
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            
            
            public bool HasQuestItemId {
              get { return result.hasQuestItemId; }
            }
            [global::System.CLSCompliant(false)]
            public ulong QuestItemId {
              get { return result.QuestItemId; }
              set { SetQuestItemId(value); }
            }
            [global::System.CLSCompliant(false)]
            public Builder SetQuestItemId(ulong value) {
              PrepareBuilder();
              result.hasQuestItemId = true;
              result.questItemId_ = value;
              return this;
            }
            public Builder ClearQuestItemId() {
              PrepareBuilder();
              result.hasQuestItemId = false;
              result.questItemId_ = 0UL;
              return this;
            }
            
            public bool HasQuestPointsEarned {
              get { return result.hasQuestPointsEarned; }
            }
            public int QuestPointsEarned {
              get { return result.QuestPointsEarned; }
              set { SetQuestPointsEarned(value); }
            }
            public Builder SetQuestPointsEarned(int value) {
              PrepareBuilder();
              result.hasQuestPointsEarned = true;
              result.questPointsEarned_ = value;
              return this;
            }
            public Builder ClearQuestPointsEarned() {
              PrepareBuilder();
              result.hasQuestPointsEarned = false;
              result.questPointsEarned_ = 0;
              return this;
            }
          }
          static QuestItemData() {
            object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
          }
        }
        
      }
      #endregion
      
      public const int QuesterAccountIdFieldNumber = 1;
      private bool hasQuesterAccountId;
      private uint questerAccountId_;
      public bool HasQuesterAccountId {
        get { return hasQuesterAccountId; }
      }
      [global::System.CLSCompliant(false)]
      public uint QuesterAccountId {
        get { return questerAccountId_; }
      }
      
      public const int QuestItemDataFieldNumber = 2;
      private pbc::PopsicleList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData> questItemData_ = new pbc::PopsicleList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData>();
      public scg::IList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData> QuestItemDataList {
        get { return questItemData_; }
      }
      public int QuestItemDataCount {
        get { return questItemData_.Count; }
      }
      public global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData GetQuestItemData(int index) {
        return questItemData_[index];
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _playerQuestDataFieldNames;
        if (hasQuesterAccountId) {
          output.WriteUInt32(1, field_names[1], QuesterAccountId);
        }
        if (questItemData_.Count > 0) {
          output.WriteMessageArray(2, field_names[0], questItemData_);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasQuesterAccountId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, QuesterAccountId);
          }
          foreach (global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData element in QuestItemDataList) {
            size += pb::CodedOutputStream.ComputeMessageSize(2, element);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static PlayerQuestData ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static PlayerQuestData ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static PlayerQuestData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static PlayerQuestData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private PlayerQuestData MakeReadOnly() {
        questItemData_.MakeReadOnly();
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(PlayerQuestData prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<PlayerQuestData, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(PlayerQuestData cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private PlayerQuestData result;
        
        private PlayerQuestData PrepareBuilder() {
          if (resultIsReadOnly) {
            PlayerQuestData original = result;
            result = new PlayerQuestData();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override PlayerQuestData MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Descriptor; }
        }
        
        public override PlayerQuestData DefaultInstanceForType {
          get { return global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.DefaultInstance; }
        }
        
        public override PlayerQuestData BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is PlayerQuestData) {
            return MergeFrom((PlayerQuestData) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(PlayerQuestData other) {
          if (other == global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasQuesterAccountId) {
            QuesterAccountId = other.QuesterAccountId;
          }
          if (other.questItemData_.Count != 0) {
            result.questItemData_.Add(other.questItemData_);
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_playerQuestDataFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _playerQuestDataFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasQuesterAccountId = input.ReadUInt32(ref result.questerAccountId_);
                break;
              }
              case 18: {
                input.ReadMessageArray(tag, field_name, result.questItemData_, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.DefaultInstance, extensionRegistry);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasQuesterAccountId {
          get { return result.hasQuesterAccountId; }
        }
        [global::System.CLSCompliant(false)]
        public uint QuesterAccountId {
          get { return result.QuesterAccountId; }
          set { SetQuesterAccountId(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetQuesterAccountId(uint value) {
          PrepareBuilder();
          result.hasQuesterAccountId = true;
          result.questerAccountId_ = value;
          return this;
        }
        public Builder ClearQuesterAccountId() {
          PrepareBuilder();
          result.hasQuesterAccountId = false;
          result.questerAccountId_ = 0;
          return this;
        }
        
        public pbc::IPopsicleList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData> QuestItemDataList {
          get { return PrepareBuilder().questItemData_; }
        }
        public int QuestItemDataCount {
          get { return result.QuestItemDataCount; }
        }
        public global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData GetQuestItemData(int index) {
          return result.GetQuestItemData(index);
        }
        public Builder SetQuestItemData(int index, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.questItemData_[index] = value;
          return this;
        }
        public Builder SetQuestItemData(int index, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.questItemData_[index] = builderForValue.Build();
          return this;
        }
        public Builder AddQuestItemData(global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData value) {
          pb::ThrowHelper.ThrowIfNull(value, "value");
          PrepareBuilder();
          result.questItemData_.Add(value);
          return this;
        }
        public Builder AddQuestItemData(global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData.Builder builderForValue) {
          pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
          PrepareBuilder();
          result.questItemData_.Add(builderForValue.Build());
          return this;
        }
        public Builder AddRangeQuestItemData(scg::IEnumerable<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Types.QuestItemData> values) {
          PrepareBuilder();
          result.questItemData_.Add(values);
          return this;
        }
        public Builder ClearQuestItemData() {
          PrepareBuilder();
          result.questItemData_.Clear();
          return this;
        }
      }
      static PlayerQuestData() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int PlayerQuestDataFieldNumber = 1;
  private pbc::PopsicleList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData> playerQuestData_ = new pbc::PopsicleList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData>();
  public scg::IList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData> PlayerQuestDataList {
    get { return playerQuestData_; }
  }
  public int PlayerQuestDataCount {
    get { return playerQuestData_.Count; }
  }
  public global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData GetPlayerQuestData(int index) {
    return playerQuestData_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCServerQuestUpdateDataFieldNames;
    if (playerQuestData_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], playerQuestData_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData element in PlayerQuestDataList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGC_ServerQuestUpdateData ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGC_ServerQuestUpdateData ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGC_ServerQuestUpdateData MakeReadOnly() {
    playerQuestData_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGC_ServerQuestUpdateData prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGC_ServerQuestUpdateData, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGC_ServerQuestUpdateData cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGC_ServerQuestUpdateData result;
    
    private CMsgGC_ServerQuestUpdateData PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGC_ServerQuestUpdateData original = result;
        result = new CMsgGC_ServerQuestUpdateData();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGC_ServerQuestUpdateData MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGC_ServerQuestUpdateData.Descriptor; }
    }
    
    public override CMsgGC_ServerQuestUpdateData DefaultInstanceForType {
      get { return global::CMsgGC_ServerQuestUpdateData.DefaultInstance; }
    }
    
    public override CMsgGC_ServerQuestUpdateData BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGC_ServerQuestUpdateData) {
        return MergeFrom((CMsgGC_ServerQuestUpdateData) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGC_ServerQuestUpdateData other) {
      if (other == global::CMsgGC_ServerQuestUpdateData.DefaultInstance) return this;
      PrepareBuilder();
      if (other.playerQuestData_.Count != 0) {
        result.playerQuestData_.Add(other.playerQuestData_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCServerQuestUpdateDataFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCServerQuestUpdateDataFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.playerQuestData_, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData> PlayerQuestDataList {
      get { return PrepareBuilder().playerQuestData_; }
    }
    public int PlayerQuestDataCount {
      get { return result.PlayerQuestDataCount; }
    }
    public global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData GetPlayerQuestData(int index) {
      return result.GetPlayerQuestData(index);
    }
    public Builder SetPlayerQuestData(int index, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerQuestData_[index] = value;
      return this;
    }
    public Builder SetPlayerQuestData(int index, global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerQuestData_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddPlayerQuestData(global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.playerQuestData_.Add(value);
      return this;
    }
    public Builder AddPlayerQuestData(global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.playerQuestData_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangePlayerQuestData(scg::IEnumerable<global::CMsgGC_ServerQuestUpdateData.Types.PlayerQuestData> values) {
      PrepareBuilder();
      result.playerQuestData_.Add(values);
      return this;
    }
    public Builder ClearPlayerQuestData() {
      PrepareBuilder();
      result.playerQuestData_.Clear();
      return this;
    }
  }
  static CMsgGC_ServerQuestUpdateData() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchEndRunRewardDrops : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchEndRunRewardDrops, CMsgGCCStrike15_v2_MatchEndRunRewardDrops.Builder> {
  private CMsgGCCStrike15_v2_MatchEndRunRewardDrops() { }
  private static readonly CMsgGCCStrike15_v2_MatchEndRunRewardDrops defaultInstance = new CMsgGCCStrike15_v2_MatchEndRunRewardDrops().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchEndRunRewardDropsFieldNames = new string[] { "match_end_quest_data", "serverinfo" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchEndRunRewardDropsFieldTags = new uint[] { 34, 26 };
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchEndRunRewardDrops DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchEndRunRewardDrops ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchEndRunRewardDrops, CMsgGCCStrike15_v2_MatchEndRunRewardDrops.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchEndRunRewardDrops__FieldAccessorTable; }
  }
  
  public const int ServerinfoFieldNumber = 3;
  private bool hasServerinfo;
  private global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse serverinfo_;
  public bool HasServerinfo {
    get { return hasServerinfo; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse Serverinfo {
    get { return serverinfo_ ?? global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.DefaultInstance; }
  }
  
  public const int MatchEndQuestDataFieldNumber = 4;
  private bool hasMatchEndQuestData;
  private global::CMsgGC_ServerQuestUpdateData matchEndQuestData_;
  public bool HasMatchEndQuestData {
    get { return hasMatchEndQuestData; }
  }
  public global::CMsgGC_ServerQuestUpdateData MatchEndQuestData {
    get { return matchEndQuestData_ ?? global::CMsgGC_ServerQuestUpdateData.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchEndRunRewardDropsFieldNames;
    if (hasServerinfo) {
      output.WriteMessage(3, field_names[1], Serverinfo);
    }
    if (hasMatchEndQuestData) {
      output.WriteMessage(4, field_names[0], MatchEndQuestData);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServerinfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Serverinfo);
      }
      if (hasMatchEndQuestData) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, MatchEndQuestData);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRunRewardDrops ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchEndRunRewardDrops MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchEndRunRewardDrops prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchEndRunRewardDrops, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchEndRunRewardDrops cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchEndRunRewardDrops result;
    
    private CMsgGCCStrike15_v2_MatchEndRunRewardDrops PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchEndRunRewardDrops original = result;
        result = new CMsgGCCStrike15_v2_MatchEndRunRewardDrops();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchEndRunRewardDrops MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchEndRunRewardDrops DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchEndRunRewardDrops BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchEndRunRewardDrops) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchEndRunRewardDrops) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchEndRunRewardDrops other) {
      if (other == global::CMsgGCCStrike15_v2_MatchEndRunRewardDrops.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasServerinfo) {
        MergeServerinfo(other.Serverinfo);
      }
      if (other.HasMatchEndQuestData) {
        MergeMatchEndQuestData(other.MatchEndQuestData);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchEndRunRewardDropsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchEndRunRewardDropsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 26: {
            global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.CreateBuilder();
            if (result.hasServerinfo) {
              subBuilder.MergeFrom(Serverinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Serverinfo = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::CMsgGC_ServerQuestUpdateData.Builder subBuilder = global::CMsgGC_ServerQuestUpdateData.CreateBuilder();
            if (result.hasMatchEndQuestData) {
              subBuilder.MergeFrom(MatchEndQuestData);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            MatchEndQuestData = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasServerinfo {
     get { return result.hasServerinfo; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse Serverinfo {
      get { return result.Serverinfo; }
      set { SetServerinfo(value); }
    }
    public Builder SetServerinfo(global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasServerinfo = true;
      result.serverinfo_ = value;
      return this;
    }
    public Builder SetServerinfo(global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasServerinfo = true;
      result.serverinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeServerinfo(global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasServerinfo &&
          result.serverinfo_ != global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.DefaultInstance) {
          result.serverinfo_ = global::CMsgGCCStrike15_v2_MatchmakingServerReservationResponse.CreateBuilder(result.serverinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.serverinfo_ = value;
      }
      result.hasServerinfo = true;
      return this;
    }
    public Builder ClearServerinfo() {
      PrepareBuilder();
      result.hasServerinfo = false;
      result.serverinfo_ = null;
      return this;
    }
    
    public bool HasMatchEndQuestData {
     get { return result.hasMatchEndQuestData; }
    }
    public global::CMsgGC_ServerQuestUpdateData MatchEndQuestData {
      get { return result.MatchEndQuestData; }
      set { SetMatchEndQuestData(value); }
    }
    public Builder SetMatchEndQuestData(global::CMsgGC_ServerQuestUpdateData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMatchEndQuestData = true;
      result.matchEndQuestData_ = value;
      return this;
    }
    public Builder SetMatchEndQuestData(global::CMsgGC_ServerQuestUpdateData.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasMatchEndQuestData = true;
      result.matchEndQuestData_ = builderForValue.Build();
      return this;
    }
    public Builder MergeMatchEndQuestData(global::CMsgGC_ServerQuestUpdateData value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasMatchEndQuestData &&
          result.matchEndQuestData_ != global::CMsgGC_ServerQuestUpdateData.DefaultInstance) {
          result.matchEndQuestData_ = global::CMsgGC_ServerQuestUpdateData.CreateBuilder(result.matchEndQuestData_).MergeFrom(value).BuildPartial();
      } else {
        result.matchEndQuestData_ = value;
      }
      result.hasMatchEndQuestData = true;
      return this;
    }
    public Builder ClearMatchEndQuestData() {
      PrepareBuilder();
      result.hasMatchEndQuestData = false;
      result.matchEndQuestData_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchEndRunRewardDrops() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CEconItemPreviewDataBlock : pb::GeneratedMessage<CEconItemPreviewDataBlock, CEconItemPreviewDataBlock.Builder> {
  private CEconItemPreviewDataBlock() { }
  private static readonly CEconItemPreviewDataBlock defaultInstance = new CEconItemPreviewDataBlock().MakeReadOnly();
  private static readonly string[] _cEconItemPreviewDataBlockFieldNames = new string[] { "accountid", "customname", "defindex", "inventory", "itemid", "killeaterscoretype", "killeatervalue", "origin", "paintindex", "paintseed", "paintwear", "quality", "questid", "rarity", "stickers" };
  private static readonly uint[] _cEconItemPreviewDataBlockFieldTags = new uint[] { 8, 90, 24, 104, 16, 72, 80, 112, 32, 64, 56, 48, 120, 40, 98 };
  public static CEconItemPreviewDataBlock DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CEconItemPreviewDataBlock DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CEconItemPreviewDataBlock ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CEconItemPreviewDataBlock__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CEconItemPreviewDataBlock, CEconItemPreviewDataBlock.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CEconItemPreviewDataBlock__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class Sticker : pb::GeneratedMessage<Sticker, Sticker.Builder> {
      private Sticker() { }
      private static readonly Sticker defaultInstance = new Sticker().MakeReadOnly();
      private static readonly string[] _stickerFieldNames = new string[] { "rotation", "scale", "slot", "sticker_id", "wear" };
      private static readonly uint[] _stickerFieldTags = new uint[] { 45, 37, 8, 16, 29 };
      public static Sticker DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override Sticker DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override Sticker ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CEconItemPreviewDataBlock_Sticker__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<Sticker, Sticker.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CEconItemPreviewDataBlock_Sticker__FieldAccessorTable; }
      }
      
      public const int SlotFieldNumber = 1;
      private bool hasSlot;
      private uint slot_;
      public bool HasSlot {
        get { return hasSlot; }
      }
      [global::System.CLSCompliant(false)]
      public uint Slot {
        get { return slot_; }
      }
      
      public const int StickerIdFieldNumber = 2;
      private bool hasStickerId;
      private uint stickerId_;
      public bool HasStickerId {
        get { return hasStickerId; }
      }
      [global::System.CLSCompliant(false)]
      public uint StickerId {
        get { return stickerId_; }
      }
      
      public const int WearFieldNumber = 3;
      private bool hasWear;
      private float wear_;
      public bool HasWear {
        get { return hasWear; }
      }
      public float Wear {
        get { return wear_; }
      }
      
      public const int ScaleFieldNumber = 4;
      private bool hasScale;
      private float scale_;
      public bool HasScale {
        get { return hasScale; }
      }
      public float Scale {
        get { return scale_; }
      }
      
      public const int RotationFieldNumber = 5;
      private bool hasRotation;
      private float rotation_;
      public bool HasRotation {
        get { return hasRotation; }
      }
      public float Rotation {
        get { return rotation_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _stickerFieldNames;
        if (hasSlot) {
          output.WriteUInt32(1, field_names[2], Slot);
        }
        if (hasStickerId) {
          output.WriteUInt32(2, field_names[3], StickerId);
        }
        if (hasWear) {
          output.WriteFloat(3, field_names[4], Wear);
        }
        if (hasScale) {
          output.WriteFloat(4, field_names[1], Scale);
        }
        if (hasRotation) {
          output.WriteFloat(5, field_names[0], Rotation);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasSlot) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, Slot);
          }
          if (hasStickerId) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, StickerId);
          }
          if (hasWear) {
            size += pb::CodedOutputStream.ComputeFloatSize(3, Wear);
          }
          if (hasScale) {
            size += pb::CodedOutputStream.ComputeFloatSize(4, Scale);
          }
          if (hasRotation) {
            size += pb::CodedOutputStream.ComputeFloatSize(5, Rotation);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static Sticker ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Sticker ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Sticker ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static Sticker ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static Sticker ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Sticker ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static Sticker ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static Sticker ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static Sticker ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static Sticker ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private Sticker MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(Sticker prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<Sticker, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(Sticker cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private Sticker result;
        
        private Sticker PrepareBuilder() {
          if (resultIsReadOnly) {
            Sticker original = result;
            result = new Sticker();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override Sticker MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CEconItemPreviewDataBlock.Types.Sticker.Descriptor; }
        }
        
        public override Sticker DefaultInstanceForType {
          get { return global::CEconItemPreviewDataBlock.Types.Sticker.DefaultInstance; }
        }
        
        public override Sticker BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is Sticker) {
            return MergeFrom((Sticker) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(Sticker other) {
          if (other == global::CEconItemPreviewDataBlock.Types.Sticker.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSlot) {
            Slot = other.Slot;
          }
          if (other.HasStickerId) {
            StickerId = other.StickerId;
          }
          if (other.HasWear) {
            Wear = other.Wear;
          }
          if (other.HasScale) {
            Scale = other.Scale;
          }
          if (other.HasRotation) {
            Rotation = other.Rotation;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_stickerFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _stickerFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasSlot = input.ReadUInt32(ref result.slot_);
                break;
              }
              case 16: {
                result.hasStickerId = input.ReadUInt32(ref result.stickerId_);
                break;
              }
              case 29: {
                result.hasWear = input.ReadFloat(ref result.wear_);
                break;
              }
              case 37: {
                result.hasScale = input.ReadFloat(ref result.scale_);
                break;
              }
              case 45: {
                result.hasRotation = input.ReadFloat(ref result.rotation_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSlot {
          get { return result.hasSlot; }
        }
        [global::System.CLSCompliant(false)]
        public uint Slot {
          get { return result.Slot; }
          set { SetSlot(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetSlot(uint value) {
          PrepareBuilder();
          result.hasSlot = true;
          result.slot_ = value;
          return this;
        }
        public Builder ClearSlot() {
          PrepareBuilder();
          result.hasSlot = false;
          result.slot_ = 0;
          return this;
        }
        
        public bool HasStickerId {
          get { return result.hasStickerId; }
        }
        [global::System.CLSCompliant(false)]
        public uint StickerId {
          get { return result.StickerId; }
          set { SetStickerId(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetStickerId(uint value) {
          PrepareBuilder();
          result.hasStickerId = true;
          result.stickerId_ = value;
          return this;
        }
        public Builder ClearStickerId() {
          PrepareBuilder();
          result.hasStickerId = false;
          result.stickerId_ = 0;
          return this;
        }
        
        public bool HasWear {
          get { return result.hasWear; }
        }
        public float Wear {
          get { return result.Wear; }
          set { SetWear(value); }
        }
        public Builder SetWear(float value) {
          PrepareBuilder();
          result.hasWear = true;
          result.wear_ = value;
          return this;
        }
        public Builder ClearWear() {
          PrepareBuilder();
          result.hasWear = false;
          result.wear_ = 0F;
          return this;
        }
        
        public bool HasScale {
          get { return result.hasScale; }
        }
        public float Scale {
          get { return result.Scale; }
          set { SetScale(value); }
        }
        public Builder SetScale(float value) {
          PrepareBuilder();
          result.hasScale = true;
          result.scale_ = value;
          return this;
        }
        public Builder ClearScale() {
          PrepareBuilder();
          result.hasScale = false;
          result.scale_ = 0F;
          return this;
        }
        
        public bool HasRotation {
          get { return result.hasRotation; }
        }
        public float Rotation {
          get { return result.Rotation; }
          set { SetRotation(value); }
        }
        public Builder SetRotation(float value) {
          PrepareBuilder();
          result.hasRotation = true;
          result.rotation_ = value;
          return this;
        }
        public Builder ClearRotation() {
          PrepareBuilder();
          result.hasRotation = false;
          result.rotation_ = 0F;
          return this;
        }
      }
      static Sticker() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public const int ItemidFieldNumber = 2;
  private bool hasItemid;
  private ulong itemid_;
  public bool HasItemid {
    get { return hasItemid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Itemid {
    get { return itemid_; }
  }
  
  public const int DefindexFieldNumber = 3;
  private bool hasDefindex;
  private uint defindex_;
  public bool HasDefindex {
    get { return hasDefindex; }
  }
  [global::System.CLSCompliant(false)]
  public uint Defindex {
    get { return defindex_; }
  }
  
  public const int PaintindexFieldNumber = 4;
  private bool hasPaintindex;
  private uint paintindex_;
  public bool HasPaintindex {
    get { return hasPaintindex; }
  }
  [global::System.CLSCompliant(false)]
  public uint Paintindex {
    get { return paintindex_; }
  }
  
  public const int RarityFieldNumber = 5;
  private bool hasRarity;
  private uint rarity_;
  public bool HasRarity {
    get { return hasRarity; }
  }
  [global::System.CLSCompliant(false)]
  public uint Rarity {
    get { return rarity_; }
  }
  
  public const int QualityFieldNumber = 6;
  private bool hasQuality;
  private uint quality_;
  public bool HasQuality {
    get { return hasQuality; }
  }
  [global::System.CLSCompliant(false)]
  public uint Quality {
    get { return quality_; }
  }
  
  public const int PaintwearFieldNumber = 7;
  private bool hasPaintwear;
  private uint paintwear_;
  public bool HasPaintwear {
    get { return hasPaintwear; }
  }
  [global::System.CLSCompliant(false)]
  public uint Paintwear {
    get { return paintwear_; }
  }
  
  public const int PaintseedFieldNumber = 8;
  private bool hasPaintseed;
  private uint paintseed_;
  public bool HasPaintseed {
    get { return hasPaintseed; }
  }
  [global::System.CLSCompliant(false)]
  public uint Paintseed {
    get { return paintseed_; }
  }
  
  public const int KilleaterscoretypeFieldNumber = 9;
  private bool hasKilleaterscoretype;
  private uint killeaterscoretype_;
  public bool HasKilleaterscoretype {
    get { return hasKilleaterscoretype; }
  }
  [global::System.CLSCompliant(false)]
  public uint Killeaterscoretype {
    get { return killeaterscoretype_; }
  }
  
  public const int KilleatervalueFieldNumber = 10;
  private bool hasKilleatervalue;
  private uint killeatervalue_;
  public bool HasKilleatervalue {
    get { return hasKilleatervalue; }
  }
  [global::System.CLSCompliant(false)]
  public uint Killeatervalue {
    get { return killeatervalue_; }
  }
  
  public const int CustomnameFieldNumber = 11;
  private bool hasCustomname;
  private string customname_ = "";
  public bool HasCustomname {
    get { return hasCustomname; }
  }
  public string Customname {
    get { return customname_; }
  }
  
  public const int StickersFieldNumber = 12;
  private pbc::PopsicleList<global::CEconItemPreviewDataBlock.Types.Sticker> stickers_ = new pbc::PopsicleList<global::CEconItemPreviewDataBlock.Types.Sticker>();
  public scg::IList<global::CEconItemPreviewDataBlock.Types.Sticker> StickersList {
    get { return stickers_; }
  }
  public int StickersCount {
    get { return stickers_.Count; }
  }
  public global::CEconItemPreviewDataBlock.Types.Sticker GetStickers(int index) {
    return stickers_[index];
  }
  
  public const int InventoryFieldNumber = 13;
  private bool hasInventory;
  private uint inventory_;
  public bool HasInventory {
    get { return hasInventory; }
  }
  [global::System.CLSCompliant(false)]
  public uint Inventory {
    get { return inventory_; }
  }
  
  public const int OriginFieldNumber = 14;
  private bool hasOrigin;
  private uint origin_;
  public bool HasOrigin {
    get { return hasOrigin; }
  }
  [global::System.CLSCompliant(false)]
  public uint Origin {
    get { return origin_; }
  }
  
  public const int QuestidFieldNumber = 15;
  private bool hasQuestid;
  private uint questid_;
  public bool HasQuestid {
    get { return hasQuestid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Questid {
    get { return questid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cEconItemPreviewDataBlockFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    if (hasItemid) {
      output.WriteUInt64(2, field_names[4], Itemid);
    }
    if (hasDefindex) {
      output.WriteUInt32(3, field_names[2], Defindex);
    }
    if (hasPaintindex) {
      output.WriteUInt32(4, field_names[8], Paintindex);
    }
    if (hasRarity) {
      output.WriteUInt32(5, field_names[13], Rarity);
    }
    if (hasQuality) {
      output.WriteUInt32(6, field_names[11], Quality);
    }
    if (hasPaintwear) {
      output.WriteUInt32(7, field_names[10], Paintwear);
    }
    if (hasPaintseed) {
      output.WriteUInt32(8, field_names[9], Paintseed);
    }
    if (hasKilleaterscoretype) {
      output.WriteUInt32(9, field_names[5], Killeaterscoretype);
    }
    if (hasKilleatervalue) {
      output.WriteUInt32(10, field_names[6], Killeatervalue);
    }
    if (hasCustomname) {
      output.WriteString(11, field_names[1], Customname);
    }
    if (stickers_.Count > 0) {
      output.WriteMessageArray(12, field_names[14], stickers_);
    }
    if (hasInventory) {
      output.WriteUInt32(13, field_names[3], Inventory);
    }
    if (hasOrigin) {
      output.WriteUInt32(14, field_names[7], Origin);
    }
    if (hasQuestid) {
      output.WriteUInt32(15, field_names[12], Questid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      if (hasItemid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Itemid);
      }
      if (hasDefindex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Defindex);
      }
      if (hasPaintindex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Paintindex);
      }
      if (hasRarity) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Rarity);
      }
      if (hasQuality) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Quality);
      }
      if (hasPaintwear) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Paintwear);
      }
      if (hasPaintseed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Paintseed);
      }
      if (hasKilleaterscoretype) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Killeaterscoretype);
      }
      if (hasKilleatervalue) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Killeatervalue);
      }
      if (hasCustomname) {
        size += pb::CodedOutputStream.ComputeStringSize(11, Customname);
      }
      foreach (global::CEconItemPreviewDataBlock.Types.Sticker element in StickersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(12, element);
      }
      if (hasInventory) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, Inventory);
      }
      if (hasOrigin) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, Origin);
      }
      if (hasQuestid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, Questid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CEconItemPreviewDataBlock ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CEconItemPreviewDataBlock ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CEconItemPreviewDataBlock MakeReadOnly() {
    stickers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CEconItemPreviewDataBlock prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CEconItemPreviewDataBlock, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CEconItemPreviewDataBlock cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CEconItemPreviewDataBlock result;
    
    private CEconItemPreviewDataBlock PrepareBuilder() {
      if (resultIsReadOnly) {
        CEconItemPreviewDataBlock original = result;
        result = new CEconItemPreviewDataBlock();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CEconItemPreviewDataBlock MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CEconItemPreviewDataBlock.Descriptor; }
    }
    
    public override CEconItemPreviewDataBlock DefaultInstanceForType {
      get { return global::CEconItemPreviewDataBlock.DefaultInstance; }
    }
    
    public override CEconItemPreviewDataBlock BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CEconItemPreviewDataBlock) {
        return MergeFrom((CEconItemPreviewDataBlock) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CEconItemPreviewDataBlock other) {
      if (other == global::CEconItemPreviewDataBlock.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      if (other.HasItemid) {
        Itemid = other.Itemid;
      }
      if (other.HasDefindex) {
        Defindex = other.Defindex;
      }
      if (other.HasPaintindex) {
        Paintindex = other.Paintindex;
      }
      if (other.HasRarity) {
        Rarity = other.Rarity;
      }
      if (other.HasQuality) {
        Quality = other.Quality;
      }
      if (other.HasPaintwear) {
        Paintwear = other.Paintwear;
      }
      if (other.HasPaintseed) {
        Paintseed = other.Paintseed;
      }
      if (other.HasKilleaterscoretype) {
        Killeaterscoretype = other.Killeaterscoretype;
      }
      if (other.HasKilleatervalue) {
        Killeatervalue = other.Killeatervalue;
      }
      if (other.HasCustomname) {
        Customname = other.Customname;
      }
      if (other.stickers_.Count != 0) {
        result.stickers_.Add(other.stickers_);
      }
      if (other.HasInventory) {
        Inventory = other.Inventory;
      }
      if (other.HasOrigin) {
        Origin = other.Origin;
      }
      if (other.HasQuestid) {
        Questid = other.Questid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cEconItemPreviewDataBlockFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cEconItemPreviewDataBlockFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
          case 16: {
            result.hasItemid = input.ReadUInt64(ref result.itemid_);
            break;
          }
          case 24: {
            result.hasDefindex = input.ReadUInt32(ref result.defindex_);
            break;
          }
          case 32: {
            result.hasPaintindex = input.ReadUInt32(ref result.paintindex_);
            break;
          }
          case 40: {
            result.hasRarity = input.ReadUInt32(ref result.rarity_);
            break;
          }
          case 48: {
            result.hasQuality = input.ReadUInt32(ref result.quality_);
            break;
          }
          case 56: {
            result.hasPaintwear = input.ReadUInt32(ref result.paintwear_);
            break;
          }
          case 64: {
            result.hasPaintseed = input.ReadUInt32(ref result.paintseed_);
            break;
          }
          case 72: {
            result.hasKilleaterscoretype = input.ReadUInt32(ref result.killeaterscoretype_);
            break;
          }
          case 80: {
            result.hasKilleatervalue = input.ReadUInt32(ref result.killeatervalue_);
            break;
          }
          case 90: {
            result.hasCustomname = input.ReadString(ref result.customname_);
            break;
          }
          case 98: {
            input.ReadMessageArray(tag, field_name, result.stickers_, global::CEconItemPreviewDataBlock.Types.Sticker.DefaultInstance, extensionRegistry);
            break;
          }
          case 104: {
            result.hasInventory = input.ReadUInt32(ref result.inventory_);
            break;
          }
          case 112: {
            result.hasOrigin = input.ReadUInt32(ref result.origin_);
            break;
          }
          case 120: {
            result.hasQuestid = input.ReadUInt32(ref result.questid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
    
    public bool HasItemid {
      get { return result.hasItemid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Itemid {
      get { return result.Itemid; }
      set { SetItemid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetItemid(ulong value) {
      PrepareBuilder();
      result.hasItemid = true;
      result.itemid_ = value;
      return this;
    }
    public Builder ClearItemid() {
      PrepareBuilder();
      result.hasItemid = false;
      result.itemid_ = 0UL;
      return this;
    }
    
    public bool HasDefindex {
      get { return result.hasDefindex; }
    }
    [global::System.CLSCompliant(false)]
    public uint Defindex {
      get { return result.Defindex; }
      set { SetDefindex(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDefindex(uint value) {
      PrepareBuilder();
      result.hasDefindex = true;
      result.defindex_ = value;
      return this;
    }
    public Builder ClearDefindex() {
      PrepareBuilder();
      result.hasDefindex = false;
      result.defindex_ = 0;
      return this;
    }
    
    public bool HasPaintindex {
      get { return result.hasPaintindex; }
    }
    [global::System.CLSCompliant(false)]
    public uint Paintindex {
      get { return result.Paintindex; }
      set { SetPaintindex(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPaintindex(uint value) {
      PrepareBuilder();
      result.hasPaintindex = true;
      result.paintindex_ = value;
      return this;
    }
    public Builder ClearPaintindex() {
      PrepareBuilder();
      result.hasPaintindex = false;
      result.paintindex_ = 0;
      return this;
    }
    
    public bool HasRarity {
      get { return result.hasRarity; }
    }
    [global::System.CLSCompliant(false)]
    public uint Rarity {
      get { return result.Rarity; }
      set { SetRarity(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRarity(uint value) {
      PrepareBuilder();
      result.hasRarity = true;
      result.rarity_ = value;
      return this;
    }
    public Builder ClearRarity() {
      PrepareBuilder();
      result.hasRarity = false;
      result.rarity_ = 0;
      return this;
    }
    
    public bool HasQuality {
      get { return result.hasQuality; }
    }
    [global::System.CLSCompliant(false)]
    public uint Quality {
      get { return result.Quality; }
      set { SetQuality(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetQuality(uint value) {
      PrepareBuilder();
      result.hasQuality = true;
      result.quality_ = value;
      return this;
    }
    public Builder ClearQuality() {
      PrepareBuilder();
      result.hasQuality = false;
      result.quality_ = 0;
      return this;
    }
    
    public bool HasPaintwear {
      get { return result.hasPaintwear; }
    }
    [global::System.CLSCompliant(false)]
    public uint Paintwear {
      get { return result.Paintwear; }
      set { SetPaintwear(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPaintwear(uint value) {
      PrepareBuilder();
      result.hasPaintwear = true;
      result.paintwear_ = value;
      return this;
    }
    public Builder ClearPaintwear() {
      PrepareBuilder();
      result.hasPaintwear = false;
      result.paintwear_ = 0;
      return this;
    }
    
    public bool HasPaintseed {
      get { return result.hasPaintseed; }
    }
    [global::System.CLSCompliant(false)]
    public uint Paintseed {
      get { return result.Paintseed; }
      set { SetPaintseed(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPaintseed(uint value) {
      PrepareBuilder();
      result.hasPaintseed = true;
      result.paintseed_ = value;
      return this;
    }
    public Builder ClearPaintseed() {
      PrepareBuilder();
      result.hasPaintseed = false;
      result.paintseed_ = 0;
      return this;
    }
    
    public bool HasKilleaterscoretype {
      get { return result.hasKilleaterscoretype; }
    }
    [global::System.CLSCompliant(false)]
    public uint Killeaterscoretype {
      get { return result.Killeaterscoretype; }
      set { SetKilleaterscoretype(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetKilleaterscoretype(uint value) {
      PrepareBuilder();
      result.hasKilleaterscoretype = true;
      result.killeaterscoretype_ = value;
      return this;
    }
    public Builder ClearKilleaterscoretype() {
      PrepareBuilder();
      result.hasKilleaterscoretype = false;
      result.killeaterscoretype_ = 0;
      return this;
    }
    
    public bool HasKilleatervalue {
      get { return result.hasKilleatervalue; }
    }
    [global::System.CLSCompliant(false)]
    public uint Killeatervalue {
      get { return result.Killeatervalue; }
      set { SetKilleatervalue(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetKilleatervalue(uint value) {
      PrepareBuilder();
      result.hasKilleatervalue = true;
      result.killeatervalue_ = value;
      return this;
    }
    public Builder ClearKilleatervalue() {
      PrepareBuilder();
      result.hasKilleatervalue = false;
      result.killeatervalue_ = 0;
      return this;
    }
    
    public bool HasCustomname {
      get { return result.hasCustomname; }
    }
    public string Customname {
      get { return result.Customname; }
      set { SetCustomname(value); }
    }
    public Builder SetCustomname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCustomname = true;
      result.customname_ = value;
      return this;
    }
    public Builder ClearCustomname() {
      PrepareBuilder();
      result.hasCustomname = false;
      result.customname_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::CEconItemPreviewDataBlock.Types.Sticker> StickersList {
      get { return PrepareBuilder().stickers_; }
    }
    public int StickersCount {
      get { return result.StickersCount; }
    }
    public global::CEconItemPreviewDataBlock.Types.Sticker GetStickers(int index) {
      return result.GetStickers(index);
    }
    public Builder SetStickers(int index, global::CEconItemPreviewDataBlock.Types.Sticker value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.stickers_[index] = value;
      return this;
    }
    public Builder SetStickers(int index, global::CEconItemPreviewDataBlock.Types.Sticker.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.stickers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddStickers(global::CEconItemPreviewDataBlock.Types.Sticker value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.stickers_.Add(value);
      return this;
    }
    public Builder AddStickers(global::CEconItemPreviewDataBlock.Types.Sticker.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.stickers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeStickers(scg::IEnumerable<global::CEconItemPreviewDataBlock.Types.Sticker> values) {
      PrepareBuilder();
      result.stickers_.Add(values);
      return this;
    }
    public Builder ClearStickers() {
      PrepareBuilder();
      result.stickers_.Clear();
      return this;
    }
    
    public bool HasInventory {
      get { return result.hasInventory; }
    }
    [global::System.CLSCompliant(false)]
    public uint Inventory {
      get { return result.Inventory; }
      set { SetInventory(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetInventory(uint value) {
      PrepareBuilder();
      result.hasInventory = true;
      result.inventory_ = value;
      return this;
    }
    public Builder ClearInventory() {
      PrepareBuilder();
      result.hasInventory = false;
      result.inventory_ = 0;
      return this;
    }
    
    public bool HasOrigin {
      get { return result.hasOrigin; }
    }
    [global::System.CLSCompliant(false)]
    public uint Origin {
      get { return result.Origin; }
      set { SetOrigin(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetOrigin(uint value) {
      PrepareBuilder();
      result.hasOrigin = true;
      result.origin_ = value;
      return this;
    }
    public Builder ClearOrigin() {
      PrepareBuilder();
      result.hasOrigin = false;
      result.origin_ = 0;
      return this;
    }
    
    public bool HasQuestid {
      get { return result.hasQuestid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Questid {
      get { return result.Questid; }
      set { SetQuestid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetQuestid(uint value) {
      PrepareBuilder();
      result.hasQuestid = true;
      result.questid_ = value;
      return this;
    }
    public Builder ClearQuestid() {
      PrepareBuilder();
      result.hasQuestid = false;
      result.questid_ = 0;
      return this;
    }
  }
  static CEconItemPreviewDataBlock() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchEndRewardDropsNotification : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.Builder> {
  private CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() { }
  private static readonly CMsgGCCStrike15_v2_MatchEndRewardDropsNotification defaultInstance = new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchEndRewardDropsNotificationFieldNames = new string[] { "iteminfo" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchEndRewardDropsNotificationFieldTags = new uint[] { 50 };
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchEndRewardDropsNotification DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchEndRewardDropsNotification__FieldAccessorTable; }
  }
  
  public const int IteminfoFieldNumber = 6;
  private bool hasIteminfo;
  private global::CEconItemPreviewDataBlock iteminfo_;
  public bool HasIteminfo {
    get { return hasIteminfo; }
  }
  public global::CEconItemPreviewDataBlock Iteminfo {
    get { return iteminfo_ ?? global::CEconItemPreviewDataBlock.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchEndRewardDropsNotificationFieldNames;
    if (hasIteminfo) {
      output.WriteMessage(6, field_names[0], Iteminfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIteminfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Iteminfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchEndRewardDropsNotification MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchEndRewardDropsNotification, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchEndRewardDropsNotification result;
    
    private CMsgGCCStrike15_v2_MatchEndRewardDropsNotification PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchEndRewardDropsNotification original = result;
        result = new CMsgGCCStrike15_v2_MatchEndRewardDropsNotification();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchEndRewardDropsNotification MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchEndRewardDropsNotification DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchEndRewardDropsNotification BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchEndRewardDropsNotification) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchEndRewardDropsNotification) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchEndRewardDropsNotification other) {
      if (other == global::CMsgGCCStrike15_v2_MatchEndRewardDropsNotification.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIteminfo) {
        MergeIteminfo(other.Iteminfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchEndRewardDropsNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchEndRewardDropsNotificationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 50: {
            global::CEconItemPreviewDataBlock.Builder subBuilder = global::CEconItemPreviewDataBlock.CreateBuilder();
            if (result.hasIteminfo) {
              subBuilder.MergeFrom(Iteminfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Iteminfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIteminfo {
     get { return result.hasIteminfo; }
    }
    public global::CEconItemPreviewDataBlock Iteminfo {
      get { return result.Iteminfo; }
      set { SetIteminfo(value); }
    }
    public Builder SetIteminfo(global::CEconItemPreviewDataBlock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIteminfo = true;
      result.iteminfo_ = value;
      return this;
    }
    public Builder SetIteminfo(global::CEconItemPreviewDataBlock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasIteminfo = true;
      result.iteminfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeIteminfo(global::CEconItemPreviewDataBlock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasIteminfo &&
          result.iteminfo_ != global::CEconItemPreviewDataBlock.DefaultInstance) {
          result.iteminfo_ = global::CEconItemPreviewDataBlock.CreateBuilder(result.iteminfo_).MergeFrom(value).BuildPartial();
      } else {
        result.iteminfo_ = value;
      }
      result.hasIteminfo = true;
      return this;
    }
    public Builder ClearIteminfo() {
      PrepareBuilder();
      result.hasIteminfo = false;
      result.iteminfo_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchEndRewardDropsNotification() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgItemAcknowledged : pb::GeneratedMessage<CMsgItemAcknowledged, CMsgItemAcknowledged.Builder> {
  private CMsgItemAcknowledged() { }
  private static readonly CMsgItemAcknowledged defaultInstance = new CMsgItemAcknowledged().MakeReadOnly();
  private static readonly string[] _cMsgItemAcknowledgedFieldNames = new string[] { "iteminfo" };
  private static readonly uint[] _cMsgItemAcknowledgedFieldTags = new uint[] { 10 };
  public static CMsgItemAcknowledged DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgItemAcknowledged DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgItemAcknowledged ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgItemAcknowledged__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgItemAcknowledged, CMsgItemAcknowledged.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgItemAcknowledged__FieldAccessorTable; }
  }
  
  public const int IteminfoFieldNumber = 1;
  private bool hasIteminfo;
  private global::CEconItemPreviewDataBlock iteminfo_;
  public bool HasIteminfo {
    get { return hasIteminfo; }
  }
  public global::CEconItemPreviewDataBlock Iteminfo {
    get { return iteminfo_ ?? global::CEconItemPreviewDataBlock.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgItemAcknowledgedFieldNames;
    if (hasIteminfo) {
      output.WriteMessage(1, field_names[0], Iteminfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIteminfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Iteminfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgItemAcknowledged ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgItemAcknowledged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgItemAcknowledged MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgItemAcknowledged prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgItemAcknowledged, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgItemAcknowledged cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgItemAcknowledged result;
    
    private CMsgItemAcknowledged PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgItemAcknowledged original = result;
        result = new CMsgItemAcknowledged();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgItemAcknowledged MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgItemAcknowledged.Descriptor; }
    }
    
    public override CMsgItemAcknowledged DefaultInstanceForType {
      get { return global::CMsgItemAcknowledged.DefaultInstance; }
    }
    
    public override CMsgItemAcknowledged BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgItemAcknowledged) {
        return MergeFrom((CMsgItemAcknowledged) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgItemAcknowledged other) {
      if (other == global::CMsgItemAcknowledged.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIteminfo) {
        MergeIteminfo(other.Iteminfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgItemAcknowledgedFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgItemAcknowledgedFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::CEconItemPreviewDataBlock.Builder subBuilder = global::CEconItemPreviewDataBlock.CreateBuilder();
            if (result.hasIteminfo) {
              subBuilder.MergeFrom(Iteminfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Iteminfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIteminfo {
     get { return result.hasIteminfo; }
    }
    public global::CEconItemPreviewDataBlock Iteminfo {
      get { return result.Iteminfo; }
      set { SetIteminfo(value); }
    }
    public Builder SetIteminfo(global::CEconItemPreviewDataBlock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIteminfo = true;
      result.iteminfo_ = value;
      return this;
    }
    public Builder SetIteminfo(global::CEconItemPreviewDataBlock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasIteminfo = true;
      result.iteminfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeIteminfo(global::CEconItemPreviewDataBlock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasIteminfo &&
          result.iteminfo_ != global::CEconItemPreviewDataBlock.DefaultInstance) {
          result.iteminfo_ = global::CEconItemPreviewDataBlock.CreateBuilder(result.iteminfo_).MergeFrom(value).BuildPartial();
      } else {
        result.iteminfo_ = value;
      }
      result.hasIteminfo = true;
      return this;
    }
    public Builder ClearIteminfo() {
      PrepareBuilder();
      result.hasIteminfo = false;
      result.iteminfo_ = null;
      return this;
    }
  }
  static CMsgItemAcknowledged() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest : pb::GeneratedMessage<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.Builder> {
  private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() { }
  private static readonly CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest defaultInstance = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequestFieldNames = new string[] { "param_a", "param_d", "param_s" };
  private static readonly uint[] _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequestFieldTags = new uint[] { 16, 24, 8 };
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest__FieldAccessorTable; }
  }
  
  public const int ParamSFieldNumber = 1;
  private bool hasParamS;
  private ulong paramS_;
  public bool HasParamS {
    get { return hasParamS; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ParamS {
    get { return paramS_; }
  }
  
  public const int ParamAFieldNumber = 2;
  private bool hasParamA;
  private ulong paramA_;
  public bool HasParamA {
    get { return hasParamA; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ParamA {
    get { return paramA_; }
  }
  
  public const int ParamDFieldNumber = 3;
  private bool hasParamD;
  private ulong paramD_;
  public bool HasParamD {
    get { return hasParamD; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ParamD {
    get { return paramD_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequestFieldNames;
    if (hasParamS) {
      output.WriteUInt64(1, field_names[2], ParamS);
    }
    if (hasParamA) {
      output.WriteUInt64(2, field_names[0], ParamA);
    }
    if (hasParamD) {
      output.WriteUInt64(3, field_names[1], ParamD);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasParamS) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, ParamS);
      }
      if (hasParamA) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, ParamA);
      }
      if (hasParamD) {
        size += pb::CodedOutputStream.ComputeUInt64Size(3, ParamD);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest result;
    
    private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest original = result;
        result = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest) {
        return MergeFrom((CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest other) {
      if (other == global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasParamS) {
        ParamS = other.ParamS;
      }
      if (other.HasParamA) {
        ParamA = other.ParamA;
      }
      if (other.HasParamD) {
        ParamD = other.ParamD;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasParamS = input.ReadUInt64(ref result.paramS_);
            break;
          }
          case 16: {
            result.hasParamA = input.ReadUInt64(ref result.paramA_);
            break;
          }
          case 24: {
            result.hasParamD = input.ReadUInt64(ref result.paramD_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasParamS {
      get { return result.hasParamS; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ParamS {
      get { return result.ParamS; }
      set { SetParamS(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetParamS(ulong value) {
      PrepareBuilder();
      result.hasParamS = true;
      result.paramS_ = value;
      return this;
    }
    public Builder ClearParamS() {
      PrepareBuilder();
      result.hasParamS = false;
      result.paramS_ = 0UL;
      return this;
    }
    
    public bool HasParamA {
      get { return result.hasParamA; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ParamA {
      get { return result.ParamA; }
      set { SetParamA(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetParamA(ulong value) {
      PrepareBuilder();
      result.hasParamA = true;
      result.paramA_ = value;
      return this;
    }
    public Builder ClearParamA() {
      PrepareBuilder();
      result.hasParamA = false;
      result.paramA_ = 0UL;
      return this;
    }
    
    public bool HasParamD {
      get { return result.hasParamD; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ParamD {
      get { return result.ParamD; }
      set { SetParamD(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetParamD(ulong value) {
      PrepareBuilder();
      result.hasParamD = true;
      result.paramD_ = value;
      return this;
    }
    public Builder ClearParamD() {
      PrepareBuilder();
      result.hasParamD = false;
      result.paramD_ = 0UL;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockRequest() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse : pb::GeneratedMessage<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.Builder> {
  private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() { }
  private static readonly CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse defaultInstance = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponseFieldNames = new string[] { "iteminfo" };
  private static readonly uint[] _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponseFieldTags = new uint[] { 10 };
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse__FieldAccessorTable; }
  }
  
  public const int IteminfoFieldNumber = 1;
  private bool hasIteminfo;
  private global::CEconItemPreviewDataBlock iteminfo_;
  public bool HasIteminfo {
    get { return hasIteminfo; }
  }
  public global::CEconItemPreviewDataBlock Iteminfo {
    get { return iteminfo_ ?? global::CEconItemPreviewDataBlock.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponseFieldNames;
    if (hasIteminfo) {
      output.WriteMessage(1, field_names[0], Iteminfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasIteminfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, Iteminfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse result;
    
    private CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse original = result;
        result = new CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse) {
        return MergeFrom((CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse other) {
      if (other == global::CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasIteminfo) {
        MergeIteminfo(other.Iteminfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2Client2GCEconPreviewDataBlockResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            global::CEconItemPreviewDataBlock.Builder subBuilder = global::CEconItemPreviewDataBlock.CreateBuilder();
            if (result.hasIteminfo) {
              subBuilder.MergeFrom(Iteminfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Iteminfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasIteminfo {
     get { return result.hasIteminfo; }
    }
    public global::CEconItemPreviewDataBlock Iteminfo {
      get { return result.Iteminfo; }
      set { SetIteminfo(value); }
    }
    public Builder SetIteminfo(global::CEconItemPreviewDataBlock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIteminfo = true;
      result.iteminfo_ = value;
      return this;
    }
    public Builder SetIteminfo(global::CEconItemPreviewDataBlock.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasIteminfo = true;
      result.iteminfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeIteminfo(global::CEconItemPreviewDataBlock value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasIteminfo &&
          result.iteminfo_ != global::CEconItemPreviewDataBlock.DefaultInstance) {
          result.iteminfo_ = global::CEconItemPreviewDataBlock.CreateBuilder(result.iteminfo_).MergeFrom(value).BuildPartial();
      } else {
        result.iteminfo_ = value;
      }
      result.hasIteminfo = true;
      return this;
    }
    public Builder ClearIteminfo() {
      PrepareBuilder();
      result.hasIteminfo = false;
      result.iteminfo_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_Client2GCEconPreviewDataBlockResponse() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification : pb::GeneratedMessage<CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.Builder> {
  private CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() { }
  private static readonly CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification defaultInstance = new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2TournamentMatchRewardDropsNotificationFieldNames = new string[] { "accountids", "defindex", "match_id" };
  private static readonly uint[] _cMsgGCCStrike15V2TournamentMatchRewardDropsNotificationFieldTags = new uint[] { 24, 16, 8 };
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification__FieldAccessorTable; }
  }
  
  public const int MatchIdFieldNumber = 1;
  private bool hasMatchId;
  private ulong matchId_;
  public bool HasMatchId {
    get { return hasMatchId; }
  }
  [global::System.CLSCompliant(false)]
  public ulong MatchId {
    get { return matchId_; }
  }
  
  public const int DefindexFieldNumber = 2;
  private bool hasDefindex;
  private uint defindex_;
  public bool HasDefindex {
    get { return hasDefindex; }
  }
  [global::System.CLSCompliant(false)]
  public uint Defindex {
    get { return defindex_; }
  }
  
  public const int AccountidsFieldNumber = 3;
  private pbc::PopsicleList<uint> accountids_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> AccountidsList {
    get { return pbc::Lists.AsReadOnly(accountids_); }
  }
  public int AccountidsCount {
    get { return accountids_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetAccountids(int index) {
    return accountids_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2TournamentMatchRewardDropsNotificationFieldNames;
    if (hasMatchId) {
      output.WriteUInt64(1, field_names[2], MatchId);
    }
    if (hasDefindex) {
      output.WriteUInt32(2, field_names[1], Defindex);
    }
    if (accountids_.Count > 0) {
      output.WriteUInt32Array(3, field_names[0], accountids_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMatchId) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, MatchId);
      }
      if (hasDefindex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Defindex);
      }
      {
        int dataSize = 0;
        foreach (uint element in AccountidsList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * accountids_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification MakeReadOnly() {
    accountids_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification result;
    
    private CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification original = result;
        result = new CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification) {
        return MergeFrom((CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification other) {
      if (other == global::CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMatchId) {
        MatchId = other.MatchId;
      }
      if (other.HasDefindex) {
        Defindex = other.Defindex;
      }
      if (other.accountids_.Count != 0) {
        result.accountids_.Add(other.accountids_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2TournamentMatchRewardDropsNotificationFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2TournamentMatchRewardDropsNotificationFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMatchId = input.ReadUInt64(ref result.matchId_);
            break;
          }
          case 16: {
            result.hasDefindex = input.ReadUInt32(ref result.defindex_);
            break;
          }
          case 26:
          case 24: {
            input.ReadUInt32Array(tag, field_name, result.accountids_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMatchId {
      get { return result.hasMatchId; }
    }
    [global::System.CLSCompliant(false)]
    public ulong MatchId {
      get { return result.MatchId; }
      set { SetMatchId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchId(ulong value) {
      PrepareBuilder();
      result.hasMatchId = true;
      result.matchId_ = value;
      return this;
    }
    public Builder ClearMatchId() {
      PrepareBuilder();
      result.hasMatchId = false;
      result.matchId_ = 0UL;
      return this;
    }
    
    public bool HasDefindex {
      get { return result.hasDefindex; }
    }
    [global::System.CLSCompliant(false)]
    public uint Defindex {
      get { return result.Defindex; }
      set { SetDefindex(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetDefindex(uint value) {
      PrepareBuilder();
      result.hasDefindex = true;
      result.defindex_ = value;
      return this;
    }
    public Builder ClearDefindex() {
      PrepareBuilder();
      result.hasDefindex = false;
      result.defindex_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> AccountidsList {
      get { return PrepareBuilder().accountids_; }
    }
    public int AccountidsCount {
      get { return result.AccountidsCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetAccountids(int index) {
      return result.GetAccountids(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountids(int index, uint value) {
      PrepareBuilder();
      result.accountids_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddAccountids(uint value) {
      PrepareBuilder();
      result.accountids_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeAccountids(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.accountids_.Add(values);
      return this;
    }
    public Builder ClearAccountids() {
      PrepareBuilder();
      result.accountids_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_TournamentMatchRewardDropsNotification() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.Builder> {
  private CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() { }
  private static readonly CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames defaultInstance = new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchListRequestCurrentLiveGamesFieldNames = new string[] {  };
  private static readonly uint[] _cMsgGCCStrike15V2MatchListRequestCurrentLiveGamesFieldTags = new uint[] {  };
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchListRequestCurrentLiveGamesFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames result;
    
    private CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames original = result;
        result = new CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames other) {
      if (other == global::CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchListRequestCurrentLiveGamesFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchListRequestCurrentLiveGamesFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CMsgGCCStrike15_v2_MatchListRequestCurrentLiveGames() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.Builder> {
  private CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() { }
  private static readonly CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser defaultInstance = new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchListRequestLiveGameForUserFieldNames = new string[] { "accountid" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchListRequestLiveGameForUserFieldTags = new uint[] { 8 };
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchListRequestLiveGameForUserFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser result;
    
    private CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser original = result;
        result = new CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser other) {
      if (other == global::CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchListRequestLiveGameForUserFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchListRequestLiveGameForUserFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchListRequestLiveGameForUser() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchListRequestRecentUserGames : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.Builder> {
  private CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() { }
  private static readonly CMsgGCCStrike15_v2_MatchListRequestRecentUserGames defaultInstance = new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchListRequestRecentUserGamesFieldNames = new string[] { "accountid" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchListRequestRecentUserGamesFieldTags = new uint[] { 8 };
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchListRequestRecentUserGames DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestRecentUserGames__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchListRequestRecentUserGamesFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchListRequestRecentUserGames MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchListRequestRecentUserGames, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchListRequestRecentUserGames result;
    
    private CMsgGCCStrike15_v2_MatchListRequestRecentUserGames PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchListRequestRecentUserGames original = result;
        result = new CMsgGCCStrike15_v2_MatchListRequestRecentUserGames();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchListRequestRecentUserGames MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestRecentUserGames DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestRecentUserGames BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchListRequestRecentUserGames) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchListRequestRecentUserGames) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchListRequestRecentUserGames other) {
      if (other == global::CMsgGCCStrike15_v2_MatchListRequestRecentUserGames.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchListRequestRecentUserGamesFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchListRequestRecentUserGamesFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchListRequestRecentUserGames() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchListRequestTournamentGames : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchListRequestTournamentGames, CMsgGCCStrike15_v2_MatchListRequestTournamentGames.Builder> {
  private CMsgGCCStrike15_v2_MatchListRequestTournamentGames() { }
  private static readonly CMsgGCCStrike15_v2_MatchListRequestTournamentGames defaultInstance = new CMsgGCCStrike15_v2_MatchListRequestTournamentGames().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchListRequestTournamentGamesFieldNames = new string[] { "eventid" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchListRequestTournamentGamesFieldTags = new uint[] { 8 };
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchListRequestTournamentGames DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchListRequestTournamentGames ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchListRequestTournamentGames, CMsgGCCStrike15_v2_MatchListRequestTournamentGames.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestTournamentGames__FieldAccessorTable; }
  }
  
  public const int EventidFieldNumber = 1;
  private bool hasEventid;
  private int eventid_;
  public bool HasEventid {
    get { return hasEventid; }
  }
  public int Eventid {
    get { return eventid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchListRequestTournamentGamesFieldNames;
    if (hasEventid) {
      output.WriteInt32(1, field_names[0], Eventid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventid) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, Eventid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestTournamentGames ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchListRequestTournamentGames MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchListRequestTournamentGames prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchListRequestTournamentGames, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchListRequestTournamentGames cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchListRequestTournamentGames result;
    
    private CMsgGCCStrike15_v2_MatchListRequestTournamentGames PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchListRequestTournamentGames original = result;
        result = new CMsgGCCStrike15_v2_MatchListRequestTournamentGames();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchListRequestTournamentGames MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestTournamentGames DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestTournamentGames BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchListRequestTournamentGames) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchListRequestTournamentGames) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchListRequestTournamentGames other) {
      if (other == global::CMsgGCCStrike15_v2_MatchListRequestTournamentGames.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventid) {
        Eventid = other.Eventid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchListRequestTournamentGamesFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchListRequestTournamentGamesFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventid = input.ReadInt32(ref result.eventid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventid {
      get { return result.hasEventid; }
    }
    public int Eventid {
      get { return result.Eventid; }
      set { SetEventid(value); }
    }
    public Builder SetEventid(int value) {
      PrepareBuilder();
      result.hasEventid = true;
      result.eventid_ = value;
      return this;
    }
    public Builder ClearEventid() {
      PrepareBuilder();
      result.hasEventid = false;
      result.eventid_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchListRequestTournamentGames() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchListRequestFullGameInfo : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.Builder> {
  private CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() { }
  private static readonly CMsgGCCStrike15_v2_MatchListRequestFullGameInfo defaultInstance = new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchListRequestFullGameInfoFieldNames = new string[] { "matchid", "outcomeid", "token" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchListRequestFullGameInfoFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchListRequestFullGameInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchListRequestFullGameInfo__FieldAccessorTable; }
  }
  
  public const int MatchidFieldNumber = 1;
  private bool hasMatchid;
  private ulong matchid_;
  public bool HasMatchid {
    get { return hasMatchid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Matchid {
    get { return matchid_; }
  }
  
  public const int OutcomeidFieldNumber = 2;
  private bool hasOutcomeid;
  private ulong outcomeid_;
  public bool HasOutcomeid {
    get { return hasOutcomeid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Outcomeid {
    get { return outcomeid_; }
  }
  
  public const int TokenFieldNumber = 3;
  private bool hasToken;
  private uint token_;
  public bool HasToken {
    get { return hasToken; }
  }
  [global::System.CLSCompliant(false)]
  public uint Token {
    get { return token_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchListRequestFullGameInfoFieldNames;
    if (hasMatchid) {
      output.WriteUInt64(1, field_names[0], Matchid);
    }
    if (hasOutcomeid) {
      output.WriteUInt64(2, field_names[1], Outcomeid);
    }
    if (hasToken) {
      output.WriteUInt32(3, field_names[2], Token);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMatchid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Matchid);
      }
      if (hasOutcomeid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Outcomeid);
      }
      if (hasToken) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Token);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchListRequestFullGameInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchListRequestFullGameInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchListRequestFullGameInfo result;
    
    private CMsgGCCStrike15_v2_MatchListRequestFullGameInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchListRequestFullGameInfo original = result;
        result = new CMsgGCCStrike15_v2_MatchListRequestFullGameInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchListRequestFullGameInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestFullGameInfo DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchListRequestFullGameInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchListRequestFullGameInfo) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchListRequestFullGameInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchListRequestFullGameInfo other) {
      if (other == global::CMsgGCCStrike15_v2_MatchListRequestFullGameInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMatchid) {
        Matchid = other.Matchid;
      }
      if (other.HasOutcomeid) {
        Outcomeid = other.Outcomeid;
      }
      if (other.HasToken) {
        Token = other.Token;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchListRequestFullGameInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchListRequestFullGameInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMatchid = input.ReadUInt64(ref result.matchid_);
            break;
          }
          case 16: {
            result.hasOutcomeid = input.ReadUInt64(ref result.outcomeid_);
            break;
          }
          case 24: {
            result.hasToken = input.ReadUInt32(ref result.token_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMatchid {
      get { return result.hasMatchid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Matchid {
      get { return result.Matchid; }
      set { SetMatchid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchid(ulong value) {
      PrepareBuilder();
      result.hasMatchid = true;
      result.matchid_ = value;
      return this;
    }
    public Builder ClearMatchid() {
      PrepareBuilder();
      result.hasMatchid = false;
      result.matchid_ = 0UL;
      return this;
    }
    
    public bool HasOutcomeid {
      get { return result.hasOutcomeid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Outcomeid {
      get { return result.Outcomeid; }
      set { SetOutcomeid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetOutcomeid(ulong value) {
      PrepareBuilder();
      result.hasOutcomeid = true;
      result.outcomeid_ = value;
      return this;
    }
    public Builder ClearOutcomeid() {
      PrepareBuilder();
      result.hasOutcomeid = false;
      result.outcomeid_ = 0UL;
      return this;
    }
    
    public bool HasToken {
      get { return result.hasToken; }
    }
    [global::System.CLSCompliant(false)]
    public uint Token {
      get { return result.Token; }
      set { SetToken(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetToken(uint value) {
      PrepareBuilder();
      result.hasToken = true;
      result.token_ = value;
      return this;
    }
    public Builder ClearToken() {
      PrepareBuilder();
      result.hasToken = false;
      result.token_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchListRequestFullGameInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_MatchInfo : pb::GeneratedMessage<CDataGCCStrike15_v2_MatchInfo, CDataGCCStrike15_v2_MatchInfo.Builder> {
  private CDataGCCStrike15_v2_MatchInfo() { }
  private static readonly CDataGCCStrike15_v2_MatchInfo defaultInstance = new CDataGCCStrike15_v2_MatchInfo().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2MatchInfoFieldNames = new string[] { "matchid", "matchtime", "roundstats", "watchablematchinfo" };
  private static readonly uint[] _cDataGCCStrike15V2MatchInfoFieldTags = new uint[] { 8, 16, 34, 26 };
  public static CDataGCCStrike15_v2_MatchInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_MatchInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_MatchInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_MatchInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_MatchInfo, CDataGCCStrike15_v2_MatchInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_MatchInfo__FieldAccessorTable; }
  }
  
  public const int MatchidFieldNumber = 1;
  private bool hasMatchid;
  private ulong matchid_;
  public bool HasMatchid {
    get { return hasMatchid; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Matchid {
    get { return matchid_; }
  }
  
  public const int MatchtimeFieldNumber = 2;
  private bool hasMatchtime;
  private uint matchtime_;
  public bool HasMatchtime {
    get { return hasMatchtime; }
  }
  [global::System.CLSCompliant(false)]
  public uint Matchtime {
    get { return matchtime_; }
  }
  
  public const int WatchablematchinfoFieldNumber = 3;
  private bool hasWatchablematchinfo;
  private global::WatchableMatchInfo watchablematchinfo_;
  public bool HasWatchablematchinfo {
    get { return hasWatchablematchinfo; }
  }
  public global::WatchableMatchInfo Watchablematchinfo {
    get { return watchablematchinfo_ ?? global::WatchableMatchInfo.DefaultInstance; }
  }
  
  public const int RoundstatsFieldNumber = 4;
  private bool hasRoundstats;
  private global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats roundstats_;
  public bool HasRoundstats {
    get { return hasRoundstats; }
  }
  public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats Roundstats {
    get { return roundstats_ ?? global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2MatchInfoFieldNames;
    if (hasMatchid) {
      output.WriteUInt64(1, field_names[0], Matchid);
    }
    if (hasMatchtime) {
      output.WriteUInt32(2, field_names[1], Matchtime);
    }
    if (hasWatchablematchinfo) {
      output.WriteMessage(3, field_names[3], Watchablematchinfo);
    }
    if (hasRoundstats) {
      output.WriteMessage(4, field_names[2], Roundstats);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMatchid) {
        size += pb::CodedOutputStream.ComputeUInt64Size(1, Matchid);
      }
      if (hasMatchtime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Matchtime);
      }
      if (hasWatchablematchinfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, Watchablematchinfo);
      }
      if (hasRoundstats) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, Roundstats);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_MatchInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_MatchInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_MatchInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_MatchInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_MatchInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_MatchInfo result;
    
    private CDataGCCStrike15_v2_MatchInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_MatchInfo original = result;
        result = new CDataGCCStrike15_v2_MatchInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_MatchInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_MatchInfo.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_MatchInfo DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_MatchInfo.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_MatchInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_MatchInfo) {
        return MergeFrom((CDataGCCStrike15_v2_MatchInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_MatchInfo other) {
      if (other == global::CDataGCCStrike15_v2_MatchInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMatchid) {
        Matchid = other.Matchid;
      }
      if (other.HasMatchtime) {
        Matchtime = other.Matchtime;
      }
      if (other.HasWatchablematchinfo) {
        MergeWatchablematchinfo(other.Watchablematchinfo);
      }
      if (other.HasRoundstats) {
        MergeRoundstats(other.Roundstats);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2MatchInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2MatchInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMatchid = input.ReadUInt64(ref result.matchid_);
            break;
          }
          case 16: {
            result.hasMatchtime = input.ReadUInt32(ref result.matchtime_);
            break;
          }
          case 26: {
            global::WatchableMatchInfo.Builder subBuilder = global::WatchableMatchInfo.CreateBuilder();
            if (result.hasWatchablematchinfo) {
              subBuilder.MergeFrom(Watchablematchinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Watchablematchinfo = subBuilder.BuildPartial();
            break;
          }
          case 34: {
            global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder subBuilder = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder();
            if (result.hasRoundstats) {
              subBuilder.MergeFrom(Roundstats);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Roundstats = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMatchid {
      get { return result.hasMatchid; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Matchid {
      get { return result.Matchid; }
      set { SetMatchid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchid(ulong value) {
      PrepareBuilder();
      result.hasMatchid = true;
      result.matchid_ = value;
      return this;
    }
    public Builder ClearMatchid() {
      PrepareBuilder();
      result.hasMatchid = false;
      result.matchid_ = 0UL;
      return this;
    }
    
    public bool HasMatchtime {
      get { return result.hasMatchtime; }
    }
    [global::System.CLSCompliant(false)]
    public uint Matchtime {
      get { return result.Matchtime; }
      set { SetMatchtime(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMatchtime(uint value) {
      PrepareBuilder();
      result.hasMatchtime = true;
      result.matchtime_ = value;
      return this;
    }
    public Builder ClearMatchtime() {
      PrepareBuilder();
      result.hasMatchtime = false;
      result.matchtime_ = 0;
      return this;
    }
    
    public bool HasWatchablematchinfo {
     get { return result.hasWatchablematchinfo; }
    }
    public global::WatchableMatchInfo Watchablematchinfo {
      get { return result.Watchablematchinfo; }
      set { SetWatchablematchinfo(value); }
    }
    public Builder SetWatchablematchinfo(global::WatchableMatchInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasWatchablematchinfo = true;
      result.watchablematchinfo_ = value;
      return this;
    }
    public Builder SetWatchablematchinfo(global::WatchableMatchInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasWatchablematchinfo = true;
      result.watchablematchinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeWatchablematchinfo(global::WatchableMatchInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasWatchablematchinfo &&
          result.watchablematchinfo_ != global::WatchableMatchInfo.DefaultInstance) {
          result.watchablematchinfo_ = global::WatchableMatchInfo.CreateBuilder(result.watchablematchinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.watchablematchinfo_ = value;
      }
      result.hasWatchablematchinfo = true;
      return this;
    }
    public Builder ClearWatchablematchinfo() {
      PrepareBuilder();
      result.hasWatchablematchinfo = false;
      result.watchablematchinfo_ = null;
      return this;
    }
    
    public bool HasRoundstats {
     get { return result.hasRoundstats; }
    }
    public global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats Roundstats {
      get { return result.Roundstats; }
      set { SetRoundstats(value); }
    }
    public Builder SetRoundstats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasRoundstats = true;
      result.roundstats_ = value;
      return this;
    }
    public Builder SetRoundstats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasRoundstats = true;
      result.roundstats_ = builderForValue.Build();
      return this;
    }
    public Builder MergeRoundstats(global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasRoundstats &&
          result.roundstats_ != global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.DefaultInstance) {
          result.roundstats_ = global::CMsgGCCStrike15_v2_MatchmakingServerRoundStats.CreateBuilder(result.roundstats_).MergeFrom(value).BuildPartial();
      } else {
        result.roundstats_ = value;
      }
      result.hasRoundstats = true;
      return this;
    }
    public Builder ClearRoundstats() {
      PrepareBuilder();
      result.hasRoundstats = false;
      result.roundstats_ = null;
      return this;
    }
  }
  static CDataGCCStrike15_v2_MatchInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_TournamentGroupTeam : pb::GeneratedMessage<CDataGCCStrike15_v2_TournamentGroupTeam, CDataGCCStrike15_v2_TournamentGroupTeam.Builder> {
  private CDataGCCStrike15_v2_TournamentGroupTeam() { }
  private static readonly CDataGCCStrike15_v2_TournamentGroupTeam defaultInstance = new CDataGCCStrike15_v2_TournamentGroupTeam().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2TournamentGroupTeamFieldNames = new string[] { "correctpick", "score", "team_id" };
  private static readonly uint[] _cDataGCCStrike15V2TournamentGroupTeamFieldTags = new uint[] { 24, 16, 8 };
  public static CDataGCCStrike15_v2_TournamentGroupTeam DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_TournamentGroupTeam DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_TournamentGroupTeam ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_TournamentGroupTeam, CDataGCCStrike15_v2_TournamentGroupTeam.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentGroupTeam__FieldAccessorTable; }
  }
  
  public const int TeamIdFieldNumber = 1;
  private bool hasTeamId;
  private int teamId_;
  public bool HasTeamId {
    get { return hasTeamId; }
  }
  public int TeamId {
    get { return teamId_; }
  }
  
  public const int ScoreFieldNumber = 2;
  private bool hasScore;
  private int score_;
  public bool HasScore {
    get { return hasScore; }
  }
  public int Score {
    get { return score_; }
  }
  
  public const int CorrectpickFieldNumber = 3;
  private bool hasCorrectpick;
  private bool correctpick_;
  public bool HasCorrectpick {
    get { return hasCorrectpick; }
  }
  public bool Correctpick {
    get { return correctpick_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2TournamentGroupTeamFieldNames;
    if (hasTeamId) {
      output.WriteInt32(1, field_names[2], TeamId);
    }
    if (hasScore) {
      output.WriteInt32(2, field_names[1], Score);
    }
    if (hasCorrectpick) {
      output.WriteBool(3, field_names[0], Correctpick);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasTeamId) {
        size += pb::CodedOutputStream.ComputeInt32Size(1, TeamId);
      }
      if (hasScore) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Score);
      }
      if (hasCorrectpick) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Correctpick);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroupTeam ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_TournamentGroupTeam MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_TournamentGroupTeam prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_TournamentGroupTeam, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_TournamentGroupTeam cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_TournamentGroupTeam result;
    
    private CDataGCCStrike15_v2_TournamentGroupTeam PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_TournamentGroupTeam original = result;
        result = new CDataGCCStrike15_v2_TournamentGroupTeam();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_TournamentGroupTeam MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_TournamentGroupTeam.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_TournamentGroupTeam DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_TournamentGroupTeam.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_TournamentGroupTeam BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_TournamentGroupTeam) {
        return MergeFrom((CDataGCCStrike15_v2_TournamentGroupTeam) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_TournamentGroupTeam other) {
      if (other == global::CDataGCCStrike15_v2_TournamentGroupTeam.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasTeamId) {
        TeamId = other.TeamId;
      }
      if (other.HasScore) {
        Score = other.Score;
      }
      if (other.HasCorrectpick) {
        Correctpick = other.Correctpick;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2TournamentGroupTeamFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2TournamentGroupTeamFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasTeamId = input.ReadInt32(ref result.teamId_);
            break;
          }
          case 16: {
            result.hasScore = input.ReadInt32(ref result.score_);
            break;
          }
          case 24: {
            result.hasCorrectpick = input.ReadBool(ref result.correctpick_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasTeamId {
      get { return result.hasTeamId; }
    }
    public int TeamId {
      get { return result.TeamId; }
      set { SetTeamId(value); }
    }
    public Builder SetTeamId(int value) {
      PrepareBuilder();
      result.hasTeamId = true;
      result.teamId_ = value;
      return this;
    }
    public Builder ClearTeamId() {
      PrepareBuilder();
      result.hasTeamId = false;
      result.teamId_ = 0;
      return this;
    }
    
    public bool HasScore {
      get { return result.hasScore; }
    }
    public int Score {
      get { return result.Score; }
      set { SetScore(value); }
    }
    public Builder SetScore(int value) {
      PrepareBuilder();
      result.hasScore = true;
      result.score_ = value;
      return this;
    }
    public Builder ClearScore() {
      PrepareBuilder();
      result.hasScore = false;
      result.score_ = 0;
      return this;
    }
    
    public bool HasCorrectpick {
      get { return result.hasCorrectpick; }
    }
    public bool Correctpick {
      get { return result.Correctpick; }
      set { SetCorrectpick(value); }
    }
    public Builder SetCorrectpick(bool value) {
      PrepareBuilder();
      result.hasCorrectpick = true;
      result.correctpick_ = value;
      return this;
    }
    public Builder ClearCorrectpick() {
      PrepareBuilder();
      result.hasCorrectpick = false;
      result.correctpick_ = false;
      return this;
    }
  }
  static CDataGCCStrike15_v2_TournamentGroupTeam() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_TournamentGroup : pb::GeneratedMessage<CDataGCCStrike15_v2_TournamentGroup, CDataGCCStrike15_v2_TournamentGroup.Builder> {
  private CDataGCCStrike15_v2_TournamentGroup() { }
  private static readonly CDataGCCStrike15_v2_TournamentGroup defaultInstance = new CDataGCCStrike15_v2_TournamentGroup().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2TournamentGroupFieldNames = new string[] { "desc", "groupid", "name", "pickableteams", "picklockuntiltime", "picks", "points_per_pick", "stage_ids", "teams" };
  private static readonly uint[] _cDataGCCStrike15V2TournamentGroupFieldTags = new uint[] { 26, 8, 18, 64, 56, 32, 72, 48, 42 };
  public static CDataGCCStrike15_v2_TournamentGroup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_TournamentGroup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_TournamentGroup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentGroup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_TournamentGroup, CDataGCCStrike15_v2_TournamentGroup.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentGroup__FieldAccessorTable; }
  }
  
  public const int GroupidFieldNumber = 1;
  private bool hasGroupid;
  private uint groupid_;
  public bool HasGroupid {
    get { return hasGroupid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Groupid {
    get { return groupid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int DescFieldNumber = 3;
  private bool hasDesc;
  private string desc_ = "";
  public bool HasDesc {
    get { return hasDesc; }
  }
  public string Desc {
    get { return desc_; }
  }
  
  public const int PicksFieldNumber = 4;
  private bool hasPicks;
  private uint picks_;
  public bool HasPicks {
    get { return hasPicks; }
  }
  [global::System.CLSCompliant(false)]
  public uint Picks {
    get { return picks_; }
  }
  
  public const int TeamsFieldNumber = 5;
  private pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentGroupTeam> teams_ = new pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentGroupTeam>();
  public scg::IList<global::CDataGCCStrike15_v2_TournamentGroupTeam> TeamsList {
    get { return teams_; }
  }
  public int TeamsCount {
    get { return teams_.Count; }
  }
  public global::CDataGCCStrike15_v2_TournamentGroupTeam GetTeams(int index) {
    return teams_[index];
  }
  
  public const int StageIdsFieldNumber = 6;
  private pbc::PopsicleList<int> stageIds_ = new pbc::PopsicleList<int>();
  public scg::IList<int> StageIdsList {
    get { return pbc::Lists.AsReadOnly(stageIds_); }
  }
  public int StageIdsCount {
    get { return stageIds_.Count; }
  }
  public int GetStageIds(int index) {
    return stageIds_[index];
  }
  
  public const int PicklockuntiltimeFieldNumber = 7;
  private bool hasPicklockuntiltime;
  private uint picklockuntiltime_;
  public bool HasPicklockuntiltime {
    get { return hasPicklockuntiltime; }
  }
  [global::System.CLSCompliant(false)]
  public uint Picklockuntiltime {
    get { return picklockuntiltime_; }
  }
  
  public const int PickableteamsFieldNumber = 8;
  private bool hasPickableteams;
  private uint pickableteams_;
  public bool HasPickableteams {
    get { return hasPickableteams; }
  }
  [global::System.CLSCompliant(false)]
  public uint Pickableteams {
    get { return pickableteams_; }
  }
  
  public const int PointsPerPickFieldNumber = 9;
  private bool hasPointsPerPick;
  private uint pointsPerPick_;
  public bool HasPointsPerPick {
    get { return hasPointsPerPick; }
  }
  [global::System.CLSCompliant(false)]
  public uint PointsPerPick {
    get { return pointsPerPick_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2TournamentGroupFieldNames;
    if (hasGroupid) {
      output.WriteUInt32(1, field_names[1], Groupid);
    }
    if (hasName) {
      output.WriteString(2, field_names[2], Name);
    }
    if (hasDesc) {
      output.WriteString(3, field_names[0], Desc);
    }
    if (hasPicks) {
      output.WriteUInt32(4, field_names[5], Picks);
    }
    if (teams_.Count > 0) {
      output.WriteMessageArray(5, field_names[8], teams_);
    }
    if (stageIds_.Count > 0) {
      output.WriteInt32Array(6, field_names[7], stageIds_);
    }
    if (hasPicklockuntiltime) {
      output.WriteUInt32(7, field_names[4], Picklockuntiltime);
    }
    if (hasPickableteams) {
      output.WriteUInt32(8, field_names[3], Pickableteams);
    }
    if (hasPointsPerPick) {
      output.WriteUInt32(9, field_names[6], PointsPerPick);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasGroupid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Groupid);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
      }
      if (hasPicks) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Picks);
      }
      foreach (global::CDataGCCStrike15_v2_TournamentGroupTeam element in TeamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      {
        int dataSize = 0;
        foreach (int element in StageIdsList) {
          dataSize += pb::CodedOutputStream.ComputeInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * stageIds_.Count;
      }
      if (hasPicklockuntiltime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Picklockuntiltime);
      }
      if (hasPickableteams) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Pickableteams);
      }
      if (hasPointsPerPick) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, PointsPerPick);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentGroup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_TournamentGroup MakeReadOnly() {
    teams_.MakeReadOnly();
    stageIds_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_TournamentGroup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_TournamentGroup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_TournamentGroup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_TournamentGroup result;
    
    private CDataGCCStrike15_v2_TournamentGroup PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_TournamentGroup original = result;
        result = new CDataGCCStrike15_v2_TournamentGroup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_TournamentGroup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_TournamentGroup.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_TournamentGroup DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_TournamentGroup.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_TournamentGroup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_TournamentGroup) {
        return MergeFrom((CDataGCCStrike15_v2_TournamentGroup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_TournamentGroup other) {
      if (other == global::CDataGCCStrike15_v2_TournamentGroup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasGroupid) {
        Groupid = other.Groupid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      if (other.HasPicks) {
        Picks = other.Picks;
      }
      if (other.teams_.Count != 0) {
        result.teams_.Add(other.teams_);
      }
      if (other.stageIds_.Count != 0) {
        result.stageIds_.Add(other.stageIds_);
      }
      if (other.HasPicklockuntiltime) {
        Picklockuntiltime = other.Picklockuntiltime;
      }
      if (other.HasPickableteams) {
        Pickableteams = other.Pickableteams;
      }
      if (other.HasPointsPerPick) {
        PointsPerPick = other.PointsPerPick;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2TournamentGroupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2TournamentGroupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasGroupid = input.ReadUInt32(ref result.groupid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasDesc = input.ReadString(ref result.desc_);
            break;
          }
          case 32: {
            result.hasPicks = input.ReadUInt32(ref result.picks_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.teams_, global::CDataGCCStrike15_v2_TournamentGroupTeam.DefaultInstance, extensionRegistry);
            break;
          }
          case 50:
          case 48: {
            input.ReadInt32Array(tag, field_name, result.stageIds_);
            break;
          }
          case 56: {
            result.hasPicklockuntiltime = input.ReadUInt32(ref result.picklockuntiltime_);
            break;
          }
          case 64: {
            result.hasPickableteams = input.ReadUInt32(ref result.pickableteams_);
            break;
          }
          case 72: {
            result.hasPointsPerPick = input.ReadUInt32(ref result.pointsPerPick_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasGroupid {
      get { return result.hasGroupid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Groupid {
      get { return result.Groupid; }
      set { SetGroupid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetGroupid(uint value) {
      PrepareBuilder();
      result.hasGroupid = true;
      result.groupid_ = value;
      return this;
    }
    public Builder ClearGroupid() {
      PrepareBuilder();
      result.hasGroupid = false;
      result.groupid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasDesc {
      get { return result.hasDesc; }
    }
    public string Desc {
      get { return result.Desc; }
      set { SetDesc(value); }
    }
    public Builder SetDesc(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDesc = true;
      result.desc_ = value;
      return this;
    }
    public Builder ClearDesc() {
      PrepareBuilder();
      result.hasDesc = false;
      result.desc_ = "";
      return this;
    }
    
    public bool HasPicks {
      get { return result.hasPicks; }
    }
    [global::System.CLSCompliant(false)]
    public uint Picks {
      get { return result.Picks; }
      set { SetPicks(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPicks(uint value) {
      PrepareBuilder();
      result.hasPicks = true;
      result.picks_ = value;
      return this;
    }
    public Builder ClearPicks() {
      PrepareBuilder();
      result.hasPicks = false;
      result.picks_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::CDataGCCStrike15_v2_TournamentGroupTeam> TeamsList {
      get { return PrepareBuilder().teams_; }
    }
    public int TeamsCount {
      get { return result.TeamsCount; }
    }
    public global::CDataGCCStrike15_v2_TournamentGroupTeam GetTeams(int index) {
      return result.GetTeams(index);
    }
    public Builder SetTeams(int index, global::CDataGCCStrike15_v2_TournamentGroupTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.teams_[index] = value;
      return this;
    }
    public Builder SetTeams(int index, global::CDataGCCStrike15_v2_TournamentGroupTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.teams_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTeams(global::CDataGCCStrike15_v2_TournamentGroupTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.teams_.Add(value);
      return this;
    }
    public Builder AddTeams(global::CDataGCCStrike15_v2_TournamentGroupTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.teams_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTeams(scg::IEnumerable<global::CDataGCCStrike15_v2_TournamentGroupTeam> values) {
      PrepareBuilder();
      result.teams_.Add(values);
      return this;
    }
    public Builder ClearTeams() {
      PrepareBuilder();
      result.teams_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<int> StageIdsList {
      get { return PrepareBuilder().stageIds_; }
    }
    public int StageIdsCount {
      get { return result.StageIdsCount; }
    }
    public int GetStageIds(int index) {
      return result.GetStageIds(index);
    }
    public Builder SetStageIds(int index, int value) {
      PrepareBuilder();
      result.stageIds_[index] = value;
      return this;
    }
    public Builder AddStageIds(int value) {
      PrepareBuilder();
      result.stageIds_.Add(value);
      return this;
    }
    public Builder AddRangeStageIds(scg::IEnumerable<int> values) {
      PrepareBuilder();
      result.stageIds_.Add(values);
      return this;
    }
    public Builder ClearStageIds() {
      PrepareBuilder();
      result.stageIds_.Clear();
      return this;
    }
    
    public bool HasPicklockuntiltime {
      get { return result.hasPicklockuntiltime; }
    }
    [global::System.CLSCompliant(false)]
    public uint Picklockuntiltime {
      get { return result.Picklockuntiltime; }
      set { SetPicklockuntiltime(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPicklockuntiltime(uint value) {
      PrepareBuilder();
      result.hasPicklockuntiltime = true;
      result.picklockuntiltime_ = value;
      return this;
    }
    public Builder ClearPicklockuntiltime() {
      PrepareBuilder();
      result.hasPicklockuntiltime = false;
      result.picklockuntiltime_ = 0;
      return this;
    }
    
    public bool HasPickableteams {
      get { return result.hasPickableteams; }
    }
    [global::System.CLSCompliant(false)]
    public uint Pickableteams {
      get { return result.Pickableteams; }
      set { SetPickableteams(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPickableteams(uint value) {
      PrepareBuilder();
      result.hasPickableteams = true;
      result.pickableteams_ = value;
      return this;
    }
    public Builder ClearPickableteams() {
      PrepareBuilder();
      result.hasPickableteams = false;
      result.pickableteams_ = 0;
      return this;
    }
    
    public bool HasPointsPerPick {
      get { return result.hasPointsPerPick; }
    }
    [global::System.CLSCompliant(false)]
    public uint PointsPerPick {
      get { return result.PointsPerPick; }
      set { SetPointsPerPick(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPointsPerPick(uint value) {
      PrepareBuilder();
      result.hasPointsPerPick = true;
      result.pointsPerPick_ = value;
      return this;
    }
    public Builder ClearPointsPerPick() {
      PrepareBuilder();
      result.hasPointsPerPick = false;
      result.pointsPerPick_ = 0;
      return this;
    }
  }
  static CDataGCCStrike15_v2_TournamentGroup() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_TournamentSection : pb::GeneratedMessage<CDataGCCStrike15_v2_TournamentSection, CDataGCCStrike15_v2_TournamentSection.Builder> {
  private CDataGCCStrike15_v2_TournamentSection() { }
  private static readonly CDataGCCStrike15_v2_TournamentSection defaultInstance = new CDataGCCStrike15_v2_TournamentSection().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2TournamentSectionFieldNames = new string[] { "desc", "groups", "name", "sectionid" };
  private static readonly uint[] _cDataGCCStrike15V2TournamentSectionFieldTags = new uint[] { 26, 34, 18, 8 };
  public static CDataGCCStrike15_v2_TournamentSection DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_TournamentSection DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_TournamentSection ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentSection__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_TournamentSection, CDataGCCStrike15_v2_TournamentSection.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentSection__FieldAccessorTable; }
  }
  
  public const int SectionidFieldNumber = 1;
  private bool hasSectionid;
  private uint sectionid_;
  public bool HasSectionid {
    get { return hasSectionid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Sectionid {
    get { return sectionid_; }
  }
  
  public const int NameFieldNumber = 2;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int DescFieldNumber = 3;
  private bool hasDesc;
  private string desc_ = "";
  public bool HasDesc {
    get { return hasDesc; }
  }
  public string Desc {
    get { return desc_; }
  }
  
  public const int GroupsFieldNumber = 4;
  private pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentGroup> groups_ = new pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentGroup>();
  public scg::IList<global::CDataGCCStrike15_v2_TournamentGroup> GroupsList {
    get { return groups_; }
  }
  public int GroupsCount {
    get { return groups_.Count; }
  }
  public global::CDataGCCStrike15_v2_TournamentGroup GetGroups(int index) {
    return groups_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2TournamentSectionFieldNames;
    if (hasSectionid) {
      output.WriteUInt32(1, field_names[3], Sectionid);
    }
    if (hasName) {
      output.WriteString(2, field_names[2], Name);
    }
    if (hasDesc) {
      output.WriteString(3, field_names[0], Desc);
    }
    if (groups_.Count > 0) {
      output.WriteMessageArray(4, field_names[1], groups_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSectionid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Sectionid);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Name);
      }
      if (hasDesc) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Desc);
      }
      foreach (global::CDataGCCStrike15_v2_TournamentGroup element in GroupsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentSection ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_TournamentSection MakeReadOnly() {
    groups_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_TournamentSection prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_TournamentSection, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_TournamentSection cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_TournamentSection result;
    
    private CDataGCCStrike15_v2_TournamentSection PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_TournamentSection original = result;
        result = new CDataGCCStrike15_v2_TournamentSection();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_TournamentSection MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_TournamentSection.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_TournamentSection DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_TournamentSection.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_TournamentSection BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_TournamentSection) {
        return MergeFrom((CDataGCCStrike15_v2_TournamentSection) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_TournamentSection other) {
      if (other == global::CDataGCCStrike15_v2_TournamentSection.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSectionid) {
        Sectionid = other.Sectionid;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasDesc) {
        Desc = other.Desc;
      }
      if (other.groups_.Count != 0) {
        result.groups_.Add(other.groups_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2TournamentSectionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2TournamentSectionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSectionid = input.ReadUInt32(ref result.sectionid_);
            break;
          }
          case 18: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 26: {
            result.hasDesc = input.ReadString(ref result.desc_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.groups_, global::CDataGCCStrike15_v2_TournamentGroup.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSectionid {
      get { return result.hasSectionid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Sectionid {
      get { return result.Sectionid; }
      set { SetSectionid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSectionid(uint value) {
      PrepareBuilder();
      result.hasSectionid = true;
      result.sectionid_ = value;
      return this;
    }
    public Builder ClearSectionid() {
      PrepareBuilder();
      result.hasSectionid = false;
      result.sectionid_ = 0;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasDesc {
      get { return result.hasDesc; }
    }
    public string Desc {
      get { return result.Desc; }
      set { SetDesc(value); }
    }
    public Builder SetDesc(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDesc = true;
      result.desc_ = value;
      return this;
    }
    public Builder ClearDesc() {
      PrepareBuilder();
      result.hasDesc = false;
      result.desc_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::CDataGCCStrike15_v2_TournamentGroup> GroupsList {
      get { return PrepareBuilder().groups_; }
    }
    public int GroupsCount {
      get { return result.GroupsCount; }
    }
    public global::CDataGCCStrike15_v2_TournamentGroup GetGroups(int index) {
      return result.GetGroups(index);
    }
    public Builder SetGroups(int index, global::CDataGCCStrike15_v2_TournamentGroup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.groups_[index] = value;
      return this;
    }
    public Builder SetGroups(int index, global::CDataGCCStrike15_v2_TournamentGroup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.groups_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGroups(global::CDataGCCStrike15_v2_TournamentGroup value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.groups_.Add(value);
      return this;
    }
    public Builder AddGroups(global::CDataGCCStrike15_v2_TournamentGroup.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.groups_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGroups(scg::IEnumerable<global::CDataGCCStrike15_v2_TournamentGroup> values) {
      PrepareBuilder();
      result.groups_.Add(values);
      return this;
    }
    public Builder ClearGroups() {
      PrepareBuilder();
      result.groups_.Clear();
      return this;
    }
  }
  static CDataGCCStrike15_v2_TournamentSection() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CDataGCCStrike15_v2_TournamentInfo : pb::GeneratedMessage<CDataGCCStrike15_v2_TournamentInfo, CDataGCCStrike15_v2_TournamentInfo.Builder> {
  private CDataGCCStrike15_v2_TournamentInfo() { }
  private static readonly CDataGCCStrike15_v2_TournamentInfo defaultInstance = new CDataGCCStrike15_v2_TournamentInfo().MakeReadOnly();
  private static readonly string[] _cDataGCCStrike15V2TournamentInfoFieldNames = new string[] { "sections", "tournament_event", "tournament_teams" };
  private static readonly uint[] _cDataGCCStrike15V2TournamentInfoFieldTags = new uint[] { 10, 18, 26 };
  public static CDataGCCStrike15_v2_TournamentInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CDataGCCStrike15_v2_TournamentInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CDataGCCStrike15_v2_TournamentInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CDataGCCStrike15_v2_TournamentInfo, CDataGCCStrike15_v2_TournamentInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CDataGCCStrike15_v2_TournamentInfo__FieldAccessorTable; }
  }
  
  public const int SectionsFieldNumber = 1;
  private pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentSection> sections_ = new pbc::PopsicleList<global::CDataGCCStrike15_v2_TournamentSection>();
  public scg::IList<global::CDataGCCStrike15_v2_TournamentSection> SectionsList {
    get { return sections_; }
  }
  public int SectionsCount {
    get { return sections_.Count; }
  }
  public global::CDataGCCStrike15_v2_TournamentSection GetSections(int index) {
    return sections_[index];
  }
  
  public const int TournamentEventFieldNumber = 2;
  private bool hasTournamentEvent;
  private global::TournamentEvent tournamentEvent_;
  public bool HasTournamentEvent {
    get { return hasTournamentEvent; }
  }
  public global::TournamentEvent TournamentEvent {
    get { return tournamentEvent_ ?? global::TournamentEvent.DefaultInstance; }
  }
  
  public const int TournamentTeamsFieldNumber = 3;
  private pbc::PopsicleList<global::TournamentTeam> tournamentTeams_ = new pbc::PopsicleList<global::TournamentTeam>();
  public scg::IList<global::TournamentTeam> TournamentTeamsList {
    get { return tournamentTeams_; }
  }
  public int TournamentTeamsCount {
    get { return tournamentTeams_.Count; }
  }
  public global::TournamentTeam GetTournamentTeams(int index) {
    return tournamentTeams_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cDataGCCStrike15V2TournamentInfoFieldNames;
    if (sections_.Count > 0) {
      output.WriteMessageArray(1, field_names[0], sections_);
    }
    if (hasTournamentEvent) {
      output.WriteMessage(2, field_names[1], TournamentEvent);
    }
    if (tournamentTeams_.Count > 0) {
      output.WriteMessageArray(3, field_names[2], tournamentTeams_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      foreach (global::CDataGCCStrike15_v2_TournamentSection element in SectionsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(1, element);
      }
      if (hasTournamentEvent) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, TournamentEvent);
      }
      foreach (global::TournamentTeam element in TournamentTeamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CDataGCCStrike15_v2_TournamentInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CDataGCCStrike15_v2_TournamentInfo MakeReadOnly() {
    sections_.MakeReadOnly();
    tournamentTeams_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CDataGCCStrike15_v2_TournamentInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CDataGCCStrike15_v2_TournamentInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CDataGCCStrike15_v2_TournamentInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CDataGCCStrike15_v2_TournamentInfo result;
    
    private CDataGCCStrike15_v2_TournamentInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CDataGCCStrike15_v2_TournamentInfo original = result;
        result = new CDataGCCStrike15_v2_TournamentInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CDataGCCStrike15_v2_TournamentInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CDataGCCStrike15_v2_TournamentInfo.Descriptor; }
    }
    
    public override CDataGCCStrike15_v2_TournamentInfo DefaultInstanceForType {
      get { return global::CDataGCCStrike15_v2_TournamentInfo.DefaultInstance; }
    }
    
    public override CDataGCCStrike15_v2_TournamentInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CDataGCCStrike15_v2_TournamentInfo) {
        return MergeFrom((CDataGCCStrike15_v2_TournamentInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CDataGCCStrike15_v2_TournamentInfo other) {
      if (other == global::CDataGCCStrike15_v2_TournamentInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.sections_.Count != 0) {
        result.sections_.Add(other.sections_);
      }
      if (other.HasTournamentEvent) {
        MergeTournamentEvent(other.TournamentEvent);
      }
      if (other.tournamentTeams_.Count != 0) {
        result.tournamentTeams_.Add(other.tournamentTeams_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cDataGCCStrike15V2TournamentInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cDataGCCStrike15V2TournamentInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            input.ReadMessageArray(tag, field_name, result.sections_, global::CDataGCCStrike15_v2_TournamentSection.DefaultInstance, extensionRegistry);
            break;
          }
          case 18: {
            global::TournamentEvent.Builder subBuilder = global::TournamentEvent.CreateBuilder();
            if (result.hasTournamentEvent) {
              subBuilder.MergeFrom(TournamentEvent);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            TournamentEvent = subBuilder.BuildPartial();
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.tournamentTeams_, global::TournamentTeam.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public pbc::IPopsicleList<global::CDataGCCStrike15_v2_TournamentSection> SectionsList {
      get { return PrepareBuilder().sections_; }
    }
    public int SectionsCount {
      get { return result.SectionsCount; }
    }
    public global::CDataGCCStrike15_v2_TournamentSection GetSections(int index) {
      return result.GetSections(index);
    }
    public Builder SetSections(int index, global::CDataGCCStrike15_v2_TournamentSection value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sections_[index] = value;
      return this;
    }
    public Builder SetSections(int index, global::CDataGCCStrike15_v2_TournamentSection.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sections_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddSections(global::CDataGCCStrike15_v2_TournamentSection value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.sections_.Add(value);
      return this;
    }
    public Builder AddSections(global::CDataGCCStrike15_v2_TournamentSection.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.sections_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeSections(scg::IEnumerable<global::CDataGCCStrike15_v2_TournamentSection> values) {
      PrepareBuilder();
      result.sections_.Add(values);
      return this;
    }
    public Builder ClearSections() {
      PrepareBuilder();
      result.sections_.Clear();
      return this;
    }
    
    public bool HasTournamentEvent {
     get { return result.hasTournamentEvent; }
    }
    public global::TournamentEvent TournamentEvent {
      get { return result.TournamentEvent; }
      set { SetTournamentEvent(value); }
    }
    public Builder SetTournamentEvent(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTournamentEvent = true;
      result.tournamentEvent_ = value;
      return this;
    }
    public Builder SetTournamentEvent(global::TournamentEvent.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTournamentEvent = true;
      result.tournamentEvent_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTournamentEvent(global::TournamentEvent value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTournamentEvent &&
          result.tournamentEvent_ != global::TournamentEvent.DefaultInstance) {
          result.tournamentEvent_ = global::TournamentEvent.CreateBuilder(result.tournamentEvent_).MergeFrom(value).BuildPartial();
      } else {
        result.tournamentEvent_ = value;
      }
      result.hasTournamentEvent = true;
      return this;
    }
    public Builder ClearTournamentEvent() {
      PrepareBuilder();
      result.hasTournamentEvent = false;
      result.tournamentEvent_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::TournamentTeam> TournamentTeamsList {
      get { return PrepareBuilder().tournamentTeams_; }
    }
    public int TournamentTeamsCount {
      get { return result.TournamentTeamsCount; }
    }
    public global::TournamentTeam GetTournamentTeams(int index) {
      return result.GetTournamentTeams(index);
    }
    public Builder SetTournamentTeams(int index, global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tournamentTeams_[index] = value;
      return this;
    }
    public Builder SetTournamentTeams(int index, global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tournamentTeams_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddTournamentTeams(global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.tournamentTeams_.Add(value);
      return this;
    }
    public Builder AddTournamentTeams(global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.tournamentTeams_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeTournamentTeams(scg::IEnumerable<global::TournamentTeam> values) {
      PrepareBuilder();
      result.tournamentTeams_.Add(values);
      return this;
    }
    public Builder ClearTournamentTeams() {
      PrepareBuilder();
      result.tournamentTeams_.Clear();
      return this;
    }
  }
  static CDataGCCStrike15_v2_TournamentInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_MatchList : pb::GeneratedMessage<CMsgGCCStrike15_v2_MatchList, CMsgGCCStrike15_v2_MatchList.Builder> {
  private CMsgGCCStrike15_v2_MatchList() { }
  private static readonly CMsgGCCStrike15_v2_MatchList defaultInstance = new CMsgGCCStrike15_v2_MatchList().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2MatchListFieldNames = new string[] { "accountid", "matches", "msgrequestid", "servertime", "streams", "tournamentinfo" };
  private static readonly uint[] _cMsgGCCStrike15V2MatchListFieldTags = new uint[] { 16, 34, 8, 24, 42, 50 };
  public static CMsgGCCStrike15_v2_MatchList DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_MatchList DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_MatchList ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchList__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_MatchList, CMsgGCCStrike15_v2_MatchList.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_MatchList__FieldAccessorTable; }
  }
  
  public const int MsgrequestidFieldNumber = 1;
  private bool hasMsgrequestid;
  private uint msgrequestid_;
  public bool HasMsgrequestid {
    get { return hasMsgrequestid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Msgrequestid {
    get { return msgrequestid_; }
  }
  
  public const int AccountidFieldNumber = 2;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public const int ServertimeFieldNumber = 3;
  private bool hasServertime;
  private uint servertime_;
  public bool HasServertime {
    get { return hasServertime; }
  }
  [global::System.CLSCompliant(false)]
  public uint Servertime {
    get { return servertime_; }
  }
  
  public const int MatchesFieldNumber = 4;
  private pbc::PopsicleList<global::CDataGCCStrike15_v2_MatchInfo> matches_ = new pbc::PopsicleList<global::CDataGCCStrike15_v2_MatchInfo>();
  public scg::IList<global::CDataGCCStrike15_v2_MatchInfo> MatchesList {
    get { return matches_; }
  }
  public int MatchesCount {
    get { return matches_.Count; }
  }
  public global::CDataGCCStrike15_v2_MatchInfo GetMatches(int index) {
    return matches_[index];
  }
  
  public const int StreamsFieldNumber = 5;
  private pbc::PopsicleList<global::TournamentTeam> streams_ = new pbc::PopsicleList<global::TournamentTeam>();
  public scg::IList<global::TournamentTeam> StreamsList {
    get { return streams_; }
  }
  public int StreamsCount {
    get { return streams_.Count; }
  }
  public global::TournamentTeam GetStreams(int index) {
    return streams_[index];
  }
  
  public const int TournamentinfoFieldNumber = 6;
  private bool hasTournamentinfo;
  private global::CDataGCCStrike15_v2_TournamentInfo tournamentinfo_;
  public bool HasTournamentinfo {
    get { return hasTournamentinfo; }
  }
  public global::CDataGCCStrike15_v2_TournamentInfo Tournamentinfo {
    get { return tournamentinfo_ ?? global::CDataGCCStrike15_v2_TournamentInfo.DefaultInstance; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2MatchListFieldNames;
    if (hasMsgrequestid) {
      output.WriteUInt32(1, field_names[2], Msgrequestid);
    }
    if (hasAccountid) {
      output.WriteUInt32(2, field_names[0], Accountid);
    }
    if (hasServertime) {
      output.WriteUInt32(3, field_names[3], Servertime);
    }
    if (matches_.Count > 0) {
      output.WriteMessageArray(4, field_names[1], matches_);
    }
    if (streams_.Count > 0) {
      output.WriteMessageArray(5, field_names[4], streams_);
    }
    if (hasTournamentinfo) {
      output.WriteMessage(6, field_names[5], Tournamentinfo);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasMsgrequestid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Msgrequestid);
      }
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Accountid);
      }
      if (hasServertime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Servertime);
      }
      foreach (global::CDataGCCStrike15_v2_MatchInfo element in MatchesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, element);
      }
      foreach (global::TournamentTeam element in StreamsList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      if (hasTournamentinfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(6, Tournamentinfo);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_MatchList ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_MatchList MakeReadOnly() {
    matches_.MakeReadOnly();
    streams_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_MatchList prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_MatchList, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_MatchList cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_MatchList result;
    
    private CMsgGCCStrike15_v2_MatchList PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_MatchList original = result;
        result = new CMsgGCCStrike15_v2_MatchList();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_MatchList MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_MatchList.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_MatchList DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_MatchList.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_MatchList BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_MatchList) {
        return MergeFrom((CMsgGCCStrike15_v2_MatchList) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_MatchList other) {
      if (other == global::CMsgGCCStrike15_v2_MatchList.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasMsgrequestid) {
        Msgrequestid = other.Msgrequestid;
      }
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      if (other.HasServertime) {
        Servertime = other.Servertime;
      }
      if (other.matches_.Count != 0) {
        result.matches_.Add(other.matches_);
      }
      if (other.streams_.Count != 0) {
        result.streams_.Add(other.streams_);
      }
      if (other.HasTournamentinfo) {
        MergeTournamentinfo(other.Tournamentinfo);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2MatchListFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2MatchListFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasMsgrequestid = input.ReadUInt32(ref result.msgrequestid_);
            break;
          }
          case 16: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
          case 24: {
            result.hasServertime = input.ReadUInt32(ref result.servertime_);
            break;
          }
          case 34: {
            input.ReadMessageArray(tag, field_name, result.matches_, global::CDataGCCStrike15_v2_MatchInfo.DefaultInstance, extensionRegistry);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.streams_, global::TournamentTeam.DefaultInstance, extensionRegistry);
            break;
          }
          case 50: {
            global::CDataGCCStrike15_v2_TournamentInfo.Builder subBuilder = global::CDataGCCStrike15_v2_TournamentInfo.CreateBuilder();
            if (result.hasTournamentinfo) {
              subBuilder.MergeFrom(Tournamentinfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            Tournamentinfo = subBuilder.BuildPartial();
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasMsgrequestid {
      get { return result.hasMsgrequestid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Msgrequestid {
      get { return result.Msgrequestid; }
      set { SetMsgrequestid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMsgrequestid(uint value) {
      PrepareBuilder();
      result.hasMsgrequestid = true;
      result.msgrequestid_ = value;
      return this;
    }
    public Builder ClearMsgrequestid() {
      PrepareBuilder();
      result.hasMsgrequestid = false;
      result.msgrequestid_ = 0;
      return this;
    }
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
    
    public bool HasServertime {
      get { return result.hasServertime; }
    }
    [global::System.CLSCompliant(false)]
    public uint Servertime {
      get { return result.Servertime; }
      set { SetServertime(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServertime(uint value) {
      PrepareBuilder();
      result.hasServertime = true;
      result.servertime_ = value;
      return this;
    }
    public Builder ClearServertime() {
      PrepareBuilder();
      result.hasServertime = false;
      result.servertime_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::CDataGCCStrike15_v2_MatchInfo> MatchesList {
      get { return PrepareBuilder().matches_; }
    }
    public int MatchesCount {
      get { return result.MatchesCount; }
    }
    public global::CDataGCCStrike15_v2_MatchInfo GetMatches(int index) {
      return result.GetMatches(index);
    }
    public Builder SetMatches(int index, global::CDataGCCStrike15_v2_MatchInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.matches_[index] = value;
      return this;
    }
    public Builder SetMatches(int index, global::CDataGCCStrike15_v2_MatchInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.matches_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddMatches(global::CDataGCCStrike15_v2_MatchInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.matches_.Add(value);
      return this;
    }
    public Builder AddMatches(global::CDataGCCStrike15_v2_MatchInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.matches_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeMatches(scg::IEnumerable<global::CDataGCCStrike15_v2_MatchInfo> values) {
      PrepareBuilder();
      result.matches_.Add(values);
      return this;
    }
    public Builder ClearMatches() {
      PrepareBuilder();
      result.matches_.Clear();
      return this;
    }
    
    public pbc::IPopsicleList<global::TournamentTeam> StreamsList {
      get { return PrepareBuilder().streams_; }
    }
    public int StreamsCount {
      get { return result.StreamsCount; }
    }
    public global::TournamentTeam GetStreams(int index) {
      return result.GetStreams(index);
    }
    public Builder SetStreams(int index, global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.streams_[index] = value;
      return this;
    }
    public Builder SetStreams(int index, global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.streams_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddStreams(global::TournamentTeam value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.streams_.Add(value);
      return this;
    }
    public Builder AddStreams(global::TournamentTeam.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.streams_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeStreams(scg::IEnumerable<global::TournamentTeam> values) {
      PrepareBuilder();
      result.streams_.Add(values);
      return this;
    }
    public Builder ClearStreams() {
      PrepareBuilder();
      result.streams_.Clear();
      return this;
    }
    
    public bool HasTournamentinfo {
     get { return result.hasTournamentinfo; }
    }
    public global::CDataGCCStrike15_v2_TournamentInfo Tournamentinfo {
      get { return result.Tournamentinfo; }
      set { SetTournamentinfo(value); }
    }
    public Builder SetTournamentinfo(global::CDataGCCStrike15_v2_TournamentInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTournamentinfo = true;
      result.tournamentinfo_ = value;
      return this;
    }
    public Builder SetTournamentinfo(global::CDataGCCStrike15_v2_TournamentInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasTournamentinfo = true;
      result.tournamentinfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeTournamentinfo(global::CDataGCCStrike15_v2_TournamentInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasTournamentinfo &&
          result.tournamentinfo_ != global::CDataGCCStrike15_v2_TournamentInfo.DefaultInstance) {
          result.tournamentinfo_ = global::CDataGCCStrike15_v2_TournamentInfo.CreateBuilder(result.tournamentinfo_).MergeFrom(value).BuildPartial();
      } else {
        result.tournamentinfo_ = value;
      }
      result.hasTournamentinfo = true;
      return this;
    }
    public Builder ClearTournamentinfo() {
      PrepareBuilder();
      result.hasTournamentinfo = false;
      result.tournamentinfo_ = null;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_MatchList() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_Predictions : pb::GeneratedMessage<CMsgGCCStrike15_v2_Predictions, CMsgGCCStrike15_v2_Predictions.Builder> {
  private CMsgGCCStrike15_v2_Predictions() { }
  private static readonly CMsgGCCStrike15_v2_Predictions defaultInstance = new CMsgGCCStrike15_v2_Predictions().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2PredictionsFieldNames = new string[] { "event_id", "group_match_team_picks" };
  private static readonly uint[] _cMsgGCCStrike15V2PredictionsFieldTags = new uint[] { 8, 18 };
  public static CMsgGCCStrike15_v2_Predictions DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_Predictions DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_Predictions ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Predictions__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_Predictions, CMsgGCCStrike15_v2_Predictions.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Predictions__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GroupMatchTeamPick : pb::GeneratedMessage<GroupMatchTeamPick, GroupMatchTeamPick.Builder> {
      private GroupMatchTeamPick() { }
      private static readonly GroupMatchTeamPick defaultInstance = new GroupMatchTeamPick().MakeReadOnly();
      private static readonly string[] _groupMatchTeamPickFieldNames = new string[] { "groupid", "index", "itemid", "sectionid", "teamid" };
      private static readonly uint[] _groupMatchTeamPickFieldTags = new uint[] { 16, 24, 40, 8, 32 };
      public static GroupMatchTeamPick DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override GroupMatchTeamPick DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override GroupMatchTeamPick ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<GroupMatchTeamPick, GroupMatchTeamPick.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Predictions_GroupMatchTeamPick__FieldAccessorTable; }
      }
      
      public const int SectionidFieldNumber = 1;
      private bool hasSectionid;
      private int sectionid_;
      public bool HasSectionid {
        get { return hasSectionid; }
      }
      public int Sectionid {
        get { return sectionid_; }
      }
      
      public const int GroupidFieldNumber = 2;
      private bool hasGroupid;
      private int groupid_;
      public bool HasGroupid {
        get { return hasGroupid; }
      }
      public int Groupid {
        get { return groupid_; }
      }
      
      public const int IndexFieldNumber = 3;
      private bool hasIndex;
      private int index_;
      public bool HasIndex {
        get { return hasIndex; }
      }
      public int Index {
        get { return index_; }
      }
      
      public const int TeamidFieldNumber = 4;
      private bool hasTeamid;
      private int teamid_;
      public bool HasTeamid {
        get { return hasTeamid; }
      }
      public int Teamid {
        get { return teamid_; }
      }
      
      public const int ItemidFieldNumber = 5;
      private bool hasItemid;
      private ulong itemid_;
      public bool HasItemid {
        get { return hasItemid; }
      }
      [global::System.CLSCompliant(false)]
      public ulong Itemid {
        get { return itemid_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _groupMatchTeamPickFieldNames;
        if (hasSectionid) {
          output.WriteInt32(1, field_names[3], Sectionid);
        }
        if (hasGroupid) {
          output.WriteInt32(2, field_names[0], Groupid);
        }
        if (hasIndex) {
          output.WriteInt32(3, field_names[1], Index);
        }
        if (hasTeamid) {
          output.WriteInt32(4, field_names[4], Teamid);
        }
        if (hasItemid) {
          output.WriteUInt64(5, field_names[2], Itemid);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasSectionid) {
            size += pb::CodedOutputStream.ComputeInt32Size(1, Sectionid);
          }
          if (hasGroupid) {
            size += pb::CodedOutputStream.ComputeInt32Size(2, Groupid);
          }
          if (hasIndex) {
            size += pb::CodedOutputStream.ComputeInt32Size(3, Index);
          }
          if (hasTeamid) {
            size += pb::CodedOutputStream.ComputeInt32Size(4, Teamid);
          }
          if (hasItemid) {
            size += pb::CodedOutputStream.ComputeUInt64Size(5, Itemid);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static GroupMatchTeamPick ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static GroupMatchTeamPick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GroupMatchTeamPick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private GroupMatchTeamPick MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(GroupMatchTeamPick prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<GroupMatchTeamPick, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(GroupMatchTeamPick cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private GroupMatchTeamPick result;
        
        private GroupMatchTeamPick PrepareBuilder() {
          if (resultIsReadOnly) {
            GroupMatchTeamPick original = result;
            result = new GroupMatchTeamPick();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override GroupMatchTeamPick MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.Descriptor; }
        }
        
        public override GroupMatchTeamPick DefaultInstanceForType {
          get { return global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.DefaultInstance; }
        }
        
        public override GroupMatchTeamPick BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is GroupMatchTeamPick) {
            return MergeFrom((GroupMatchTeamPick) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(GroupMatchTeamPick other) {
          if (other == global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasSectionid) {
            Sectionid = other.Sectionid;
          }
          if (other.HasGroupid) {
            Groupid = other.Groupid;
          }
          if (other.HasIndex) {
            Index = other.Index;
          }
          if (other.HasTeamid) {
            Teamid = other.Teamid;
          }
          if (other.HasItemid) {
            Itemid = other.Itemid;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_groupMatchTeamPickFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _groupMatchTeamPickFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasSectionid = input.ReadInt32(ref result.sectionid_);
                break;
              }
              case 16: {
                result.hasGroupid = input.ReadInt32(ref result.groupid_);
                break;
              }
              case 24: {
                result.hasIndex = input.ReadInt32(ref result.index_);
                break;
              }
              case 32: {
                result.hasTeamid = input.ReadInt32(ref result.teamid_);
                break;
              }
              case 40: {
                result.hasItemid = input.ReadUInt64(ref result.itemid_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasSectionid {
          get { return result.hasSectionid; }
        }
        public int Sectionid {
          get { return result.Sectionid; }
          set { SetSectionid(value); }
        }
        public Builder SetSectionid(int value) {
          PrepareBuilder();
          result.hasSectionid = true;
          result.sectionid_ = value;
          return this;
        }
        public Builder ClearSectionid() {
          PrepareBuilder();
          result.hasSectionid = false;
          result.sectionid_ = 0;
          return this;
        }
        
        public bool HasGroupid {
          get { return result.hasGroupid; }
        }
        public int Groupid {
          get { return result.Groupid; }
          set { SetGroupid(value); }
        }
        public Builder SetGroupid(int value) {
          PrepareBuilder();
          result.hasGroupid = true;
          result.groupid_ = value;
          return this;
        }
        public Builder ClearGroupid() {
          PrepareBuilder();
          result.hasGroupid = false;
          result.groupid_ = 0;
          return this;
        }
        
        public bool HasIndex {
          get { return result.hasIndex; }
        }
        public int Index {
          get { return result.Index; }
          set { SetIndex(value); }
        }
        public Builder SetIndex(int value) {
          PrepareBuilder();
          result.hasIndex = true;
          result.index_ = value;
          return this;
        }
        public Builder ClearIndex() {
          PrepareBuilder();
          result.hasIndex = false;
          result.index_ = 0;
          return this;
        }
        
        public bool HasTeamid {
          get { return result.hasTeamid; }
        }
        public int Teamid {
          get { return result.Teamid; }
          set { SetTeamid(value); }
        }
        public Builder SetTeamid(int value) {
          PrepareBuilder();
          result.hasTeamid = true;
          result.teamid_ = value;
          return this;
        }
        public Builder ClearTeamid() {
          PrepareBuilder();
          result.hasTeamid = false;
          result.teamid_ = 0;
          return this;
        }
        
        public bool HasItemid {
          get { return result.hasItemid; }
        }
        [global::System.CLSCompliant(false)]
        public ulong Itemid {
          get { return result.Itemid; }
          set { SetItemid(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetItemid(ulong value) {
          PrepareBuilder();
          result.hasItemid = true;
          result.itemid_ = value;
          return this;
        }
        public Builder ClearItemid() {
          PrepareBuilder();
          result.hasItemid = false;
          result.itemid_ = 0UL;
          return this;
        }
      }
      static GroupMatchTeamPick() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int EventIdFieldNumber = 1;
  private bool hasEventId;
  private uint eventId_;
  public bool HasEventId {
    get { return hasEventId; }
  }
  [global::System.CLSCompliant(false)]
  public uint EventId {
    get { return eventId_; }
  }
  
  public const int GroupMatchTeamPicksFieldNumber = 2;
  private pbc::PopsicleList<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick> groupMatchTeamPicks_ = new pbc::PopsicleList<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick>();
  public scg::IList<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick> GroupMatchTeamPicksList {
    get { return groupMatchTeamPicks_; }
  }
  public int GroupMatchTeamPicksCount {
    get { return groupMatchTeamPicks_.Count; }
  }
  public global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick GetGroupMatchTeamPicks(int index) {
    return groupMatchTeamPicks_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2PredictionsFieldNames;
    if (hasEventId) {
      output.WriteUInt32(1, field_names[0], EventId);
    }
    if (groupMatchTeamPicks_.Count > 0) {
      output.WriteMessageArray(2, field_names[1], groupMatchTeamPicks_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasEventId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, EventId);
      }
      foreach (global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick element in GroupMatchTeamPicksList) {
        size += pb::CodedOutputStream.ComputeMessageSize(2, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Predictions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_Predictions MakeReadOnly() {
    groupMatchTeamPicks_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_Predictions prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_Predictions, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_Predictions cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_Predictions result;
    
    private CMsgGCCStrike15_v2_Predictions PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_Predictions original = result;
        result = new CMsgGCCStrike15_v2_Predictions();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_Predictions MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_Predictions.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_Predictions DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_Predictions.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_Predictions BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_Predictions) {
        return MergeFrom((CMsgGCCStrike15_v2_Predictions) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_Predictions other) {
      if (other == global::CMsgGCCStrike15_v2_Predictions.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasEventId) {
        EventId = other.EventId;
      }
      if (other.groupMatchTeamPicks_.Count != 0) {
        result.groupMatchTeamPicks_.Add(other.groupMatchTeamPicks_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2PredictionsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2PredictionsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasEventId = input.ReadUInt32(ref result.eventId_);
            break;
          }
          case 18: {
            input.ReadMessageArray(tag, field_name, result.groupMatchTeamPicks_, global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasEventId {
      get { return result.hasEventId; }
    }
    [global::System.CLSCompliant(false)]
    public uint EventId {
      get { return result.EventId; }
      set { SetEventId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetEventId(uint value) {
      PrepareBuilder();
      result.hasEventId = true;
      result.eventId_ = value;
      return this;
    }
    public Builder ClearEventId() {
      PrepareBuilder();
      result.hasEventId = false;
      result.eventId_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick> GroupMatchTeamPicksList {
      get { return PrepareBuilder().groupMatchTeamPicks_; }
    }
    public int GroupMatchTeamPicksCount {
      get { return result.GroupMatchTeamPicksCount; }
    }
    public global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick GetGroupMatchTeamPicks(int index) {
      return result.GetGroupMatchTeamPicks(index);
    }
    public Builder SetGroupMatchTeamPicks(int index, global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.groupMatchTeamPicks_[index] = value;
      return this;
    }
    public Builder SetGroupMatchTeamPicks(int index, global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.groupMatchTeamPicks_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddGroupMatchTeamPicks(global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.groupMatchTeamPicks_.Add(value);
      return this;
    }
    public Builder AddGroupMatchTeamPicks(global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.groupMatchTeamPicks_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeGroupMatchTeamPicks(scg::IEnumerable<global::CMsgGCCStrike15_v2_Predictions.Types.GroupMatchTeamPick> values) {
      PrepareBuilder();
      result.groupMatchTeamPicks_.Add(values);
      return this;
    }
    public Builder ClearGroupMatchTeamPicks() {
      PrepareBuilder();
      result.groupMatchTeamPicks_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_Predictions() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CAttribute_String : pb::GeneratedMessage<CAttribute_String, CAttribute_String.Builder> {
  private CAttribute_String() { }
  private static readonly CAttribute_String defaultInstance = new CAttribute_String().MakeReadOnly();
  private static readonly string[] _cAttributeStringFieldNames = new string[] { "value" };
  private static readonly uint[] _cAttributeStringFieldTags = new uint[] { 10 };
  public static CAttribute_String DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CAttribute_String DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CAttribute_String ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CAttribute_String__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CAttribute_String, CAttribute_String.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CAttribute_String__FieldAccessorTable; }
  }
  
  public const int ValueFieldNumber = 1;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cAttributeStringFieldNames;
    if (hasValue) {
      output.WriteString(1, field_names[0], Value);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CAttribute_String ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CAttribute_String ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CAttribute_String ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CAttribute_String ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CAttribute_String ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CAttribute_String ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CAttribute_String ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CAttribute_String ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CAttribute_String ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CAttribute_String ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CAttribute_String MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CAttribute_String prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CAttribute_String, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CAttribute_String cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CAttribute_String result;
    
    private CAttribute_String PrepareBuilder() {
      if (resultIsReadOnly) {
        CAttribute_String original = result;
        result = new CAttribute_String();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CAttribute_String MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CAttribute_String.Descriptor; }
    }
    
    public override CAttribute_String DefaultInstanceForType {
      get { return global::CAttribute_String.DefaultInstance; }
    }
    
    public override CAttribute_String BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CAttribute_String) {
        return MergeFrom((CAttribute_String) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CAttribute_String other) {
      if (other == global::CAttribute_String.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasValue) {
        Value = other.Value;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cAttributeStringFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cAttributeStringFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
  }
  static CAttribute_String() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCToGCReloadVersions : pb::GeneratedMessage<CMsgGCToGCReloadVersions, CMsgGCToGCReloadVersions.Builder> {
  private CMsgGCToGCReloadVersions() { }
  private static readonly CMsgGCToGCReloadVersions defaultInstance = new CMsgGCToGCReloadVersions().MakeReadOnly();
  private static readonly string[] _cMsgGCToGCReloadVersionsFieldNames = new string[] {  };
  private static readonly uint[] _cMsgGCToGCReloadVersionsFieldTags = new uint[] {  };
  public static CMsgGCToGCReloadVersions DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCToGCReloadVersions DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCToGCReloadVersions ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCToGCReloadVersions__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCToGCReloadVersions, CMsgGCToGCReloadVersions.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCToGCReloadVersions__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCToGCReloadVersionsFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCToGCReloadVersions ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCToGCReloadVersions ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCToGCReloadVersions MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCToGCReloadVersions prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCToGCReloadVersions, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCToGCReloadVersions cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCToGCReloadVersions result;
    
    private CMsgGCToGCReloadVersions PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCToGCReloadVersions original = result;
        result = new CMsgGCToGCReloadVersions();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCToGCReloadVersions MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCToGCReloadVersions.Descriptor; }
    }
    
    public override CMsgGCToGCReloadVersions DefaultInstanceForType {
      get { return global::CMsgGCToGCReloadVersions.DefaultInstance; }
    }
    
    public override CMsgGCToGCReloadVersions BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCToGCReloadVersions) {
        return MergeFrom((CMsgGCToGCReloadVersions) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCToGCReloadVersions other) {
      if (other == global::CMsgGCToGCReloadVersions.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCToGCReloadVersionsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCToGCReloadVersionsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CMsgGCToGCReloadVersions() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgCStrike15Welcome : pb::GeneratedMessage<CMsgCStrike15Welcome, CMsgCStrike15Welcome.Builder> {
  private CMsgCStrike15Welcome() { }
  private static readonly CMsgCStrike15Welcome defaultInstance = new CMsgCStrike15Welcome().MakeReadOnly();
  private static readonly string[] _cMsgCStrike15WelcomeFieldNames = new string[] { "last_ip_address", "last_time_played", "store_item_hash", "time_first_played", "timeplayedconsecutively" };
  private static readonly uint[] _cMsgCStrike15WelcomeFieldTags = new uint[] { 104, 96, 40, 80, 48 };
  public static CMsgCStrike15Welcome DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgCStrike15Welcome DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgCStrike15Welcome ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgCStrike15Welcome__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgCStrike15Welcome, CMsgCStrike15Welcome.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgCStrike15Welcome__FieldAccessorTable; }
  }
  
  public const int StoreItemHashFieldNumber = 5;
  private bool hasStoreItemHash;
  private uint storeItemHash_;
  public bool HasStoreItemHash {
    get { return hasStoreItemHash; }
  }
  [global::System.CLSCompliant(false)]
  public uint StoreItemHash {
    get { return storeItemHash_; }
  }
  
  public const int TimeplayedconsecutivelyFieldNumber = 6;
  private bool hasTimeplayedconsecutively;
  private uint timeplayedconsecutively_;
  public bool HasTimeplayedconsecutively {
    get { return hasTimeplayedconsecutively; }
  }
  [global::System.CLSCompliant(false)]
  public uint Timeplayedconsecutively {
    get { return timeplayedconsecutively_; }
  }
  
  public const int TimeFirstPlayedFieldNumber = 10;
  private bool hasTimeFirstPlayed;
  private uint timeFirstPlayed_;
  public bool HasTimeFirstPlayed {
    get { return hasTimeFirstPlayed; }
  }
  [global::System.CLSCompliant(false)]
  public uint TimeFirstPlayed {
    get { return timeFirstPlayed_; }
  }
  
  public const int LastTimePlayedFieldNumber = 12;
  private bool hasLastTimePlayed;
  private uint lastTimePlayed_;
  public bool HasLastTimePlayed {
    get { return hasLastTimePlayed; }
  }
  [global::System.CLSCompliant(false)]
  public uint LastTimePlayed {
    get { return lastTimePlayed_; }
  }
  
  public const int LastIpAddressFieldNumber = 13;
  private bool hasLastIpAddress;
  private uint lastIpAddress_;
  public bool HasLastIpAddress {
    get { return hasLastIpAddress; }
  }
  [global::System.CLSCompliant(false)]
  public uint LastIpAddress {
    get { return lastIpAddress_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgCStrike15WelcomeFieldNames;
    if (hasStoreItemHash) {
      output.WriteUInt32(5, field_names[2], StoreItemHash);
    }
    if (hasTimeplayedconsecutively) {
      output.WriteUInt32(6, field_names[4], Timeplayedconsecutively);
    }
    if (hasTimeFirstPlayed) {
      output.WriteUInt32(10, field_names[3], TimeFirstPlayed);
    }
    if (hasLastTimePlayed) {
      output.WriteUInt32(12, field_names[1], LastTimePlayed);
    }
    if (hasLastIpAddress) {
      output.WriteUInt32(13, field_names[0], LastIpAddress);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasStoreItemHash) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, StoreItemHash);
      }
      if (hasTimeplayedconsecutively) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Timeplayedconsecutively);
      }
      if (hasTimeFirstPlayed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, TimeFirstPlayed);
      }
      if (hasLastTimePlayed) {
        size += pb::CodedOutputStream.ComputeUInt32Size(12, LastTimePlayed);
      }
      if (hasLastIpAddress) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, LastIpAddress);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgCStrike15Welcome ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCStrike15Welcome ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgCStrike15Welcome MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgCStrike15Welcome prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgCStrike15Welcome, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgCStrike15Welcome cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgCStrike15Welcome result;
    
    private CMsgCStrike15Welcome PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgCStrike15Welcome original = result;
        result = new CMsgCStrike15Welcome();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgCStrike15Welcome MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgCStrike15Welcome.Descriptor; }
    }
    
    public override CMsgCStrike15Welcome DefaultInstanceForType {
      get { return global::CMsgCStrike15Welcome.DefaultInstance; }
    }
    
    public override CMsgCStrike15Welcome BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgCStrike15Welcome) {
        return MergeFrom((CMsgCStrike15Welcome) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgCStrike15Welcome other) {
      if (other == global::CMsgCStrike15Welcome.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasStoreItemHash) {
        StoreItemHash = other.StoreItemHash;
      }
      if (other.HasTimeplayedconsecutively) {
        Timeplayedconsecutively = other.Timeplayedconsecutively;
      }
      if (other.HasTimeFirstPlayed) {
        TimeFirstPlayed = other.TimeFirstPlayed;
      }
      if (other.HasLastTimePlayed) {
        LastTimePlayed = other.LastTimePlayed;
      }
      if (other.HasLastIpAddress) {
        LastIpAddress = other.LastIpAddress;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgCStrike15WelcomeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgCStrike15WelcomeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 40: {
            result.hasStoreItemHash = input.ReadUInt32(ref result.storeItemHash_);
            break;
          }
          case 48: {
            result.hasTimeplayedconsecutively = input.ReadUInt32(ref result.timeplayedconsecutively_);
            break;
          }
          case 80: {
            result.hasTimeFirstPlayed = input.ReadUInt32(ref result.timeFirstPlayed_);
            break;
          }
          case 96: {
            result.hasLastTimePlayed = input.ReadUInt32(ref result.lastTimePlayed_);
            break;
          }
          case 104: {
            result.hasLastIpAddress = input.ReadUInt32(ref result.lastIpAddress_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasStoreItemHash {
      get { return result.hasStoreItemHash; }
    }
    [global::System.CLSCompliant(false)]
    public uint StoreItemHash {
      get { return result.StoreItemHash; }
      set { SetStoreItemHash(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetStoreItemHash(uint value) {
      PrepareBuilder();
      result.hasStoreItemHash = true;
      result.storeItemHash_ = value;
      return this;
    }
    public Builder ClearStoreItemHash() {
      PrepareBuilder();
      result.hasStoreItemHash = false;
      result.storeItemHash_ = 0;
      return this;
    }
    
    public bool HasTimeplayedconsecutively {
      get { return result.hasTimeplayedconsecutively; }
    }
    [global::System.CLSCompliant(false)]
    public uint Timeplayedconsecutively {
      get { return result.Timeplayedconsecutively; }
      set { SetTimeplayedconsecutively(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTimeplayedconsecutively(uint value) {
      PrepareBuilder();
      result.hasTimeplayedconsecutively = true;
      result.timeplayedconsecutively_ = value;
      return this;
    }
    public Builder ClearTimeplayedconsecutively() {
      PrepareBuilder();
      result.hasTimeplayedconsecutively = false;
      result.timeplayedconsecutively_ = 0;
      return this;
    }
    
    public bool HasTimeFirstPlayed {
      get { return result.hasTimeFirstPlayed; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimeFirstPlayed {
      get { return result.TimeFirstPlayed; }
      set { SetTimeFirstPlayed(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTimeFirstPlayed(uint value) {
      PrepareBuilder();
      result.hasTimeFirstPlayed = true;
      result.timeFirstPlayed_ = value;
      return this;
    }
    public Builder ClearTimeFirstPlayed() {
      PrepareBuilder();
      result.hasTimeFirstPlayed = false;
      result.timeFirstPlayed_ = 0;
      return this;
    }
    
    public bool HasLastTimePlayed {
      get { return result.hasLastTimePlayed; }
    }
    [global::System.CLSCompliant(false)]
    public uint LastTimePlayed {
      get { return result.LastTimePlayed; }
      set { SetLastTimePlayed(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetLastTimePlayed(uint value) {
      PrepareBuilder();
      result.hasLastTimePlayed = true;
      result.lastTimePlayed_ = value;
      return this;
    }
    public Builder ClearLastTimePlayed() {
      PrepareBuilder();
      result.hasLastTimePlayed = false;
      result.lastTimePlayed_ = 0;
      return this;
    }
    
    public bool HasLastIpAddress {
      get { return result.hasLastIpAddress; }
    }
    [global::System.CLSCompliant(false)]
    public uint LastIpAddress {
      get { return result.LastIpAddress; }
      set { SetLastIpAddress(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetLastIpAddress(uint value) {
      PrepareBuilder();
      result.hasLastIpAddress = true;
      result.lastIpAddress_ = value;
      return this;
    }
    public Builder ClearLastIpAddress() {
      PrepareBuilder();
      result.hasLastIpAddress = false;
      result.lastIpAddress_ = 0;
      return this;
    }
  }
  static CMsgCStrike15Welcome() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientVarValueNotificationInfo : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.Builder> {
  private CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() { }
  private static readonly CMsgGCCStrike15_v2_ClientVarValueNotificationInfo defaultInstance = new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientVarValueNotificationInfoFieldNames = new string[] { "server_addr", "server_port", "value_int", "value_name" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientVarValueNotificationInfoFieldTags = new uint[] { 24, 32, 16, 10 };
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientVarValueNotificationInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientVarValueNotificationInfo__FieldAccessorTable; }
  }
  
  public const int ValueNameFieldNumber = 1;
  private bool hasValueName;
  private string valueName_ = "";
  public bool HasValueName {
    get { return hasValueName; }
  }
  public string ValueName {
    get { return valueName_; }
  }
  
  public const int ValueIntFieldNumber = 2;
  private bool hasValueInt;
  private int valueInt_;
  public bool HasValueInt {
    get { return hasValueInt; }
  }
  public int ValueInt {
    get { return valueInt_; }
  }
  
  public const int ServerAddrFieldNumber = 3;
  private bool hasServerAddr;
  private uint serverAddr_;
  public bool HasServerAddr {
    get { return hasServerAddr; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServerAddr {
    get { return serverAddr_; }
  }
  
  public const int ServerPortFieldNumber = 4;
  private bool hasServerPort;
  private uint serverPort_;
  public bool HasServerPort {
    get { return hasServerPort; }
  }
  [global::System.CLSCompliant(false)]
  public uint ServerPort {
    get { return serverPort_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientVarValueNotificationInfoFieldNames;
    if (hasValueName) {
      output.WriteString(1, field_names[3], ValueName);
    }
    if (hasValueInt) {
      output.WriteInt32(2, field_names[2], ValueInt);
    }
    if (hasServerAddr) {
      output.WriteUInt32(3, field_names[0], ServerAddr);
    }
    if (hasServerPort) {
      output.WriteUInt32(4, field_names[1], ServerPort);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasValueName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, ValueName);
      }
      if (hasValueInt) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ValueInt);
      }
      if (hasServerAddr) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, ServerAddr);
      }
      if (hasServerPort) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, ServerPort);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientVarValueNotificationInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientVarValueNotificationInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientVarValueNotificationInfo result;
    
    private CMsgGCCStrike15_v2_ClientVarValueNotificationInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientVarValueNotificationInfo original = result;
        result = new CMsgGCCStrike15_v2_ClientVarValueNotificationInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientVarValueNotificationInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientVarValueNotificationInfo DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientVarValueNotificationInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientVarValueNotificationInfo) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientVarValueNotificationInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientVarValueNotificationInfo other) {
      if (other == global::CMsgGCCStrike15_v2_ClientVarValueNotificationInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasValueName) {
        ValueName = other.ValueName;
      }
      if (other.HasValueInt) {
        ValueInt = other.ValueInt;
      }
      if (other.HasServerAddr) {
        ServerAddr = other.ServerAddr;
      }
      if (other.HasServerPort) {
        ServerPort = other.ServerPort;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientVarValueNotificationInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientVarValueNotificationInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasValueName = input.ReadString(ref result.valueName_);
            break;
          }
          case 16: {
            result.hasValueInt = input.ReadInt32(ref result.valueInt_);
            break;
          }
          case 24: {
            result.hasServerAddr = input.ReadUInt32(ref result.serverAddr_);
            break;
          }
          case 32: {
            result.hasServerPort = input.ReadUInt32(ref result.serverPort_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasValueName {
      get { return result.hasValueName; }
    }
    public string ValueName {
      get { return result.ValueName; }
      set { SetValueName(value); }
    }
    public Builder SetValueName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValueName = true;
      result.valueName_ = value;
      return this;
    }
    public Builder ClearValueName() {
      PrepareBuilder();
      result.hasValueName = false;
      result.valueName_ = "";
      return this;
    }
    
    public bool HasValueInt {
      get { return result.hasValueInt; }
    }
    public int ValueInt {
      get { return result.ValueInt; }
      set { SetValueInt(value); }
    }
    public Builder SetValueInt(int value) {
      PrepareBuilder();
      result.hasValueInt = true;
      result.valueInt_ = value;
      return this;
    }
    public Builder ClearValueInt() {
      PrepareBuilder();
      result.hasValueInt = false;
      result.valueInt_ = 0;
      return this;
    }
    
    public bool HasServerAddr {
      get { return result.hasServerAddr; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerAddr {
      get { return result.ServerAddr; }
      set { SetServerAddr(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerAddr(uint value) {
      PrepareBuilder();
      result.hasServerAddr = true;
      result.serverAddr_ = value;
      return this;
    }
    public Builder ClearServerAddr() {
      PrepareBuilder();
      result.hasServerAddr = false;
      result.serverAddr_ = 0;
      return this;
    }
    
    public bool HasServerPort {
      get { return result.hasServerPort; }
    }
    [global::System.CLSCompliant(false)]
    public uint ServerPort {
      get { return result.ServerPort; }
      set { SetServerPort(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServerPort(uint value) {
      PrepareBuilder();
      result.hasServerPort = true;
      result.serverPort_ = value;
      return this;
    }
    public Builder ClearServerPort() {
      PrepareBuilder();
      result.hasServerPort = false;
      result.serverPort_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientVarValueNotificationInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ServerVarValueNotificationInfo : pb::GeneratedMessage<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.Builder> {
  private CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() { }
  private static readonly CMsgGCCStrike15_v2_ServerVarValueNotificationInfo defaultInstance = new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ServerVarValueNotificationInfoFieldNames = new string[] { "accountid", "viewangles" };
  private static readonly uint[] _cMsgGCCStrike15V2ServerVarValueNotificationInfoFieldTags = new uint[] { 8, 16 };
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ServerVarValueNotificationInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ServerVarValueNotificationInfo__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public const int ViewanglesFieldNumber = 2;
  private pbc::PopsicleList<uint> viewangles_ = new pbc::PopsicleList<uint>();
  [global::System.CLSCompliant(false)]
  public scg::IList<uint> ViewanglesList {
    get { return pbc::Lists.AsReadOnly(viewangles_); }
  }
  public int ViewanglesCount {
    get { return viewangles_.Count; }
  }
  [global::System.CLSCompliant(false)]
  public uint GetViewangles(int index) {
    return viewangles_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ServerVarValueNotificationInfoFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    if (viewangles_.Count > 0) {
      output.WriteUInt32Array(2, field_names[1], viewangles_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      {
        int dataSize = 0;
        foreach (uint element in ViewanglesList) {
          dataSize += pb::CodedOutputStream.ComputeUInt32SizeNoTag(element);
        }
        size += dataSize;
        size += 1 * viewangles_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ServerVarValueNotificationInfo MakeReadOnly() {
    viewangles_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ServerVarValueNotificationInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ServerVarValueNotificationInfo result;
    
    private CMsgGCCStrike15_v2_ServerVarValueNotificationInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ServerVarValueNotificationInfo original = result;
        result = new CMsgGCCStrike15_v2_ServerVarValueNotificationInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ServerVarValueNotificationInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ServerVarValueNotificationInfo DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ServerVarValueNotificationInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ServerVarValueNotificationInfo) {
        return MergeFrom((CMsgGCCStrike15_v2_ServerVarValueNotificationInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ServerVarValueNotificationInfo other) {
      if (other == global::CMsgGCCStrike15_v2_ServerVarValueNotificationInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      if (other.viewangles_.Count != 0) {
        result.viewangles_.Add(other.viewangles_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ServerVarValueNotificationInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ServerVarValueNotificationInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
          case 18:
          case 16: {
            input.ReadUInt32Array(tag, field_name, result.viewangles_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
    
    [global::System.CLSCompliant(false)]
    public pbc::IPopsicleList<uint> ViewanglesList {
      get { return PrepareBuilder().viewangles_; }
    }
    public int ViewanglesCount {
      get { return result.ViewanglesCount; }
    }
    [global::System.CLSCompliant(false)]
    public uint GetViewangles(int index) {
      return result.GetViewangles(index);
    }
    [global::System.CLSCompliant(false)]
    public Builder SetViewangles(int index, uint value) {
      PrepareBuilder();
      result.viewangles_[index] = value;
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddViewangles(uint value) {
      PrepareBuilder();
      result.viewangles_.Add(value);
      return this;
    }
    [global::System.CLSCompliant(false)]
    public Builder AddRangeViewangles(scg::IEnumerable<uint> values) {
      PrepareBuilder();
      result.viewangles_.Add(values);
      return this;
    }
    public Builder ClearViewangles() {
      PrepareBuilder();
      result.viewangles_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ServerVarValueNotificationInfo() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_GiftsLeaderboardRequest : pb::GeneratedMessage<CMsgGCCStrike15_v2_GiftsLeaderboardRequest, CMsgGCCStrike15_v2_GiftsLeaderboardRequest.Builder> {
  private CMsgGCCStrike15_v2_GiftsLeaderboardRequest() { }
  private static readonly CMsgGCCStrike15_v2_GiftsLeaderboardRequest defaultInstance = new CMsgGCCStrike15_v2_GiftsLeaderboardRequest().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2GiftsLeaderboardRequestFieldNames = new string[] {  };
  private static readonly uint[] _cMsgGCCStrike15V2GiftsLeaderboardRequestFieldTags = new uint[] {  };
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_GiftsLeaderboardRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_GiftsLeaderboardRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_GiftsLeaderboardRequest, CMsgGCCStrike15_v2_GiftsLeaderboardRequest.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardRequest__FieldAccessorTable; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2GiftsLeaderboardRequestFieldNames;
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_GiftsLeaderboardRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_GiftsLeaderboardRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_GiftsLeaderboardRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_GiftsLeaderboardRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_GiftsLeaderboardRequest result;
    
    private CMsgGCCStrike15_v2_GiftsLeaderboardRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_GiftsLeaderboardRequest original = result;
        result = new CMsgGCCStrike15_v2_GiftsLeaderboardRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_GiftsLeaderboardRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_GiftsLeaderboardRequest DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_GiftsLeaderboardRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_GiftsLeaderboardRequest) {
        return MergeFrom((CMsgGCCStrike15_v2_GiftsLeaderboardRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_GiftsLeaderboardRequest other) {
      if (other == global::CMsgGCCStrike15_v2_GiftsLeaderboardRequest.DefaultInstance) return this;
      PrepareBuilder();
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2GiftsLeaderboardRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2GiftsLeaderboardRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
  }
  static CMsgGCCStrike15_v2_GiftsLeaderboardRequest() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_GiftsLeaderboardResponse : pb::GeneratedMessage<CMsgGCCStrike15_v2_GiftsLeaderboardResponse, CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Builder> {
  private CMsgGCCStrike15_v2_GiftsLeaderboardResponse() { }
  private static readonly CMsgGCCStrike15_v2_GiftsLeaderboardResponse defaultInstance = new CMsgGCCStrike15_v2_GiftsLeaderboardResponse().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2GiftsLeaderboardResponseFieldNames = new string[] { "entries", "servertime", "time_period_seconds", "total_gifts_given", "total_givers" };
  private static readonly uint[] _cMsgGCCStrike15V2GiftsLeaderboardResponseFieldTags = new uint[] { 42, 8, 16, 24, 32 };
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_GiftsLeaderboardResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_GiftsLeaderboardResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_GiftsLeaderboardResponse, CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse__FieldAccessorTable; }
  }
  
  #region Nested types
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Types {
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public sealed partial class GiftLeaderboardEntry : pb::GeneratedMessage<GiftLeaderboardEntry, GiftLeaderboardEntry.Builder> {
      private GiftLeaderboardEntry() { }
      private static readonly GiftLeaderboardEntry defaultInstance = new GiftLeaderboardEntry().MakeReadOnly();
      private static readonly string[] _giftLeaderboardEntryFieldNames = new string[] { "accountid", "gifts" };
      private static readonly uint[] _giftLeaderboardEntryFieldTags = new uint[] { 8, 16 };
      public static GiftLeaderboardEntry DefaultInstance {
        get { return defaultInstance; }
      }
      
      public override GiftLeaderboardEntry DefaultInstanceForType {
        get { return DefaultInstance; }
      }
      
      protected override GiftLeaderboardEntry ThisMessage {
        get { return this; }
      }
      
      public static pbd::MessageDescriptor Descriptor {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__Descriptor; }
      }
      
      protected override pb::FieldAccess.FieldAccessorTable<GiftLeaderboardEntry, GiftLeaderboardEntry.Builder> InternalFieldAccessors {
        get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_GiftsLeaderboardResponse_GiftLeaderboardEntry__FieldAccessorTable; }
      }
      
      public const int AccountidFieldNumber = 1;
      private bool hasAccountid;
      private uint accountid_;
      public bool HasAccountid {
        get { return hasAccountid; }
      }
      [global::System.CLSCompliant(false)]
      public uint Accountid {
        get { return accountid_; }
      }
      
      public const int GiftsFieldNumber = 2;
      private bool hasGifts;
      private uint gifts_;
      public bool HasGifts {
        get { return hasGifts; }
      }
      [global::System.CLSCompliant(false)]
      public uint Gifts {
        get { return gifts_; }
      }
      
      public override bool IsInitialized {
        get {
          return true;
        }
      }
      
      public override void WriteTo(pb::ICodedOutputStream output) {
        int size = SerializedSize;
        string[] field_names = _giftLeaderboardEntryFieldNames;
        if (hasAccountid) {
          output.WriteUInt32(1, field_names[0], Accountid);
        }
        if (hasGifts) {
          output.WriteUInt32(2, field_names[1], Gifts);
        }
        UnknownFields.WriteTo(output);
      }
      
      private int memoizedSerializedSize = -1;
      public override int SerializedSize {
        get {
          int size = memoizedSerializedSize;
          if (size != -1) return size;
          
          size = 0;
          if (hasAccountid) {
            size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
          }
          if (hasGifts) {
            size += pb::CodedOutputStream.ComputeUInt32Size(2, Gifts);
          }
          size += UnknownFields.SerializedSize;
          memoizedSerializedSize = size;
          return size;
        }
      }
      
      public static GiftLeaderboardEntry ParseFrom(pb::ByteString data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(byte[] data) {
        return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(global::System.IO.Stream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseDelimitedFrom(global::System.IO.Stream input) {
        return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
        return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(pb::ICodedInputStream input) {
        return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
      }
      public static GiftLeaderboardEntry ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
        return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
      }
      private GiftLeaderboardEntry MakeReadOnly() {
        return this;
      }
      
      public static Builder CreateBuilder() { return new Builder(); }
      public override Builder ToBuilder() { return CreateBuilder(this); }
      public override Builder CreateBuilderForType() { return new Builder(); }
      public static Builder CreateBuilder(GiftLeaderboardEntry prototype) {
        return new Builder(prototype);
      }
      
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Builder : pb::GeneratedBuilder<GiftLeaderboardEntry, Builder> {
        protected override Builder ThisBuilder {
          get { return this; }
        }
        public Builder() {
          result = DefaultInstance;
          resultIsReadOnly = true;
        }
        internal Builder(GiftLeaderboardEntry cloneFrom) {
          result = cloneFrom;
          resultIsReadOnly = true;
        }
        
        private bool resultIsReadOnly;
        private GiftLeaderboardEntry result;
        
        private GiftLeaderboardEntry PrepareBuilder() {
          if (resultIsReadOnly) {
            GiftLeaderboardEntry original = result;
            result = new GiftLeaderboardEntry();
            resultIsReadOnly = false;
            MergeFrom(original);
          }
          return result;
        }
        
        public override bool IsInitialized {
          get { return result.IsInitialized; }
        }
        
        protected override GiftLeaderboardEntry MessageBeingBuilt {
          get { return PrepareBuilder(); }
        }
        
        public override Builder Clear() {
          result = DefaultInstance;
          resultIsReadOnly = true;
          return this;
        }
        
        public override Builder Clone() {
          if (resultIsReadOnly) {
            return new Builder(result);
          } else {
            return new Builder().MergeFrom(result);
          }
        }
        
        public override pbd::MessageDescriptor DescriptorForType {
          get { return global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.Descriptor; }
        }
        
        public override GiftLeaderboardEntry DefaultInstanceForType {
          get { return global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.DefaultInstance; }
        }
        
        public override GiftLeaderboardEntry BuildPartial() {
          if (resultIsReadOnly) {
            return result;
          }
          resultIsReadOnly = true;
          return result.MakeReadOnly();
        }
        
        public override Builder MergeFrom(pb::IMessage other) {
          if (other is GiftLeaderboardEntry) {
            return MergeFrom((GiftLeaderboardEntry) other);
          } else {
            base.MergeFrom(other);
            return this;
          }
        }
        
        public override Builder MergeFrom(GiftLeaderboardEntry other) {
          if (other == global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.DefaultInstance) return this;
          PrepareBuilder();
          if (other.HasAccountid) {
            Accountid = other.Accountid;
          }
          if (other.HasGifts) {
            Gifts = other.Gifts;
          }
          this.MergeUnknownFields(other.UnknownFields);
          return this;
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input) {
          return MergeFrom(input, pb::ExtensionRegistry.Empty);
        }
        
        public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
          PrepareBuilder();
          pb::UnknownFieldSet.Builder unknownFields = null;
          uint tag;
          string field_name;
          while (input.ReadTag(out tag, out field_name)) {
            if(tag == 0 && field_name != null) {
              int field_ordinal = global::System.Array.BinarySearch(_giftLeaderboardEntryFieldNames, field_name, global::System.StringComparer.Ordinal);
              if(field_ordinal >= 0)
                tag = _giftLeaderboardEntryFieldTags[field_ordinal];
              else {
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                continue;
              }
            }
            switch (tag) {
              case 0: {
                throw pb::InvalidProtocolBufferException.InvalidTag();
              }
              default: {
                if (pb::WireFormat.IsEndGroupTag(tag)) {
                  if (unknownFields != null) {
                    this.UnknownFields = unknownFields.Build();
                  }
                  return this;
                }
                if (unknownFields == null) {
                  unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
                }
                ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
                break;
              }
              case 8: {
                result.hasAccountid = input.ReadUInt32(ref result.accountid_);
                break;
              }
              case 16: {
                result.hasGifts = input.ReadUInt32(ref result.gifts_);
                break;
              }
            }
          }
          
          if (unknownFields != null) {
            this.UnknownFields = unknownFields.Build();
          }
          return this;
        }
        
        
        public bool HasAccountid {
          get { return result.hasAccountid; }
        }
        [global::System.CLSCompliant(false)]
        public uint Accountid {
          get { return result.Accountid; }
          set { SetAccountid(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetAccountid(uint value) {
          PrepareBuilder();
          result.hasAccountid = true;
          result.accountid_ = value;
          return this;
        }
        public Builder ClearAccountid() {
          PrepareBuilder();
          result.hasAccountid = false;
          result.accountid_ = 0;
          return this;
        }
        
        public bool HasGifts {
          get { return result.hasGifts; }
        }
        [global::System.CLSCompliant(false)]
        public uint Gifts {
          get { return result.Gifts; }
          set { SetGifts(value); }
        }
        [global::System.CLSCompliant(false)]
        public Builder SetGifts(uint value) {
          PrepareBuilder();
          result.hasGifts = true;
          result.gifts_ = value;
          return this;
        }
        public Builder ClearGifts() {
          PrepareBuilder();
          result.hasGifts = false;
          result.gifts_ = 0;
          return this;
        }
      }
      static GiftLeaderboardEntry() {
        object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
      }
    }
    
  }
  #endregion
  
  public const int ServertimeFieldNumber = 1;
  private bool hasServertime;
  private uint servertime_;
  public bool HasServertime {
    get { return hasServertime; }
  }
  [global::System.CLSCompliant(false)]
  public uint Servertime {
    get { return servertime_; }
  }
  
  public const int TimePeriodSecondsFieldNumber = 2;
  private bool hasTimePeriodSeconds;
  private uint timePeriodSeconds_;
  public bool HasTimePeriodSeconds {
    get { return hasTimePeriodSeconds; }
  }
  [global::System.CLSCompliant(false)]
  public uint TimePeriodSeconds {
    get { return timePeriodSeconds_; }
  }
  
  public const int TotalGiftsGivenFieldNumber = 3;
  private bool hasTotalGiftsGiven;
  private uint totalGiftsGiven_;
  public bool HasTotalGiftsGiven {
    get { return hasTotalGiftsGiven; }
  }
  [global::System.CLSCompliant(false)]
  public uint TotalGiftsGiven {
    get { return totalGiftsGiven_; }
  }
  
  public const int TotalGiversFieldNumber = 4;
  private bool hasTotalGivers;
  private uint totalGivers_;
  public bool HasTotalGivers {
    get { return hasTotalGivers; }
  }
  [global::System.CLSCompliant(false)]
  public uint TotalGivers {
    get { return totalGivers_; }
  }
  
  public const int EntriesFieldNumber = 5;
  private pbc::PopsicleList<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry> entries_ = new pbc::PopsicleList<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry>();
  public scg::IList<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry> EntriesList {
    get { return entries_; }
  }
  public int EntriesCount {
    get { return entries_.Count; }
  }
  public global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry GetEntries(int index) {
    return entries_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2GiftsLeaderboardResponseFieldNames;
    if (hasServertime) {
      output.WriteUInt32(1, field_names[1], Servertime);
    }
    if (hasTimePeriodSeconds) {
      output.WriteUInt32(2, field_names[2], TimePeriodSeconds);
    }
    if (hasTotalGiftsGiven) {
      output.WriteUInt32(3, field_names[3], TotalGiftsGiven);
    }
    if (hasTotalGivers) {
      output.WriteUInt32(4, field_names[4], TotalGivers);
    }
    if (entries_.Count > 0) {
      output.WriteMessageArray(5, field_names[0], entries_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasServertime) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Servertime);
      }
      if (hasTimePeriodSeconds) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, TimePeriodSeconds);
      }
      if (hasTotalGiftsGiven) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, TotalGiftsGiven);
      }
      if (hasTotalGivers) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, TotalGivers);
      }
      foreach (global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry element in EntriesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_GiftsLeaderboardResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_GiftsLeaderboardResponse MakeReadOnly() {
    entries_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_GiftsLeaderboardResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_GiftsLeaderboardResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_GiftsLeaderboardResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_GiftsLeaderboardResponse result;
    
    private CMsgGCCStrike15_v2_GiftsLeaderboardResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_GiftsLeaderboardResponse original = result;
        result = new CMsgGCCStrike15_v2_GiftsLeaderboardResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_GiftsLeaderboardResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_GiftsLeaderboardResponse DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_GiftsLeaderboardResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_GiftsLeaderboardResponse) {
        return MergeFrom((CMsgGCCStrike15_v2_GiftsLeaderboardResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_GiftsLeaderboardResponse other) {
      if (other == global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasServertime) {
        Servertime = other.Servertime;
      }
      if (other.HasTimePeriodSeconds) {
        TimePeriodSeconds = other.TimePeriodSeconds;
      }
      if (other.HasTotalGiftsGiven) {
        TotalGiftsGiven = other.TotalGiftsGiven;
      }
      if (other.HasTotalGivers) {
        TotalGivers = other.TotalGivers;
      }
      if (other.entries_.Count != 0) {
        result.entries_.Add(other.entries_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2GiftsLeaderboardResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2GiftsLeaderboardResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasServertime = input.ReadUInt32(ref result.servertime_);
            break;
          }
          case 16: {
            result.hasTimePeriodSeconds = input.ReadUInt32(ref result.timePeriodSeconds_);
            break;
          }
          case 24: {
            result.hasTotalGiftsGiven = input.ReadUInt32(ref result.totalGiftsGiven_);
            break;
          }
          case 32: {
            result.hasTotalGivers = input.ReadUInt32(ref result.totalGivers_);
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.entries_, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasServertime {
      get { return result.hasServertime; }
    }
    [global::System.CLSCompliant(false)]
    public uint Servertime {
      get { return result.Servertime; }
      set { SetServertime(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetServertime(uint value) {
      PrepareBuilder();
      result.hasServertime = true;
      result.servertime_ = value;
      return this;
    }
    public Builder ClearServertime() {
      PrepareBuilder();
      result.hasServertime = false;
      result.servertime_ = 0;
      return this;
    }
    
    public bool HasTimePeriodSeconds {
      get { return result.hasTimePeriodSeconds; }
    }
    [global::System.CLSCompliant(false)]
    public uint TimePeriodSeconds {
      get { return result.TimePeriodSeconds; }
      set { SetTimePeriodSeconds(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTimePeriodSeconds(uint value) {
      PrepareBuilder();
      result.hasTimePeriodSeconds = true;
      result.timePeriodSeconds_ = value;
      return this;
    }
    public Builder ClearTimePeriodSeconds() {
      PrepareBuilder();
      result.hasTimePeriodSeconds = false;
      result.timePeriodSeconds_ = 0;
      return this;
    }
    
    public bool HasTotalGiftsGiven {
      get { return result.hasTotalGiftsGiven; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalGiftsGiven {
      get { return result.TotalGiftsGiven; }
      set { SetTotalGiftsGiven(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTotalGiftsGiven(uint value) {
      PrepareBuilder();
      result.hasTotalGiftsGiven = true;
      result.totalGiftsGiven_ = value;
      return this;
    }
    public Builder ClearTotalGiftsGiven() {
      PrepareBuilder();
      result.hasTotalGiftsGiven = false;
      result.totalGiftsGiven_ = 0;
      return this;
    }
    
    public bool HasTotalGivers {
      get { return result.hasTotalGivers; }
    }
    [global::System.CLSCompliant(false)]
    public uint TotalGivers {
      get { return result.TotalGivers; }
      set { SetTotalGivers(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTotalGivers(uint value) {
      PrepareBuilder();
      result.hasTotalGivers = true;
      result.totalGivers_ = value;
      return this;
    }
    public Builder ClearTotalGivers() {
      PrepareBuilder();
      result.hasTotalGivers = false;
      result.totalGivers_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry> EntriesList {
      get { return PrepareBuilder().entries_; }
    }
    public int EntriesCount {
      get { return result.EntriesCount; }
    }
    public global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry GetEntries(int index) {
      return result.GetEntries(index);
    }
    public Builder SetEntries(int index, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.entries_[index] = value;
      return this;
    }
    public Builder SetEntries(int index, global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.entries_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddEntries(global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.entries_.Add(value);
      return this;
    }
    public Builder AddEntries(global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.entries_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeEntries(scg::IEnumerable<global::CMsgGCCStrike15_v2_GiftsLeaderboardResponse.Types.GiftLeaderboardEntry> values) {
      PrepareBuilder();
      result.entries_.Add(values);
      return this;
    }
    public Builder ClearEntries() {
      PrepareBuilder();
      result.entries_.Clear();
      return this;
    }
  }
  static CMsgGCCStrike15_v2_GiftsLeaderboardResponse() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_ClientSubmitSurveyVote : pb::GeneratedMessage<CMsgGCCStrike15_v2_ClientSubmitSurveyVote, CMsgGCCStrike15_v2_ClientSubmitSurveyVote.Builder> {
  private CMsgGCCStrike15_v2_ClientSubmitSurveyVote() { }
  private static readonly CMsgGCCStrike15_v2_ClientSubmitSurveyVote defaultInstance = new CMsgGCCStrike15_v2_ClientSubmitSurveyVote().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2ClientSubmitSurveyVoteFieldNames = new string[] { "survey_id", "vote" };
  private static readonly uint[] _cMsgGCCStrike15V2ClientSubmitSurveyVoteFieldTags = new uint[] { 8, 16 };
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_ClientSubmitSurveyVote DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_ClientSubmitSurveyVote ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_ClientSubmitSurveyVote, CMsgGCCStrike15_v2_ClientSubmitSurveyVote.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_ClientSubmitSurveyVote__FieldAccessorTable; }
  }
  
  public const int SurveyIdFieldNumber = 1;
  private bool hasSurveyId;
  private uint surveyId_;
  public bool HasSurveyId {
    get { return hasSurveyId; }
  }
  [global::System.CLSCompliant(false)]
  public uint SurveyId {
    get { return surveyId_; }
  }
  
  public const int VoteFieldNumber = 2;
  private bool hasVote;
  private uint vote_;
  public bool HasVote {
    get { return hasVote; }
  }
  [global::System.CLSCompliant(false)]
  public uint Vote {
    get { return vote_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2ClientSubmitSurveyVoteFieldNames;
    if (hasSurveyId) {
      output.WriteUInt32(1, field_names[0], SurveyId);
    }
    if (hasVote) {
      output.WriteUInt32(2, field_names[1], Vote);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasSurveyId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, SurveyId);
      }
      if (hasVote) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Vote);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_ClientSubmitSurveyVote ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_ClientSubmitSurveyVote MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_ClientSubmitSurveyVote prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_ClientSubmitSurveyVote, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_ClientSubmitSurveyVote cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_ClientSubmitSurveyVote result;
    
    private CMsgGCCStrike15_v2_ClientSubmitSurveyVote PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_ClientSubmitSurveyVote original = result;
        result = new CMsgGCCStrike15_v2_ClientSubmitSurveyVote();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_ClientSubmitSurveyVote MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_ClientSubmitSurveyVote DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_ClientSubmitSurveyVote BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_ClientSubmitSurveyVote) {
        return MergeFrom((CMsgGCCStrike15_v2_ClientSubmitSurveyVote) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_ClientSubmitSurveyVote other) {
      if (other == global::CMsgGCCStrike15_v2_ClientSubmitSurveyVote.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasSurveyId) {
        SurveyId = other.SurveyId;
      }
      if (other.HasVote) {
        Vote = other.Vote;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2ClientSubmitSurveyVoteFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2ClientSubmitSurveyVoteFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasSurveyId = input.ReadUInt32(ref result.surveyId_);
            break;
          }
          case 16: {
            result.hasVote = input.ReadUInt32(ref result.vote_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasSurveyId {
      get { return result.hasSurveyId; }
    }
    [global::System.CLSCompliant(false)]
    public uint SurveyId {
      get { return result.SurveyId; }
      set { SetSurveyId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetSurveyId(uint value) {
      PrepareBuilder();
      result.hasSurveyId = true;
      result.surveyId_ = value;
      return this;
    }
    public Builder ClearSurveyId() {
      PrepareBuilder();
      result.hasSurveyId = false;
      result.surveyId_ = 0;
      return this;
    }
    
    public bool HasVote {
      get { return result.hasVote; }
    }
    [global::System.CLSCompliant(false)]
    public uint Vote {
      get { return result.Vote; }
      set { SetVote(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetVote(uint value) {
      PrepareBuilder();
      result.hasVote = true;
      result.vote_ = value;
      return this;
    }
    public Builder ClearVote() {
      PrepareBuilder();
      result.hasVote = false;
      result.vote_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_ClientSubmitSurveyVote() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_Server2GCClientValidate : pb::GeneratedMessage<CMsgGCCStrike15_v2_Server2GCClientValidate, CMsgGCCStrike15_v2_Server2GCClientValidate.Builder> {
  private CMsgGCCStrike15_v2_Server2GCClientValidate() { }
  private static readonly CMsgGCCStrike15_v2_Server2GCClientValidate defaultInstance = new CMsgGCCStrike15_v2_Server2GCClientValidate().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2Server2GCClientValidateFieldNames = new string[] { "accountid" };
  private static readonly uint[] _cMsgGCCStrike15V2Server2GCClientValidateFieldTags = new uint[] { 8 };
  public static CMsgGCCStrike15_v2_Server2GCClientValidate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_Server2GCClientValidate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_Server2GCClientValidate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_Server2GCClientValidate, CMsgGCCStrike15_v2_Server2GCClientValidate.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Server2GCClientValidate__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2Server2GCClientValidateFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCClientValidate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_Server2GCClientValidate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_Server2GCClientValidate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_Server2GCClientValidate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_Server2GCClientValidate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_Server2GCClientValidate result;
    
    private CMsgGCCStrike15_v2_Server2GCClientValidate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_Server2GCClientValidate original = result;
        result = new CMsgGCCStrike15_v2_Server2GCClientValidate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_Server2GCClientValidate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_Server2GCClientValidate.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_Server2GCClientValidate DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_Server2GCClientValidate.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_Server2GCClientValidate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_Server2GCClientValidate) {
        return MergeFrom((CMsgGCCStrike15_v2_Server2GCClientValidate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_Server2GCClientValidate other) {
      if (other == global::CMsgGCCStrike15_v2_Server2GCClientValidate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2Server2GCClientValidateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2Server2GCClientValidateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_Server2GCClientValidate() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure : pb::GeneratedMessage<CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.Builder> {
  private CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() { }
  private static readonly CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure defaultInstance = new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure().MakeReadOnly();
  private static readonly string[] _cMsgGCCStrike15V2Server2GCPureServerValidationFailureFieldNames = new string[] { "accountid", "crc", "file", "hash", "len", "pack_file_id", "pack_number", "path" };
  private static readonly uint[] _cMsgGCCStrike15V2Server2GCPureServerValidationFailureFieldTags = new uint[] { 8, 32, 26, 40, 48, 64, 56, 18 };
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.Builder> InternalFieldAccessors {
    get { return global::Cstrike15Gcmessages.internal__static_CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure__FieldAccessorTable; }
  }
  
  public const int AccountidFieldNumber = 1;
  private bool hasAccountid;
  private uint accountid_;
  public bool HasAccountid {
    get { return hasAccountid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Accountid {
    get { return accountid_; }
  }
  
  public const int PathFieldNumber = 2;
  private bool hasPath;
  private string path_ = "";
  public bool HasPath {
    get { return hasPath; }
  }
  public string Path {
    get { return path_; }
  }
  
  public const int FileFieldNumber = 3;
  private bool hasFile;
  private string file_ = "";
  public bool HasFile {
    get { return hasFile; }
  }
  public string File {
    get { return file_; }
  }
  
  public const int CrcFieldNumber = 4;
  private bool hasCrc;
  private uint crc_;
  public bool HasCrc {
    get { return hasCrc; }
  }
  [global::System.CLSCompliant(false)]
  public uint Crc {
    get { return crc_; }
  }
  
  public const int HashFieldNumber = 5;
  private bool hasHash;
  private int hash_;
  public bool HasHash {
    get { return hasHash; }
  }
  public int Hash {
    get { return hash_; }
  }
  
  public const int LenFieldNumber = 6;
  private bool hasLen;
  private int len_;
  public bool HasLen {
    get { return hasLen; }
  }
  public int Len {
    get { return len_; }
  }
  
  public const int PackNumberFieldNumber = 7;
  private bool hasPackNumber;
  private int packNumber_;
  public bool HasPackNumber {
    get { return hasPackNumber; }
  }
  public int PackNumber {
    get { return packNumber_; }
  }
  
  public const int PackFileIdFieldNumber = 8;
  private bool hasPackFileId;
  private int packFileId_;
  public bool HasPackFileId {
    get { return hasPackFileId; }
  }
  public int PackFileId {
    get { return packFileId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGCCStrike15V2Server2GCPureServerValidationFailureFieldNames;
    if (hasAccountid) {
      output.WriteUInt32(1, field_names[0], Accountid);
    }
    if (hasPath) {
      output.WriteString(2, field_names[7], Path);
    }
    if (hasFile) {
      output.WriteString(3, field_names[2], File);
    }
    if (hasCrc) {
      output.WriteUInt32(4, field_names[1], Crc);
    }
    if (hasHash) {
      output.WriteInt32(5, field_names[3], Hash);
    }
    if (hasLen) {
      output.WriteInt32(6, field_names[4], Len);
    }
    if (hasPackNumber) {
      output.WriteInt32(7, field_names[6], PackNumber);
    }
    if (hasPackFileId) {
      output.WriteInt32(8, field_names[5], PackFileId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasAccountid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, Accountid);
      }
      if (hasPath) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Path);
      }
      if (hasFile) {
        size += pb::CodedOutputStream.ComputeStringSize(3, File);
      }
      if (hasCrc) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Crc);
      }
      if (hasHash) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, Hash);
      }
      if (hasLen) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, Len);
      }
      if (hasPackNumber) {
        size += pb::CodedOutputStream.ComputeInt32Size(7, PackNumber);
      }
      if (hasPackFileId) {
        size += pb::CodedOutputStream.ComputeInt32Size(8, PackFileId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure result;
    
    private CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure original = result;
        result = new CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.Descriptor; }
    }
    
    public override CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure DefaultInstanceForType {
      get { return global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.DefaultInstance; }
    }
    
    public override CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure) {
        return MergeFrom((CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure other) {
      if (other == global::CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasAccountid) {
        Accountid = other.Accountid;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasFile) {
        File = other.File;
      }
      if (other.HasCrc) {
        Crc = other.Crc;
      }
      if (other.HasHash) {
        Hash = other.Hash;
      }
      if (other.HasLen) {
        Len = other.Len;
      }
      if (other.HasPackNumber) {
        PackNumber = other.PackNumber;
      }
      if (other.HasPackFileId) {
        PackFileId = other.PackFileId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGCCStrike15V2Server2GCPureServerValidationFailureFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGCCStrike15V2Server2GCPureServerValidationFailureFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasAccountid = input.ReadUInt32(ref result.accountid_);
            break;
          }
          case 18: {
            result.hasPath = input.ReadString(ref result.path_);
            break;
          }
          case 26: {
            result.hasFile = input.ReadString(ref result.file_);
            break;
          }
          case 32: {
            result.hasCrc = input.ReadUInt32(ref result.crc_);
            break;
          }
          case 40: {
            result.hasHash = input.ReadInt32(ref result.hash_);
            break;
          }
          case 48: {
            result.hasLen = input.ReadInt32(ref result.len_);
            break;
          }
          case 56: {
            result.hasPackNumber = input.ReadInt32(ref result.packNumber_);
            break;
          }
          case 64: {
            result.hasPackFileId = input.ReadInt32(ref result.packFileId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasAccountid {
      get { return result.hasAccountid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Accountid {
      get { return result.Accountid; }
      set { SetAccountid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetAccountid(uint value) {
      PrepareBuilder();
      result.hasAccountid = true;
      result.accountid_ = value;
      return this;
    }
    public Builder ClearAccountid() {
      PrepareBuilder();
      result.hasAccountid = false;
      result.accountid_ = 0;
      return this;
    }
    
    public bool HasPath {
      get { return result.hasPath; }
    }
    public string Path {
      get { return result.Path; }
      set { SetPath(value); }
    }
    public Builder SetPath(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPath = true;
      result.path_ = value;
      return this;
    }
    public Builder ClearPath() {
      PrepareBuilder();
      result.hasPath = false;
      result.path_ = "";
      return this;
    }
    
    public bool HasFile {
      get { return result.hasFile; }
    }
    public string File {
      get { return result.File; }
      set { SetFile(value); }
    }
    public Builder SetFile(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFile = true;
      result.file_ = value;
      return this;
    }
    public Builder ClearFile() {
      PrepareBuilder();
      result.hasFile = false;
      result.file_ = "";
      return this;
    }
    
    public bool HasCrc {
      get { return result.hasCrc; }
    }
    [global::System.CLSCompliant(false)]
    public uint Crc {
      get { return result.Crc; }
      set { SetCrc(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCrc(uint value) {
      PrepareBuilder();
      result.hasCrc = true;
      result.crc_ = value;
      return this;
    }
    public Builder ClearCrc() {
      PrepareBuilder();
      result.hasCrc = false;
      result.crc_ = 0;
      return this;
    }
    
    public bool HasHash {
      get { return result.hasHash; }
    }
    public int Hash {
      get { return result.Hash; }
      set { SetHash(value); }
    }
    public Builder SetHash(int value) {
      PrepareBuilder();
      result.hasHash = true;
      result.hash_ = value;
      return this;
    }
    public Builder ClearHash() {
      PrepareBuilder();
      result.hasHash = false;
      result.hash_ = 0;
      return this;
    }
    
    public bool HasLen {
      get { return result.hasLen; }
    }
    public int Len {
      get { return result.Len; }
      set { SetLen(value); }
    }
    public Builder SetLen(int value) {
      PrepareBuilder();
      result.hasLen = true;
      result.len_ = value;
      return this;
    }
    public Builder ClearLen() {
      PrepareBuilder();
      result.hasLen = false;
      result.len_ = 0;
      return this;
    }
    
    public bool HasPackNumber {
      get { return result.hasPackNumber; }
    }
    public int PackNumber {
      get { return result.PackNumber; }
      set { SetPackNumber(value); }
    }
    public Builder SetPackNumber(int value) {
      PrepareBuilder();
      result.hasPackNumber = true;
      result.packNumber_ = value;
      return this;
    }
    public Builder ClearPackNumber() {
      PrepareBuilder();
      result.hasPackNumber = false;
      result.packNumber_ = 0;
      return this;
    }
    
    public bool HasPackFileId {
      get { return result.hasPackFileId; }
    }
    public int PackFileId {
      get { return result.PackFileId; }
      set { SetPackFileId(value); }
    }
    public Builder SetPackFileId(int value) {
      PrepareBuilder();
      result.hasPackFileId = true;
      result.packFileId_ = value;
      return this;
    }
    public Builder ClearPackFileId() {
      PrepareBuilder();
      result.hasPackFileId = false;
      result.packFileId_ = 0;
      return this;
    }
  }
  static CMsgGCCStrike15_v2_Server2GCPureServerValidationFailure() {
    object.ReferenceEquals(global::Cstrike15Gcmessages.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
