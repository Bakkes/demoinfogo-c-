// Generated by ProtoGen, Version=2.4.1.521, Culture=neutral, PublicKeyToken=55f7125234beb589.  DO NOT EDIT!
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.ProtocolBuffers;
using pbc = global::Google.ProtocolBuffers.Collections;
using pbd = global::Google.ProtocolBuffers.Descriptors;
using scg = global::System.Collections.Generic;
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public static partial class Htmlmessages {

  #region Extension registration
  public static void RegisterAllExtensions(pb::ExtensionRegistry registry) {
  }
  #endregion
  #region Static variables
  internal static pbd::MessageDescriptor internal__static_CMsgKeyUp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgKeyUp, global::CMsgKeyUp.Builder> internal__static_CMsgKeyUp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgKeyDown__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgKeyDown, global::CMsgKeyDown.Builder> internal__static_CMsgKeyDown__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgKeyChar__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgKeyChar, global::CMsgKeyChar.Builder> internal__static_CMsgKeyChar__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgMouseDown__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgMouseDown, global::CMsgMouseDown.Builder> internal__static_CMsgMouseDown__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgMouseUp__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgMouseUp, global::CMsgMouseUp.Builder> internal__static_CMsgMouseUp__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgMouseDblClick__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgMouseDblClick, global::CMsgMouseDblClick.Builder> internal__static_CMsgMouseDblClick__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgMouseWheel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgMouseWheel, global::CMsgMouseWheel.Builder> internal__static_CMsgMouseWheel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgMouseMove__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgMouseMove, global::CMsgMouseMove.Builder> internal__static_CMsgMouseMove__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgMouseLeave__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgMouseLeave, global::CMsgMouseLeave.Builder> internal__static_CMsgMouseLeave__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserCreate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserCreate, global::CMsgBrowserCreate.Builder> internal__static_CMsgBrowserCreate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserCreateResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserCreateResponse, global::CMsgBrowserCreateResponse.Builder> internal__static_CMsgBrowserCreateResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserRemove__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserRemove, global::CMsgBrowserRemove.Builder> internal__static_CMsgBrowserRemove__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserErrorStrings__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserErrorStrings, global::CMsgBrowserErrorStrings.Builder> internal__static_CMsgBrowserErrorStrings__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserSize__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserSize, global::CMsgBrowserSize.Builder> internal__static_CMsgBrowserSize__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserPosition__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserPosition, global::CMsgBrowserPosition.Builder> internal__static_CMsgBrowserPosition__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgPostURL__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgPostURL, global::CMsgPostURL.Builder> internal__static_CMsgPostURL__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgAddHeader__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgAddHeader, global::CMsgAddHeader.Builder> internal__static_CMsgAddHeader__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgStopLoad__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgStopLoad, global::CMsgStopLoad.Builder> internal__static_CMsgStopLoad__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgReload__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgReload, global::CMsgReload.Builder> internal__static_CMsgReload__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGoForward__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGoForward, global::CMsgGoForward.Builder> internal__static_CMsgGoForward__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGoBack__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGoBack, global::CMsgGoBack.Builder> internal__static_CMsgGoBack__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgClearHistory__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgClearHistory, global::CMsgClearHistory.Builder> internal__static_CMsgClearHistory__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgCopy__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgCopy, global::CMsgCopy.Builder> internal__static_CMsgCopy__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgPaste__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgPaste, global::CMsgPaste.Builder> internal__static_CMsgPaste__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgExecuteJavaScript__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgExecuteJavaScript, global::CMsgExecuteJavaScript.Builder> internal__static_CMsgExecuteJavaScript__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetFocus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetFocus, global::CMsgSetFocus.Builder> internal__static_CMsgSetFocus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgHorizontalScrollBarSize__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgHorizontalScrollBarSize, global::CMsgHorizontalScrollBarSize.Builder> internal__static_CMsgHorizontalScrollBarSize__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgHorizontalScrollBarSizeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgHorizontalScrollBarSizeResponse, global::CMsgHorizontalScrollBarSizeResponse.Builder> internal__static_CMsgHorizontalScrollBarSizeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgVerticalScrollBarSize__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgVerticalScrollBarSize, global::CMsgVerticalScrollBarSize.Builder> internal__static_CMsgVerticalScrollBarSize__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgVerticalScrollBarSizeResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgVerticalScrollBarSizeResponse, global::CMsgVerticalScrollBarSizeResponse.Builder> internal__static_CMsgVerticalScrollBarSizeResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFind, global::CMsgFind.Builder> internal__static_CMsgFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgStopFind__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgStopFind, global::CMsgStopFind.Builder> internal__static_CMsgStopFind__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetHorizontalScroll__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetHorizontalScroll, global::CMsgSetHorizontalScroll.Builder> internal__static_CMsgSetHorizontalScroll__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetVerticalScroll__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetVerticalScroll, global::CMsgSetVerticalScroll.Builder> internal__static_CMsgSetVerticalScroll__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetZoomLevel__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetZoomLevel, global::CMsgSetZoomLevel.Builder> internal__static_CMsgSetZoomLevel__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgViewSource__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgViewSource, global::CMsgViewSource.Builder> internal__static_CMsgViewSource__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgBrowserReady__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserReady, global::CMsgBrowserReady.Builder> internal__static_CMsgBrowserReady__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgURLChanged__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgURLChanged, global::CMsgURLChanged.Builder> internal__static_CMsgURLChanged__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CHTMLHeader__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CHTMLHeader, global::CHTMLHeader.Builder> internal__static_CHTMLHeader__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CHTMLPageSecurityInfo__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CHTMLPageSecurityInfo, global::CHTMLPageSecurityInfo.Builder> internal__static_CHTMLPageSecurityInfo__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFinishedRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFinishedRequest, global::CMsgFinishedRequest.Builder> internal__static_CMsgFinishedRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgStartRequest__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgStartRequest, global::CMsgStartRequest.Builder> internal__static_CMsgStartRequest__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgStartRequestResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgStartRequestResponse, global::CMsgStartRequestResponse.Builder> internal__static_CMsgStartRequestResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgShowPopup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgShowPopup, global::CMsgShowPopup.Builder> internal__static_CMsgShowPopup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgHidePopup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgHidePopup, global::CMsgHidePopup.Builder> internal__static_CMsgHidePopup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSizePopup__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSizePopup, global::CMsgSizePopup.Builder> internal__static_CMsgSizePopup__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgOpenNewTab__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgOpenNewTab, global::CMsgOpenNewTab.Builder> internal__static_CMsgOpenNewTab__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgOpenNewTabResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgOpenNewTabResponse, global::CMsgOpenNewTabResponse.Builder> internal__static_CMsgOpenNewTabResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgPopupHTMLWindow__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgPopupHTMLWindow, global::CMsgPopupHTMLWindow.Builder> internal__static_CMsgPopupHTMLWindow__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgPopupHTMLWindowResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgPopupHTMLWindowResponse, global::CMsgPopupHTMLWindowResponse.Builder> internal__static_CMsgPopupHTMLWindowResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetHTMLTitle__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetHTMLTitle, global::CMsgSetHTMLTitle.Builder> internal__static_CMsgSetHTMLTitle__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgLoadingResource__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgLoadingResource, global::CMsgLoadingResource.Builder> internal__static_CMsgLoadingResource__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgStatusText__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgStatusText, global::CMsgStatusText.Builder> internal__static_CMsgStatusText__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetCursor__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetCursor, global::CMsgSetCursor.Builder> internal__static_CMsgSetCursor__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFileLoadDialog__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFileLoadDialog, global::CMsgFileLoadDialog.Builder> internal__static_CMsgFileLoadDialog__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFileLoadDialogResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFileLoadDialogResponse, global::CMsgFileLoadDialogResponse.Builder> internal__static_CMsgFileLoadDialogResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgShowToolTip__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgShowToolTip, global::CMsgShowToolTip.Builder> internal__static_CMsgShowToolTip__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgUpdateToolTip__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgUpdateToolTip, global::CMsgUpdateToolTip.Builder> internal__static_CMsgUpdateToolTip__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgHideToolTip__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgHideToolTip, global::CMsgHideToolTip.Builder> internal__static_CMsgHideToolTip__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSearchResults__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSearchResults, global::CMsgSearchResults.Builder> internal__static_CMsgSearchResults__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgClose__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgClose, global::CMsgClose.Builder> internal__static_CMsgClose__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgNeedsPaint__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgNeedsPaint, global::CMsgNeedsPaint.Builder> internal__static_CMsgNeedsPaint__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgNeedsPaintResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgNeedsPaintResponse, global::CMsgNeedsPaintResponse.Builder> internal__static_CMsgNeedsPaintResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGetZoom__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGetZoom, global::CMsgGetZoom.Builder> internal__static_CMsgGetZoom__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGetZoomResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGetZoomResponse, global::CMsgGetZoomResponse.Builder> internal__static_CMsgGetZoomResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgLinkAtPosition__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgLinkAtPosition, global::CMsgLinkAtPosition.Builder> internal__static_CMsgLinkAtPosition__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgLinkAtPositionResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgLinkAtPositionResponse, global::CMsgLinkAtPositionResponse.Builder> internal__static_CMsgLinkAtPositionResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgZoomToElementAtPosition__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgZoomToElementAtPosition, global::CMsgZoomToElementAtPosition.Builder> internal__static_CMsgZoomToElementAtPosition__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgZoomToElementAtPositionResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgZoomToElementAtPositionResponse, global::CMsgZoomToElementAtPositionResponse.Builder> internal__static_CMsgZoomToElementAtPositionResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgScalePageToValue__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgScalePageToValue, global::CMsgScalePageToValue.Builder> internal__static_CMsgScalePageToValue__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgScalePageToValueResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgScalePageToValueResponse, global::CMsgScalePageToValueResponse.Builder> internal__static_CMsgScalePageToValueResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSavePageToJPEG__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSavePageToJPEG, global::CMsgSavePageToJPEG.Builder> internal__static_CMsgSavePageToJPEG__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSavePageToJPEGResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSavePageToJPEGResponse, global::CMsgSavePageToJPEGResponse.Builder> internal__static_CMsgSavePageToJPEGResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgJSAlert__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgJSAlert, global::CMsgJSAlert.Builder> internal__static_CMsgJSAlert__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgJSConfirm__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgJSConfirm, global::CMsgJSConfirm.Builder> internal__static_CMsgJSConfirm__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgJSDialogResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgJSDialogResponse, global::CMsgJSDialogResponse.Builder> internal__static_CMsgJSDialogResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgCanGoBackAndForward__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgCanGoBackAndForward, global::CMsgCanGoBackAndForward.Builder> internal__static_CMsgCanGoBackAndForward__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgOpenSteamURL__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgOpenSteamURL, global::CMsgOpenSteamURL.Builder> internal__static_CMsgOpenSteamURL__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetCookie__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetCookie, global::CMsgSetCookie.Builder> internal__static_CMsgSetCookie__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgSetTargetFrameRate__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgSetTargetFrameRate, global::CMsgSetTargetFrameRate.Builder> internal__static_CMsgSetTargetFrameRate__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFullRepaint__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFullRepaint, global::CMsgFullRepaint.Builder> internal__static_CMsgFullRepaint__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgRequestFullScreen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgRequestFullScreen, global::CMsgRequestFullScreen.Builder> internal__static_CMsgRequestFullScreen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgRequestFullScreenResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgRequestFullScreenResponse, global::CMsgRequestFullScreenResponse.Builder> internal__static_CMsgRequestFullScreenResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgExitFullScreen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgExitFullScreen, global::CMsgExitFullScreen.Builder> internal__static_CMsgExitFullScreen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGetCookiesForURL__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGetCookiesForURL, global::CMsgGetCookiesForURL.Builder> internal__static_CMsgGetCookiesForURL__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CCookie__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CCookie, global::CCookie.Builder> internal__static_CCookie__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgGetCookiesForURLResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgGetCookiesForURLResponse, global::CMsgGetCookiesForURLResponse.Builder> internal__static_CMsgGetCookiesForURLResponse__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgNodeHasFocus__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgNodeHasFocus, global::CMsgNodeHasFocus.Builder> internal__static_CMsgNodeHasFocus__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgZoomToFocusedElement__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgZoomToFocusedElement, global::CMsgZoomToFocusedElement.Builder> internal__static_CMsgZoomToFocusedElement__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgCloseFullScreenFlashIfOpen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgCloseFullScreenFlashIfOpen, global::CMsgCloseFullScreenFlashIfOpen.Builder> internal__static_CMsgCloseFullScreenFlashIfOpen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgPauseFullScreenFlashMovieIfOpen__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgPauseFullScreenFlashMovieIfOpen, global::CMsgPauseFullScreenFlashMovieIfOpen.Builder> internal__static_CMsgPauseFullScreenFlashMovieIfOpen__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFocusedNodeText__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFocusedNodeText, global::CMsgFocusedNodeText.Builder> internal__static_CMsgFocusedNodeText__FieldAccessorTable;
  internal static pbd::MessageDescriptor internal__static_CMsgFocusedNodeTextResponse__Descriptor;
  internal static pb::FieldAccess.FieldAccessorTable<global::CMsgFocusedNodeTextResponse, global::CMsgFocusedNodeTextResponse.Builder> internal__static_CMsgFocusedNodeTextResponse__FieldAccessorTable;
  #endregion
  #region Descriptor
  public static pbd::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbd::FileDescriptor descriptor;
  
  static Htmlmessages() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        "ChJodG1sbWVzc2FnZXMucHJvdG8iRwoJQ01zZ0tleVVwEhYKDmJyb3dzZXJf" + 
        "aGFuZGxlGAEgASgNEg8KB2tleUNvZGUYAiABKA0SEQoJbW9kaWZpZXJzGAMg" + 
        "ASgNIkkKC0NNc2dLZXlEb3duEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg8K" + 
        "B2tleUNvZGUYAiABKA0SEQoJbW9kaWZpZXJzGAMgASgNIjYKC0NNc2dLZXlD" + 
        "aGFyEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg8KB3VuaWNoYXIYAiABKA0i" + 
        "PQoNQ01zZ01vdXNlRG93bhIWCg5icm93c2VyX2hhbmRsZRgBIAEoDRIUCgxt" + 
        "b3VzZV9idXR0b24YAiABKA0iOwoLQ01zZ01vdXNlVXASFgoOYnJvd3Nlcl9o" + 
        "YW5kbGUYASABKA0SFAoMbW91c2VfYnV0dG9uGAIgASgNIkEKEUNNc2dNb3Vz" + 
        "ZURibENsaWNrEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEhQKDG1vdXNlX2J1" + 
        "dHRvbhgCIAEoDSI3Cg5DTXNnTW91c2VXaGVlbBIWCg5icm93c2VyX2hhbmRs" + 
        "ZRgBIAEoDRINCgVkZWx0YRgCIAEoBSI9Cg1DTXNnTW91c2VNb3ZlEhYKDmJy" + 
        "b3dzZXJfaGFuZGxlGAEgASgNEgkKAXgYAiABKAUSCQoBeRgDIAEoBSIoCg5D" + 
        "TXNnTW91c2VMZWF2ZRIWCg5icm93c2VyX2hhbmRsZRgBIAEoDSKEAQoRQ01z" + 
        "Z0Jyb3dzZXJDcmVhdGUSEgoKcmVxdWVzdF9pZBgBIAEoDRIUCgVwb3B1cBgC" + 
        "IAEoCDoFZmFsc2USEQoJdXNlcmFnZW50GAMgASgJEiAKEXdlYmtpdF9zY3Jv" + 
        "bGxiYXJzGAQgASgIOgVmYWxzZRIQCgh1c2VyX2NzcxgFIAEoCSJHChlDTXNn" + 
        "QnJvd3NlckNyZWF0ZVJlc3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgN" + 
        "EhIKCnJlcXVlc3RfaWQYAiABKA0iKwoRQ01zZ0Jyb3dzZXJSZW1vdmUSFgoO" + 
        "YnJvd3Nlcl9oYW5kbGUYASABKA0iuQEKF0NNc2dCcm93c2VyRXJyb3JTdHJp" + 
        "bmdzEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg0KBXRpdGxlGAIgASgJEg4K" + 
        "BmhlYWRlchgDIAEoCRISCgpjYWNoZV9taXNzGAQgASgJEg8KB2JhZF91cmwY" + 
        "BSABKAkSGgoSY29ubmVjdGlvbl9wcm9ibGVtGAYgASgJEhUKDXByb3h5X3By" + 
        "b2JsZW0YByABKAkSDwoHdW5rbm93bhgIIAEoCSJICg9DTXNnQnJvd3NlclNp" + 
        "emUSFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDQoFd2lkdGgYAiABKA0SDgoG" + 
        "aGVpZ2h0GAMgASgNIkMKE0NNc2dCcm93c2VyUG9zaXRpb24SFgoOYnJvd3Nl" + 
        "cl9oYW5kbGUYASABKA0SCQoBeBgCIAEoDRIJCgF5GAMgASgNIlQKC0NNc2dQ" + 
        "b3N0VVJMEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgsKA3VybBgCIAEoCRIM" + 
        "CgRwb3N0GAMgASgJEhIKCnBhZ2VzZXJpYWwYBCABKA0iQwoNQ01zZ0FkZEhl" + 
        "YWRlchIWCg5icm93c2VyX2hhbmRsZRgBIAEoDRILCgNrZXkYAiABKAkSDQoF" + 
        "dmFsdWUYAyABKAkiJgoMQ01zZ1N0b3BMb2FkEhYKDmJyb3dzZXJfaGFuZGxl" + 
        "GAEgASgNIiQKCkNNc2dSZWxvYWQSFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0i" + 
        "JwoNQ01zZ0dvRm9yd2FyZBIWCg5icm93c2VyX2hhbmRsZRgBIAEoDSIkCgpD" + 
        "TXNnR29CYWNrEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNIioKEENNc2dDbGVh" + 
        "ckhpc3RvcnkSFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0iIgoIQ01zZ0NvcHkS" + 
        "FgoOYnJvd3Nlcl9oYW5kbGUYASABKA0iIwoJQ01zZ1Bhc3RlEhYKDmJyb3dz" + 
        "ZXJfaGFuZGxlGAEgASgNIj8KFUNNc2dFeGVjdXRlSmF2YVNjcmlwdBIWCg5i" + 
        "cm93c2VyX2hhbmRsZRgBIAEoDRIOCgZzY3JpcHQYAiABKAkiNQoMQ01zZ1Nl" + 
        "dEZvY3VzEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg0KBWZvY3VzGAIgASgI" + 
        "IjUKG0NNc2dIb3Jpem9udGFsU2Nyb2xsQmFyU2l6ZRIWCg5icm93c2VyX2hh" + 
        "bmRsZRgBIAEoDSKyAQojQ01zZ0hvcml6b250YWxTY3JvbGxCYXJTaXplUmVz" + 
        "cG9uc2USFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SCQoBeBgCIAEoDRIJCgF5" + 
        "GAMgASgNEgwKBHdpZGUYBCABKA0SDAoEdGFsbBgFIAEoDRISCgpzY3JvbGxf" + 
        "bWF4GAYgASgNEg4KBnNjcm9sbBgHIAEoDRIMCgR6b29tGAggASgCEg8KB3Zp" + 
        "c2libGUYCSABKAgiMwoZQ01zZ1ZlcnRpY2FsU2Nyb2xsQmFyU2l6ZRIWCg5i" + 
        "cm93c2VyX2hhbmRsZRgBIAEoDSKwAQohQ01zZ1ZlcnRpY2FsU2Nyb2xsQmFy" + 
        "U2l6ZVJlc3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgkKAXgYAiAB" + 
        "KA0SCQoBeRgDIAEoDRIMCgR3aWRlGAQgASgNEgwKBHRhbGwYBSABKA0SEgoK" + 
        "c2Nyb2xsX21heBgGIAEoDRIOCgZzY3JvbGwYByABKA0SDAoEem9vbRgIIAEo" + 
        "AhIPCgd2aXNpYmxlGAkgASgIIlgKCENNc2dGaW5kEhYKDmJyb3dzZXJfaGFu" + 
        "ZGxlGAEgASgNEgwKBGZpbmQYAiABKAkSDgoGaW5maW5kGAMgASgIEhYKB3Jl" + 
        "dmVyc2UYBCABKAg6BWZhbHNlIiYKDENNc2dTdG9wRmluZBIWCg5icm93c2Vy" + 
        "X2hhbmRsZRgBIAEoDSJBChdDTXNnU2V0SG9yaXpvbnRhbFNjcm9sbBIWCg5i" + 
        "cm93c2VyX2hhbmRsZRgBIAEoDRIOCgZzY3JvbGwYAiABKA0iPwoVQ01zZ1Nl" + 
        "dFZlcnRpY2FsU2Nyb2xsEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg4KBnNj" + 
        "cm9sbBgCIAEoDSI4ChBDTXNnU2V0Wm9vbUxldmVsEhYKDmJyb3dzZXJfaGFu" + 
        "ZGxlGAEgASgNEgwKBHpvb20YAiABKAIiKAoOQ01zZ1ZpZXdTb3VyY2USFgoO" + 
        "YnJvd3Nlcl9oYW5kbGUYASABKA0iKgoQQ01zZ0Jyb3dzZXJSZWFkeRIWCg5i" + 
        "cm93c2VyX2hhbmRsZRgBIAEoDSKHAQoOQ01zZ1VSTENoYW5nZWQSFgoOYnJv" + 
        "d3Nlcl9oYW5kbGUYASABKA0SCwoDdXJsGAIgASgJEhAKCHBvc3REYXRhGAMg" + 
        "ASgJEhMKC2JJc1JlZGlyZWN0GAQgASgIEhEKCXBhZ2V0aXRsZRgFIAEoCRIW" + 
        "Cg5iTmV3TmF2aWdhdGlvbhgGIAEoCCIpCgtDSFRNTEhlYWRlchILCgNrZXkY" + 
        "ASABKAkSDQoFdmFsdWUYAiABKAkivAEKFUNIVE1MUGFnZVNlY3VyaXR5SW5m" + 
        "bxIYCgliSXNTZWN1cmUYASABKAg6BWZhbHNlEhwKDWJIYXNDZXJ0RXJyb3IY" + 
        "AiABKAg6BWZhbHNlEhIKCmlzc3Vlck5hbWUYAyABKAkSEAoIY2VydE5hbWUY" + 
        "BCABKAkSFQoKY2VydEV4cGlyeRgFIAEoBToBMBIUCgluQ2VydEJpdHMYBiAB" + 
        "KAU6ATASGAoJYklzRVZDZXJ0GAcgASgIOgVmYWxzZSKbAQoTQ01zZ0Zpbmlz" + 
        "aGVkUmVxdWVzdBIWCg5icm93c2VyX2hhbmRsZRgBIAEoDRILCgN1cmwYAiAB" + 
        "KAkSEQoJcGFnZVRpdGxlGAMgASgJEi0KDXNlY3VyaXR5X2luZm8YBCABKAsy" + 
        "Fi5DSFRNTFBhZ2VTZWN1cml0eUluZm8SHQoHaGVhZGVycxgFIAMoCzIMLkNI" + 
        "VE1MSGVhZGVyIm4KEENNc2dTdGFydFJlcXVlc3QSFgoOYnJvd3Nlcl9oYW5k" + 
        "bGUYASABKA0SCwoDdXJsGAIgASgJEg4KBnRhcmdldBgDIAEoCRIQCghwb3N0" + 
        "RGF0YRgEIAEoCRITCgtiSXNSZWRpcmVjdBgFIAEoCCJCChhDTXNnU3RhcnRS" + 
        "ZXF1ZXN0UmVzcG9uc2USFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDgoGYkFs" + 
        "bG93GAIgASgIIicKDUNNc2dTaG93UG9wdXASFgoOYnJvd3Nlcl9oYW5kbGUY" + 
        "ASABKA0iJwoNQ01zZ0hpZGVQb3B1cBIWCg5icm93c2VyX2hhbmRsZRgBIAEo" + 
        "DSJZCg1DTXNnU2l6ZVBvcHVwEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgkK" + 
        "AXgYAiABKA0SCQoBeRgDIAEoDRIMCgR3aWRlGAQgASgNEgwKBHRhbGwYBSAB" + 
        "KA0iSgoOQ01zZ09wZW5OZXdUYWISFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0S" + 
        "CwoDdXJsGAIgASgJEhMKC2JGb3JlZ3JvdW5kGAMgASgIIkAKFkNNc2dPcGVu" + 
        "TmV3VGFiUmVzcG9uc2USFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDgoGYkFs" + 
        "bG93GAIgASgIImwKE0NNc2dQb3B1cEhUTUxXaW5kb3cSFgoOYnJvd3Nlcl9o" + 
        "YW5kbGUYASABKA0SCwoDdXJsGAIgASgJEgkKAXgYAyABKA0SCQoBeRgEIAEo" + 
        "DRIMCgR3aWRlGAUgASgNEgwKBHRhbGwYBiABKA0iRQobQ01zZ1BvcHVwSFRN" + 
        "TFdpbmRvd1Jlc3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg4KBmJB" + 
        "bGxvdxgCIAEoCCI5ChBDTXNnU2V0SFRNTFRpdGxlEhYKDmJyb3dzZXJfaGFu" + 
        "ZGxlGAEgASgNEg0KBXRpdGxlGAIgASgJIjoKE0NNc2dMb2FkaW5nUmVzb3Vy" + 
        "Y2USFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SCwoDdXJsGAIgASgJIjYKDkNN" + 
        "c2dTdGF0dXNUZXh0EhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgwKBHRleHQY" + 
        "AiABKAkijAEKDUNNc2dTZXRDdXJzb3ISFgoOYnJvd3Nlcl9oYW5kbGUYASAB" + 
        "KA0SDgoGY3Vyc29yGAIgASgNEhMKC2N1c3RvbV9kYXRhGAMgASgMEgwKBHdp" + 
        "ZGUYBCABKA0SDAoEdGFsbBgFIAEoDRIQCgh4aG90c3BvdBgGIAEoDRIQCgh5" + 
        "aG90c3BvdBgHIAEoDSJQChJDTXNnRmlsZUxvYWREaWFsb2cSFgoOYnJvd3Nl" + 
        "cl9oYW5kbGUYASABKA0SDQoFdGl0bGUYAiABKAkSEwoLaW5pdGlhbEZpbGUY" + 
        "AyABKAkiQwoaQ01zZ0ZpbGVMb2FkRGlhbG9nUmVzcG9uc2USFgoOYnJvd3Nl" + 
        "cl9oYW5kbGUYASABKA0SDQoFZmlsZXMYAiADKAkiNwoPQ01zZ1Nob3dUb29s" + 
        "VGlwEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgwKBHRleHQYAiABKAkiOQoR" + 
        "Q01zZ1VwZGF0ZVRvb2xUaXASFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDAoE" + 
        "dGV4dBgCIAEoCSIpCg9DTXNnSGlkZVRvb2xUaXASFgoOYnJvd3Nlcl9oYW5k" + 
        "bGUYASABKA0iUQoRQ01zZ1NlYXJjaFJlc3VsdHMSFgoOYnJvd3Nlcl9oYW5k" + 
        "bGUYASABKA0SEwoLYWN0aXZlTWF0Y2gYAiABKAUSDwoHcmVzdWx0cxgDIAEo" + 
        "BSIjCglDTXNnQ2xvc2USFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0iswIKDkNN" + 
        "c2dOZWVkc1BhaW50EhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgwKBHJnYmEY" + 
        "AiABKAQSDAoEd2lkZRgDIAEoDRIMCgR0YWxsGAQgASgNEhEKCXRleHR1cmVp" + 
        "ZBgFIAEoDRIPCgd1cGRhdGV4GAYgASgNEg8KB3VwZGF0ZXkYByABKA0SEgoK" + 
        "dXBkYXRld2lkZRgIIAEoDRISCgp1cGRhdGV0YWxsGAkgASgNEg8KB3Njcm9s" + 
        "bHgYCiABKA0SDwoHc2Nyb2xseRgLIAEoDRIYCg1jb21ib2JveF9yZ2JhGAwg" + 
        "ASgEOgEwEhgKDWNvbWJvYm94X3dpZGUYDSABKA06ATASGAoNY29tYm9ib3hf" + 
        "dGFsbBgOIAEoDToBMBISCgpwYWdlc2VyaWFsGA8gASgNIkMKFkNNc2dOZWVk" + 
        "c1BhaW50UmVzcG9uc2USFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SEQoJdGV4" + 
        "dHVyZWlkGAIgASgNIiUKC0NNc2dHZXRab29tEhYKDmJyb3dzZXJfaGFuZGxl" + 
        "GAEgASgNIjsKE0NNc2dHZXRab29tUmVzcG9uc2USFgoOYnJvd3Nlcl9oYW5k" + 
        "bGUYASABKA0SDAoEem9vbRgCIAEoAiJCChJDTXNnTGlua0F0UG9zaXRpb24S" + 
        "FgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SCQoBeBgCIAEoDRIJCgF5GAMgASgN" + 
        "InoKGkNNc2dMaW5rQXRQb3NpdGlvblJlc3BvbnNlEhYKDmJyb3dzZXJfaGFu" + 
        "ZGxlGAEgASgNEgkKAXgYAiABKA0SCQoBeRgDIAEoDRILCgN1cmwYBCABKAkS" + 
        "EQoJYmxpdmVsaW5rGAUgASgIEg4KBmJpbnB1dBgGIAEoCCJLChtDTXNnWm9v" + 
        "bVRvRWxlbWVudEF0UG9zaXRpb24SFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0S" + 
        "CQoBeBgCIAEoDRIJCgF5GAMgASgNIu0BCiNDTXNnWm9vbVRvRWxlbWVudEF0" + 
        "UG9zaXRpb25SZXNwb25zZRIWCg5icm93c2VyX2hhbmRsZRgBIAEoDRIRCglp" + 
        "bml0aWFsX3gYAiABKBESEQoJaW5pdGlhbF95GAMgASgREhUKDWluaXRpYWxf" + 
        "d2lkdGgYBCABKA0SFgoOaW5pdGlhbF9oZWlnaHQYBSABKA0SDwoHZmluYWxf" + 
        "eBgGIAEoERIPCgdmaW5hbF95GAcgASgREhMKC2ZpbmFsX3dpZHRoGAggASgN" + 
        "EhQKDGZpbmFsX2hlaWdodBgJIAEoDRIMCgR6b29tGAogASgCIlMKFENNc2dT" + 
        "Y2FsZVBhZ2VUb1ZhbHVlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEg0KBXNj" + 
        "YWxlGAIgASgCEgkKAXgYAyABKAISCQoBeRgEIAEoAiJvChxDTXNnU2NhbGVQ" + 
        "YWdlVG9WYWx1ZVJlc3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgwK" + 
        "BHpvb20YAiABKAISEwoLd2lkdGhfZGVsdGEYAyABKAUSFAoMaGVpZ2h0X2Rl" + 
        "bHRhGAQgASgFImoKEkNNc2dTYXZlUGFnZVRvSlBFRxIWCg5icm93c2VyX2hh" + 
        "bmRsZRgBIAEoDRILCgN1cmwYAiABKAkSEAoIZmlsZW5hbWUYAyABKAkSDQoF" + 
        "d2lkdGgYBCABKA0SDgoGaGVpZ2h0GAUgASgNIlMKGkNNc2dTYXZlUGFnZVRv" + 
        "SlBFR1Jlc3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgsKA3VybBgC" + 
        "IAEoCRIQCghmaWxlbmFtZRgDIAEoCSI2CgtDTXNnSlNBbGVydBIWCg5icm93" + 
        "c2VyX2hhbmRsZRgBIAEoDRIPCgdtZXNzYWdlGAIgASgJIjgKDUNNc2dKU0Nv" + 
        "bmZpcm0SFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDwoHbWVzc2FnZRgCIAEo" + 
        "CSI+ChRDTXNnSlNEaWFsb2dSZXNwb25zZRIWCg5icm93c2VyX2hhbmRsZRgB" + 
        "IAEoDRIOCgZyZXN1bHQYAiABKAgiVgoXQ01zZ0NhbkdvQmFja0FuZEZvcndh" + 
        "cmQSFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDwoHYmdvYmFjaxgCIAEoCBIS" + 
        "CgpiZ29mb3J3YXJkGAMgASgIIjcKEENNc2dPcGVuU3RlYW1VUkwSFgoOYnJv" + 
        "d3Nlcl9oYW5kbGUYASABKA0SCwoDdXJsGAIgASgJIlgKDUNNc2dTZXRDb29r" + 
        "aWUSCwoDa2V5GAEgASgJEg0KBXZhbHVlGAIgASgJEgwKBHBhdGgYAyABKAkS" + 
        "DAoEaG9zdBgEIAEoCRIPCgdleHBpcmVzGAUgASgNIjIKFkNNc2dTZXRUYXJn" + 
        "ZXRGcmFtZVJhdGUSGAoQblRhcmdldEZyYW1lUmF0ZRgBIAEoDSIpCg9DTXNn" + 
        "RnVsbFJlcGFpbnQSFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0iLwoVQ01zZ1Jl" + 
        "cXVlc3RGdWxsU2NyZWVuEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNIkcKHUNN" + 
        "c2dSZXF1ZXN0RnVsbFNjcmVlblJlc3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxl" + 
        "GAEgASgNEg4KBmJhbGxvdxgCIAEoCCIsChJDTXNnRXhpdEZ1bGxTY3JlZW4S" + 
        "FgoOYnJvd3Nlcl9oYW5kbGUYASABKA0iOwoUQ01zZ0dldENvb2tpZXNGb3JV" + 
        "UkwSFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SCwoDdXJsGAIgASgJIkQKB0ND" + 
        "b29raWUSDAoEbmFtZRgBIAEoCRINCgV2YWx1ZRgCIAEoCRIOCgZkb21haW4Y" + 
        "AyABKAkSDAoEcGF0aBgEIAEoCSJeChxDTXNnR2V0Q29va2llc0ZvclVSTFJl" + 
        "c3BvbnNlEhYKDmJyb3dzZXJfaGFuZGxlGAEgASgNEgsKA3VybBgCIAEoCRIZ" + 
        "Cgdjb29raWVzGAMgAygLMgguQ0Nvb2tpZSKqAQoQQ01zZ05vZGVIYXNGb2N1" + 
        "cxIWCg5icm93c2VyX2hhbmRsZRgBIAEoDRIOCgZiSW5wdXQYAiABKAgSDAoE" + 
        "bmFtZRgDIAEoCRIWCg5lbGVtZW50dGFnbmFtZRgEIAEoCRIYChBzZWFyY2hi" + 
        "dXR0b250ZXh0GAUgASgJEhoKEmJIYXNNdWx0aXBsZUlucHV0cxgGIAEoCBIS" + 
        "CgppbnB1dF90eXBlGAcgASgJIl8KGENNc2dab29tVG9Gb2N1c2VkRWxlbWVu" + 
        "dBIWCg5icm93c2VyX2hhbmRsZRgBIAEoDRIVCgpsZWZ0b2Zmc2V0GAIgASgN" + 
        "OgEwEhQKCXRvcG9mZnNldBgDIAEoDToBMCI4Ch5DTXNnQ2xvc2VGdWxsU2Ny" + 
        "ZWVuRmxhc2hJZk9wZW4SFgoOYnJvd3Nlcl9oYW5kbGUYASABKA0iPQojQ01z" + 
        "Z1BhdXNlRnVsbFNjcmVlbkZsYXNoTW92aWVJZk9wZW4SFgoOYnJvd3Nlcl9o" + 
        "YW5kbGUYASABKA0iLQoTQ01zZ0ZvY3VzZWROb2RlVGV4dBIWCg5icm93c2Vy" + 
        "X2hhbmRsZRgBIAEoDSJEChtDTXNnRm9jdXNlZE5vZGVUZXh0UmVzcG9uc2US" + 
        "FgoOYnJvd3Nlcl9oYW5kbGUYASABKA0SDQoFdmFsdWUYAiABKAk=");
    pbd::FileDescriptor.InternalDescriptorAssigner assigner = delegate(pbd::FileDescriptor root) {
      descriptor = root;
      internal__static_CMsgKeyUp__Descriptor = Descriptor.MessageTypes[0];
      internal__static_CMsgKeyUp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgKeyUp, global::CMsgKeyUp.Builder>(internal__static_CMsgKeyUp__Descriptor,
              new string[] { "BrowserHandle", "KeyCode", "Modifiers", });
      internal__static_CMsgKeyDown__Descriptor = Descriptor.MessageTypes[1];
      internal__static_CMsgKeyDown__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgKeyDown, global::CMsgKeyDown.Builder>(internal__static_CMsgKeyDown__Descriptor,
              new string[] { "BrowserHandle", "KeyCode", "Modifiers", });
      internal__static_CMsgKeyChar__Descriptor = Descriptor.MessageTypes[2];
      internal__static_CMsgKeyChar__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgKeyChar, global::CMsgKeyChar.Builder>(internal__static_CMsgKeyChar__Descriptor,
              new string[] { "BrowserHandle", "Unichar", });
      internal__static_CMsgMouseDown__Descriptor = Descriptor.MessageTypes[3];
      internal__static_CMsgMouseDown__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgMouseDown, global::CMsgMouseDown.Builder>(internal__static_CMsgMouseDown__Descriptor,
              new string[] { "BrowserHandle", "MouseButton", });
      internal__static_CMsgMouseUp__Descriptor = Descriptor.MessageTypes[4];
      internal__static_CMsgMouseUp__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgMouseUp, global::CMsgMouseUp.Builder>(internal__static_CMsgMouseUp__Descriptor,
              new string[] { "BrowserHandle", "MouseButton", });
      internal__static_CMsgMouseDblClick__Descriptor = Descriptor.MessageTypes[5];
      internal__static_CMsgMouseDblClick__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgMouseDblClick, global::CMsgMouseDblClick.Builder>(internal__static_CMsgMouseDblClick__Descriptor,
              new string[] { "BrowserHandle", "MouseButton", });
      internal__static_CMsgMouseWheel__Descriptor = Descriptor.MessageTypes[6];
      internal__static_CMsgMouseWheel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgMouseWheel, global::CMsgMouseWheel.Builder>(internal__static_CMsgMouseWheel__Descriptor,
              new string[] { "BrowserHandle", "Delta", });
      internal__static_CMsgMouseMove__Descriptor = Descriptor.MessageTypes[7];
      internal__static_CMsgMouseMove__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgMouseMove, global::CMsgMouseMove.Builder>(internal__static_CMsgMouseMove__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", });
      internal__static_CMsgMouseLeave__Descriptor = Descriptor.MessageTypes[8];
      internal__static_CMsgMouseLeave__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgMouseLeave, global::CMsgMouseLeave.Builder>(internal__static_CMsgMouseLeave__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgBrowserCreate__Descriptor = Descriptor.MessageTypes[9];
      internal__static_CMsgBrowserCreate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserCreate, global::CMsgBrowserCreate.Builder>(internal__static_CMsgBrowserCreate__Descriptor,
              new string[] { "RequestId", "Popup", "Useragent", "WebkitScrollbars", "UserCss", });
      internal__static_CMsgBrowserCreateResponse__Descriptor = Descriptor.MessageTypes[10];
      internal__static_CMsgBrowserCreateResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserCreateResponse, global::CMsgBrowserCreateResponse.Builder>(internal__static_CMsgBrowserCreateResponse__Descriptor,
              new string[] { "BrowserHandle", "RequestId", });
      internal__static_CMsgBrowserRemove__Descriptor = Descriptor.MessageTypes[11];
      internal__static_CMsgBrowserRemove__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserRemove, global::CMsgBrowserRemove.Builder>(internal__static_CMsgBrowserRemove__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgBrowserErrorStrings__Descriptor = Descriptor.MessageTypes[12];
      internal__static_CMsgBrowserErrorStrings__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserErrorStrings, global::CMsgBrowserErrorStrings.Builder>(internal__static_CMsgBrowserErrorStrings__Descriptor,
              new string[] { "BrowserHandle", "Title", "Header", "CacheMiss", "BadUrl", "ConnectionProblem", "ProxyProblem", "Unknown", });
      internal__static_CMsgBrowserSize__Descriptor = Descriptor.MessageTypes[13];
      internal__static_CMsgBrowserSize__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserSize, global::CMsgBrowserSize.Builder>(internal__static_CMsgBrowserSize__Descriptor,
              new string[] { "BrowserHandle", "Width", "Height", });
      internal__static_CMsgBrowserPosition__Descriptor = Descriptor.MessageTypes[14];
      internal__static_CMsgBrowserPosition__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserPosition, global::CMsgBrowserPosition.Builder>(internal__static_CMsgBrowserPosition__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", });
      internal__static_CMsgPostURL__Descriptor = Descriptor.MessageTypes[15];
      internal__static_CMsgPostURL__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgPostURL, global::CMsgPostURL.Builder>(internal__static_CMsgPostURL__Descriptor,
              new string[] { "BrowserHandle", "Url", "Post", "Pageserial", });
      internal__static_CMsgAddHeader__Descriptor = Descriptor.MessageTypes[16];
      internal__static_CMsgAddHeader__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgAddHeader, global::CMsgAddHeader.Builder>(internal__static_CMsgAddHeader__Descriptor,
              new string[] { "BrowserHandle", "Key", "Value", });
      internal__static_CMsgStopLoad__Descriptor = Descriptor.MessageTypes[17];
      internal__static_CMsgStopLoad__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgStopLoad, global::CMsgStopLoad.Builder>(internal__static_CMsgStopLoad__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgReload__Descriptor = Descriptor.MessageTypes[18];
      internal__static_CMsgReload__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgReload, global::CMsgReload.Builder>(internal__static_CMsgReload__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgGoForward__Descriptor = Descriptor.MessageTypes[19];
      internal__static_CMsgGoForward__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGoForward, global::CMsgGoForward.Builder>(internal__static_CMsgGoForward__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgGoBack__Descriptor = Descriptor.MessageTypes[20];
      internal__static_CMsgGoBack__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGoBack, global::CMsgGoBack.Builder>(internal__static_CMsgGoBack__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgClearHistory__Descriptor = Descriptor.MessageTypes[21];
      internal__static_CMsgClearHistory__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgClearHistory, global::CMsgClearHistory.Builder>(internal__static_CMsgClearHistory__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgCopy__Descriptor = Descriptor.MessageTypes[22];
      internal__static_CMsgCopy__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgCopy, global::CMsgCopy.Builder>(internal__static_CMsgCopy__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgPaste__Descriptor = Descriptor.MessageTypes[23];
      internal__static_CMsgPaste__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgPaste, global::CMsgPaste.Builder>(internal__static_CMsgPaste__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgExecuteJavaScript__Descriptor = Descriptor.MessageTypes[24];
      internal__static_CMsgExecuteJavaScript__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgExecuteJavaScript, global::CMsgExecuteJavaScript.Builder>(internal__static_CMsgExecuteJavaScript__Descriptor,
              new string[] { "BrowserHandle", "Script", });
      internal__static_CMsgSetFocus__Descriptor = Descriptor.MessageTypes[25];
      internal__static_CMsgSetFocus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetFocus, global::CMsgSetFocus.Builder>(internal__static_CMsgSetFocus__Descriptor,
              new string[] { "BrowserHandle", "Focus", });
      internal__static_CMsgHorizontalScrollBarSize__Descriptor = Descriptor.MessageTypes[26];
      internal__static_CMsgHorizontalScrollBarSize__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgHorizontalScrollBarSize, global::CMsgHorizontalScrollBarSize.Builder>(internal__static_CMsgHorizontalScrollBarSize__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgHorizontalScrollBarSizeResponse__Descriptor = Descriptor.MessageTypes[27];
      internal__static_CMsgHorizontalScrollBarSizeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgHorizontalScrollBarSizeResponse, global::CMsgHorizontalScrollBarSizeResponse.Builder>(internal__static_CMsgHorizontalScrollBarSizeResponse__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", "Wide", "Tall", "ScrollMax", "Scroll", "Zoom", "Visible", });
      internal__static_CMsgVerticalScrollBarSize__Descriptor = Descriptor.MessageTypes[28];
      internal__static_CMsgVerticalScrollBarSize__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgVerticalScrollBarSize, global::CMsgVerticalScrollBarSize.Builder>(internal__static_CMsgVerticalScrollBarSize__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgVerticalScrollBarSizeResponse__Descriptor = Descriptor.MessageTypes[29];
      internal__static_CMsgVerticalScrollBarSizeResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgVerticalScrollBarSizeResponse, global::CMsgVerticalScrollBarSizeResponse.Builder>(internal__static_CMsgVerticalScrollBarSizeResponse__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", "Wide", "Tall", "ScrollMax", "Scroll", "Zoom", "Visible", });
      internal__static_CMsgFind__Descriptor = Descriptor.MessageTypes[30];
      internal__static_CMsgFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFind, global::CMsgFind.Builder>(internal__static_CMsgFind__Descriptor,
              new string[] { "BrowserHandle", "Find", "Infind", "Reverse", });
      internal__static_CMsgStopFind__Descriptor = Descriptor.MessageTypes[31];
      internal__static_CMsgStopFind__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgStopFind, global::CMsgStopFind.Builder>(internal__static_CMsgStopFind__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgSetHorizontalScroll__Descriptor = Descriptor.MessageTypes[32];
      internal__static_CMsgSetHorizontalScroll__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetHorizontalScroll, global::CMsgSetHorizontalScroll.Builder>(internal__static_CMsgSetHorizontalScroll__Descriptor,
              new string[] { "BrowserHandle", "Scroll", });
      internal__static_CMsgSetVerticalScroll__Descriptor = Descriptor.MessageTypes[33];
      internal__static_CMsgSetVerticalScroll__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetVerticalScroll, global::CMsgSetVerticalScroll.Builder>(internal__static_CMsgSetVerticalScroll__Descriptor,
              new string[] { "BrowserHandle", "Scroll", });
      internal__static_CMsgSetZoomLevel__Descriptor = Descriptor.MessageTypes[34];
      internal__static_CMsgSetZoomLevel__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetZoomLevel, global::CMsgSetZoomLevel.Builder>(internal__static_CMsgSetZoomLevel__Descriptor,
              new string[] { "BrowserHandle", "Zoom", });
      internal__static_CMsgViewSource__Descriptor = Descriptor.MessageTypes[35];
      internal__static_CMsgViewSource__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgViewSource, global::CMsgViewSource.Builder>(internal__static_CMsgViewSource__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgBrowserReady__Descriptor = Descriptor.MessageTypes[36];
      internal__static_CMsgBrowserReady__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgBrowserReady, global::CMsgBrowserReady.Builder>(internal__static_CMsgBrowserReady__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgURLChanged__Descriptor = Descriptor.MessageTypes[37];
      internal__static_CMsgURLChanged__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgURLChanged, global::CMsgURLChanged.Builder>(internal__static_CMsgURLChanged__Descriptor,
              new string[] { "BrowserHandle", "Url", "PostData", "BIsRedirect", "Pagetitle", "BNewNavigation", });
      internal__static_CHTMLHeader__Descriptor = Descriptor.MessageTypes[38];
      internal__static_CHTMLHeader__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CHTMLHeader, global::CHTMLHeader.Builder>(internal__static_CHTMLHeader__Descriptor,
              new string[] { "Key", "Value", });
      internal__static_CHTMLPageSecurityInfo__Descriptor = Descriptor.MessageTypes[39];
      internal__static_CHTMLPageSecurityInfo__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CHTMLPageSecurityInfo, global::CHTMLPageSecurityInfo.Builder>(internal__static_CHTMLPageSecurityInfo__Descriptor,
              new string[] { "BIsSecure", "BHasCertError", "IssuerName", "CertName", "CertExpiry", "NCertBits", "BIsEVCert", });
      internal__static_CMsgFinishedRequest__Descriptor = Descriptor.MessageTypes[40];
      internal__static_CMsgFinishedRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFinishedRequest, global::CMsgFinishedRequest.Builder>(internal__static_CMsgFinishedRequest__Descriptor,
              new string[] { "BrowserHandle", "Url", "PageTitle", "SecurityInfo", "Headers", });
      internal__static_CMsgStartRequest__Descriptor = Descriptor.MessageTypes[41];
      internal__static_CMsgStartRequest__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgStartRequest, global::CMsgStartRequest.Builder>(internal__static_CMsgStartRequest__Descriptor,
              new string[] { "BrowserHandle", "Url", "Target", "PostData", "BIsRedirect", });
      internal__static_CMsgStartRequestResponse__Descriptor = Descriptor.MessageTypes[42];
      internal__static_CMsgStartRequestResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgStartRequestResponse, global::CMsgStartRequestResponse.Builder>(internal__static_CMsgStartRequestResponse__Descriptor,
              new string[] { "BrowserHandle", "BAllow", });
      internal__static_CMsgShowPopup__Descriptor = Descriptor.MessageTypes[43];
      internal__static_CMsgShowPopup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgShowPopup, global::CMsgShowPopup.Builder>(internal__static_CMsgShowPopup__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgHidePopup__Descriptor = Descriptor.MessageTypes[44];
      internal__static_CMsgHidePopup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgHidePopup, global::CMsgHidePopup.Builder>(internal__static_CMsgHidePopup__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgSizePopup__Descriptor = Descriptor.MessageTypes[45];
      internal__static_CMsgSizePopup__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSizePopup, global::CMsgSizePopup.Builder>(internal__static_CMsgSizePopup__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", "Wide", "Tall", });
      internal__static_CMsgOpenNewTab__Descriptor = Descriptor.MessageTypes[46];
      internal__static_CMsgOpenNewTab__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgOpenNewTab, global::CMsgOpenNewTab.Builder>(internal__static_CMsgOpenNewTab__Descriptor,
              new string[] { "BrowserHandle", "Url", "BForeground", });
      internal__static_CMsgOpenNewTabResponse__Descriptor = Descriptor.MessageTypes[47];
      internal__static_CMsgOpenNewTabResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgOpenNewTabResponse, global::CMsgOpenNewTabResponse.Builder>(internal__static_CMsgOpenNewTabResponse__Descriptor,
              new string[] { "BrowserHandle", "BAllow", });
      internal__static_CMsgPopupHTMLWindow__Descriptor = Descriptor.MessageTypes[48];
      internal__static_CMsgPopupHTMLWindow__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgPopupHTMLWindow, global::CMsgPopupHTMLWindow.Builder>(internal__static_CMsgPopupHTMLWindow__Descriptor,
              new string[] { "BrowserHandle", "Url", "X", "Y", "Wide", "Tall", });
      internal__static_CMsgPopupHTMLWindowResponse__Descriptor = Descriptor.MessageTypes[49];
      internal__static_CMsgPopupHTMLWindowResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgPopupHTMLWindowResponse, global::CMsgPopupHTMLWindowResponse.Builder>(internal__static_CMsgPopupHTMLWindowResponse__Descriptor,
              new string[] { "BrowserHandle", "BAllow", });
      internal__static_CMsgSetHTMLTitle__Descriptor = Descriptor.MessageTypes[50];
      internal__static_CMsgSetHTMLTitle__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetHTMLTitle, global::CMsgSetHTMLTitle.Builder>(internal__static_CMsgSetHTMLTitle__Descriptor,
              new string[] { "BrowserHandle", "Title", });
      internal__static_CMsgLoadingResource__Descriptor = Descriptor.MessageTypes[51];
      internal__static_CMsgLoadingResource__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgLoadingResource, global::CMsgLoadingResource.Builder>(internal__static_CMsgLoadingResource__Descriptor,
              new string[] { "BrowserHandle", "Url", });
      internal__static_CMsgStatusText__Descriptor = Descriptor.MessageTypes[52];
      internal__static_CMsgStatusText__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgStatusText, global::CMsgStatusText.Builder>(internal__static_CMsgStatusText__Descriptor,
              new string[] { "BrowserHandle", "Text", });
      internal__static_CMsgSetCursor__Descriptor = Descriptor.MessageTypes[53];
      internal__static_CMsgSetCursor__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetCursor, global::CMsgSetCursor.Builder>(internal__static_CMsgSetCursor__Descriptor,
              new string[] { "BrowserHandle", "Cursor", "CustomData", "Wide", "Tall", "Xhotspot", "Yhotspot", });
      internal__static_CMsgFileLoadDialog__Descriptor = Descriptor.MessageTypes[54];
      internal__static_CMsgFileLoadDialog__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFileLoadDialog, global::CMsgFileLoadDialog.Builder>(internal__static_CMsgFileLoadDialog__Descriptor,
              new string[] { "BrowserHandle", "Title", "InitialFile", });
      internal__static_CMsgFileLoadDialogResponse__Descriptor = Descriptor.MessageTypes[55];
      internal__static_CMsgFileLoadDialogResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFileLoadDialogResponse, global::CMsgFileLoadDialogResponse.Builder>(internal__static_CMsgFileLoadDialogResponse__Descriptor,
              new string[] { "BrowserHandle", "Files", });
      internal__static_CMsgShowToolTip__Descriptor = Descriptor.MessageTypes[56];
      internal__static_CMsgShowToolTip__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgShowToolTip, global::CMsgShowToolTip.Builder>(internal__static_CMsgShowToolTip__Descriptor,
              new string[] { "BrowserHandle", "Text", });
      internal__static_CMsgUpdateToolTip__Descriptor = Descriptor.MessageTypes[57];
      internal__static_CMsgUpdateToolTip__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgUpdateToolTip, global::CMsgUpdateToolTip.Builder>(internal__static_CMsgUpdateToolTip__Descriptor,
              new string[] { "BrowserHandle", "Text", });
      internal__static_CMsgHideToolTip__Descriptor = Descriptor.MessageTypes[58];
      internal__static_CMsgHideToolTip__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgHideToolTip, global::CMsgHideToolTip.Builder>(internal__static_CMsgHideToolTip__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgSearchResults__Descriptor = Descriptor.MessageTypes[59];
      internal__static_CMsgSearchResults__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSearchResults, global::CMsgSearchResults.Builder>(internal__static_CMsgSearchResults__Descriptor,
              new string[] { "BrowserHandle", "ActiveMatch", "Results", });
      internal__static_CMsgClose__Descriptor = Descriptor.MessageTypes[60];
      internal__static_CMsgClose__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgClose, global::CMsgClose.Builder>(internal__static_CMsgClose__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgNeedsPaint__Descriptor = Descriptor.MessageTypes[61];
      internal__static_CMsgNeedsPaint__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgNeedsPaint, global::CMsgNeedsPaint.Builder>(internal__static_CMsgNeedsPaint__Descriptor,
              new string[] { "BrowserHandle", "Rgba", "Wide", "Tall", "Textureid", "Updatex", "Updatey", "Updatewide", "Updatetall", "Scrollx", "Scrolly", "ComboboxRgba", "ComboboxWide", "ComboboxTall", "Pageserial", });
      internal__static_CMsgNeedsPaintResponse__Descriptor = Descriptor.MessageTypes[62];
      internal__static_CMsgNeedsPaintResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgNeedsPaintResponse, global::CMsgNeedsPaintResponse.Builder>(internal__static_CMsgNeedsPaintResponse__Descriptor,
              new string[] { "BrowserHandle", "Textureid", });
      internal__static_CMsgGetZoom__Descriptor = Descriptor.MessageTypes[63];
      internal__static_CMsgGetZoom__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGetZoom, global::CMsgGetZoom.Builder>(internal__static_CMsgGetZoom__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgGetZoomResponse__Descriptor = Descriptor.MessageTypes[64];
      internal__static_CMsgGetZoomResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGetZoomResponse, global::CMsgGetZoomResponse.Builder>(internal__static_CMsgGetZoomResponse__Descriptor,
              new string[] { "BrowserHandle", "Zoom", });
      internal__static_CMsgLinkAtPosition__Descriptor = Descriptor.MessageTypes[65];
      internal__static_CMsgLinkAtPosition__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgLinkAtPosition, global::CMsgLinkAtPosition.Builder>(internal__static_CMsgLinkAtPosition__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", });
      internal__static_CMsgLinkAtPositionResponse__Descriptor = Descriptor.MessageTypes[66];
      internal__static_CMsgLinkAtPositionResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgLinkAtPositionResponse, global::CMsgLinkAtPositionResponse.Builder>(internal__static_CMsgLinkAtPositionResponse__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", "Url", "Blivelink", "Binput", });
      internal__static_CMsgZoomToElementAtPosition__Descriptor = Descriptor.MessageTypes[67];
      internal__static_CMsgZoomToElementAtPosition__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgZoomToElementAtPosition, global::CMsgZoomToElementAtPosition.Builder>(internal__static_CMsgZoomToElementAtPosition__Descriptor,
              new string[] { "BrowserHandle", "X", "Y", });
      internal__static_CMsgZoomToElementAtPositionResponse__Descriptor = Descriptor.MessageTypes[68];
      internal__static_CMsgZoomToElementAtPositionResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgZoomToElementAtPositionResponse, global::CMsgZoomToElementAtPositionResponse.Builder>(internal__static_CMsgZoomToElementAtPositionResponse__Descriptor,
              new string[] { "BrowserHandle", "InitialX", "InitialY", "InitialWidth", "InitialHeight", "FinalX", "FinalY", "FinalWidth", "FinalHeight", "Zoom", });
      internal__static_CMsgScalePageToValue__Descriptor = Descriptor.MessageTypes[69];
      internal__static_CMsgScalePageToValue__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgScalePageToValue, global::CMsgScalePageToValue.Builder>(internal__static_CMsgScalePageToValue__Descriptor,
              new string[] { "BrowserHandle", "Scale", "X", "Y", });
      internal__static_CMsgScalePageToValueResponse__Descriptor = Descriptor.MessageTypes[70];
      internal__static_CMsgScalePageToValueResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgScalePageToValueResponse, global::CMsgScalePageToValueResponse.Builder>(internal__static_CMsgScalePageToValueResponse__Descriptor,
              new string[] { "BrowserHandle", "Zoom", "WidthDelta", "HeightDelta", });
      internal__static_CMsgSavePageToJPEG__Descriptor = Descriptor.MessageTypes[71];
      internal__static_CMsgSavePageToJPEG__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSavePageToJPEG, global::CMsgSavePageToJPEG.Builder>(internal__static_CMsgSavePageToJPEG__Descriptor,
              new string[] { "BrowserHandle", "Url", "Filename", "Width", "Height", });
      internal__static_CMsgSavePageToJPEGResponse__Descriptor = Descriptor.MessageTypes[72];
      internal__static_CMsgSavePageToJPEGResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSavePageToJPEGResponse, global::CMsgSavePageToJPEGResponse.Builder>(internal__static_CMsgSavePageToJPEGResponse__Descriptor,
              new string[] { "BrowserHandle", "Url", "Filename", });
      internal__static_CMsgJSAlert__Descriptor = Descriptor.MessageTypes[73];
      internal__static_CMsgJSAlert__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgJSAlert, global::CMsgJSAlert.Builder>(internal__static_CMsgJSAlert__Descriptor,
              new string[] { "BrowserHandle", "Message", });
      internal__static_CMsgJSConfirm__Descriptor = Descriptor.MessageTypes[74];
      internal__static_CMsgJSConfirm__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgJSConfirm, global::CMsgJSConfirm.Builder>(internal__static_CMsgJSConfirm__Descriptor,
              new string[] { "BrowserHandle", "Message", });
      internal__static_CMsgJSDialogResponse__Descriptor = Descriptor.MessageTypes[75];
      internal__static_CMsgJSDialogResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgJSDialogResponse, global::CMsgJSDialogResponse.Builder>(internal__static_CMsgJSDialogResponse__Descriptor,
              new string[] { "BrowserHandle", "Result", });
      internal__static_CMsgCanGoBackAndForward__Descriptor = Descriptor.MessageTypes[76];
      internal__static_CMsgCanGoBackAndForward__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgCanGoBackAndForward, global::CMsgCanGoBackAndForward.Builder>(internal__static_CMsgCanGoBackAndForward__Descriptor,
              new string[] { "BrowserHandle", "Bgoback", "Bgoforward", });
      internal__static_CMsgOpenSteamURL__Descriptor = Descriptor.MessageTypes[77];
      internal__static_CMsgOpenSteamURL__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgOpenSteamURL, global::CMsgOpenSteamURL.Builder>(internal__static_CMsgOpenSteamURL__Descriptor,
              new string[] { "BrowserHandle", "Url", });
      internal__static_CMsgSetCookie__Descriptor = Descriptor.MessageTypes[78];
      internal__static_CMsgSetCookie__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetCookie, global::CMsgSetCookie.Builder>(internal__static_CMsgSetCookie__Descriptor,
              new string[] { "Key", "Value", "Path", "Host", "Expires", });
      internal__static_CMsgSetTargetFrameRate__Descriptor = Descriptor.MessageTypes[79];
      internal__static_CMsgSetTargetFrameRate__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgSetTargetFrameRate, global::CMsgSetTargetFrameRate.Builder>(internal__static_CMsgSetTargetFrameRate__Descriptor,
              new string[] { "NTargetFrameRate", });
      internal__static_CMsgFullRepaint__Descriptor = Descriptor.MessageTypes[80];
      internal__static_CMsgFullRepaint__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFullRepaint, global::CMsgFullRepaint.Builder>(internal__static_CMsgFullRepaint__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgRequestFullScreen__Descriptor = Descriptor.MessageTypes[81];
      internal__static_CMsgRequestFullScreen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgRequestFullScreen, global::CMsgRequestFullScreen.Builder>(internal__static_CMsgRequestFullScreen__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgRequestFullScreenResponse__Descriptor = Descriptor.MessageTypes[82];
      internal__static_CMsgRequestFullScreenResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgRequestFullScreenResponse, global::CMsgRequestFullScreenResponse.Builder>(internal__static_CMsgRequestFullScreenResponse__Descriptor,
              new string[] { "BrowserHandle", "Ballow", });
      internal__static_CMsgExitFullScreen__Descriptor = Descriptor.MessageTypes[83];
      internal__static_CMsgExitFullScreen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgExitFullScreen, global::CMsgExitFullScreen.Builder>(internal__static_CMsgExitFullScreen__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgGetCookiesForURL__Descriptor = Descriptor.MessageTypes[84];
      internal__static_CMsgGetCookiesForURL__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGetCookiesForURL, global::CMsgGetCookiesForURL.Builder>(internal__static_CMsgGetCookiesForURL__Descriptor,
              new string[] { "BrowserHandle", "Url", });
      internal__static_CCookie__Descriptor = Descriptor.MessageTypes[85];
      internal__static_CCookie__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CCookie, global::CCookie.Builder>(internal__static_CCookie__Descriptor,
              new string[] { "Name", "Value", "Domain", "Path", });
      internal__static_CMsgGetCookiesForURLResponse__Descriptor = Descriptor.MessageTypes[86];
      internal__static_CMsgGetCookiesForURLResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgGetCookiesForURLResponse, global::CMsgGetCookiesForURLResponse.Builder>(internal__static_CMsgGetCookiesForURLResponse__Descriptor,
              new string[] { "BrowserHandle", "Url", "Cookies", });
      internal__static_CMsgNodeHasFocus__Descriptor = Descriptor.MessageTypes[87];
      internal__static_CMsgNodeHasFocus__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgNodeHasFocus, global::CMsgNodeHasFocus.Builder>(internal__static_CMsgNodeHasFocus__Descriptor,
              new string[] { "BrowserHandle", "BInput", "Name", "Elementtagname", "Searchbuttontext", "BHasMultipleInputs", "InputType", });
      internal__static_CMsgZoomToFocusedElement__Descriptor = Descriptor.MessageTypes[88];
      internal__static_CMsgZoomToFocusedElement__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgZoomToFocusedElement, global::CMsgZoomToFocusedElement.Builder>(internal__static_CMsgZoomToFocusedElement__Descriptor,
              new string[] { "BrowserHandle", "Leftoffset", "Topoffset", });
      internal__static_CMsgCloseFullScreenFlashIfOpen__Descriptor = Descriptor.MessageTypes[89];
      internal__static_CMsgCloseFullScreenFlashIfOpen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgCloseFullScreenFlashIfOpen, global::CMsgCloseFullScreenFlashIfOpen.Builder>(internal__static_CMsgCloseFullScreenFlashIfOpen__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgPauseFullScreenFlashMovieIfOpen__Descriptor = Descriptor.MessageTypes[90];
      internal__static_CMsgPauseFullScreenFlashMovieIfOpen__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgPauseFullScreenFlashMovieIfOpen, global::CMsgPauseFullScreenFlashMovieIfOpen.Builder>(internal__static_CMsgPauseFullScreenFlashMovieIfOpen__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgFocusedNodeText__Descriptor = Descriptor.MessageTypes[91];
      internal__static_CMsgFocusedNodeText__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFocusedNodeText, global::CMsgFocusedNodeText.Builder>(internal__static_CMsgFocusedNodeText__Descriptor,
              new string[] { "BrowserHandle", });
      internal__static_CMsgFocusedNodeTextResponse__Descriptor = Descriptor.MessageTypes[92];
      internal__static_CMsgFocusedNodeTextResponse__FieldAccessorTable = 
          new pb::FieldAccess.FieldAccessorTable<global::CMsgFocusedNodeTextResponse, global::CMsgFocusedNodeTextResponse.Builder>(internal__static_CMsgFocusedNodeTextResponse__Descriptor,
              new string[] { "BrowserHandle", "Value", });
      return null;
    };
    pbd::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
        new pbd::FileDescriptor[] {
        }, assigner);
  }
  #endregion
  
}
#region Messages
[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgKeyUp : pb::GeneratedMessage<CMsgKeyUp, CMsgKeyUp.Builder> {
  private CMsgKeyUp() { }
  private static readonly CMsgKeyUp defaultInstance = new CMsgKeyUp().MakeReadOnly();
  private static readonly string[] _cMsgKeyUpFieldNames = new string[] { "browser_handle", "keyCode", "modifiers" };
  private static readonly uint[] _cMsgKeyUpFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgKeyUp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgKeyUp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgKeyUp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgKeyUp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgKeyUp, CMsgKeyUp.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgKeyUp__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int KeyCodeFieldNumber = 2;
  private bool hasKeyCode;
  private uint keyCode_;
  public bool HasKeyCode {
    get { return hasKeyCode; }
  }
  [global::System.CLSCompliant(false)]
  public uint KeyCode {
    get { return keyCode_; }
  }
  
  public const int ModifiersFieldNumber = 3;
  private bool hasModifiers;
  private uint modifiers_;
  public bool HasModifiers {
    get { return hasModifiers; }
  }
  [global::System.CLSCompliant(false)]
  public uint Modifiers {
    get { return modifiers_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgKeyUpFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasKeyCode) {
      output.WriteUInt32(2, field_names[1], KeyCode);
    }
    if (hasModifiers) {
      output.WriteUInt32(3, field_names[2], Modifiers);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasKeyCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyCode);
      }
      if (hasModifiers) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Modifiers);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgKeyUp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyUp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgKeyUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgKeyUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgKeyUp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgKeyUp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgKeyUp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgKeyUp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgKeyUp result;
    
    private CMsgKeyUp PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgKeyUp original = result;
        result = new CMsgKeyUp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgKeyUp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgKeyUp.Descriptor; }
    }
    
    public override CMsgKeyUp DefaultInstanceForType {
      get { return global::CMsgKeyUp.DefaultInstance; }
    }
    
    public override CMsgKeyUp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgKeyUp) {
        return MergeFrom((CMsgKeyUp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgKeyUp other) {
      if (other == global::CMsgKeyUp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasKeyCode) {
        KeyCode = other.KeyCode;
      }
      if (other.HasModifiers) {
        Modifiers = other.Modifiers;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgKeyUpFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgKeyUpFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasKeyCode = input.ReadUInt32(ref result.keyCode_);
            break;
          }
          case 24: {
            result.hasModifiers = input.ReadUInt32(ref result.modifiers_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasKeyCode {
      get { return result.hasKeyCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeyCode {
      get { return result.KeyCode; }
      set { SetKeyCode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetKeyCode(uint value) {
      PrepareBuilder();
      result.hasKeyCode = true;
      result.keyCode_ = value;
      return this;
    }
    public Builder ClearKeyCode() {
      PrepareBuilder();
      result.hasKeyCode = false;
      result.keyCode_ = 0;
      return this;
    }
    
    public bool HasModifiers {
      get { return result.hasModifiers; }
    }
    [global::System.CLSCompliant(false)]
    public uint Modifiers {
      get { return result.Modifiers; }
      set { SetModifiers(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetModifiers(uint value) {
      PrepareBuilder();
      result.hasModifiers = true;
      result.modifiers_ = value;
      return this;
    }
    public Builder ClearModifiers() {
      PrepareBuilder();
      result.hasModifiers = false;
      result.modifiers_ = 0;
      return this;
    }
  }
  static CMsgKeyUp() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgKeyDown : pb::GeneratedMessage<CMsgKeyDown, CMsgKeyDown.Builder> {
  private CMsgKeyDown() { }
  private static readonly CMsgKeyDown defaultInstance = new CMsgKeyDown().MakeReadOnly();
  private static readonly string[] _cMsgKeyDownFieldNames = new string[] { "browser_handle", "keyCode", "modifiers" };
  private static readonly uint[] _cMsgKeyDownFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgKeyDown DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgKeyDown DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgKeyDown ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgKeyDown__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgKeyDown, CMsgKeyDown.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgKeyDown__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int KeyCodeFieldNumber = 2;
  private bool hasKeyCode;
  private uint keyCode_;
  public bool HasKeyCode {
    get { return hasKeyCode; }
  }
  [global::System.CLSCompliant(false)]
  public uint KeyCode {
    get { return keyCode_; }
  }
  
  public const int ModifiersFieldNumber = 3;
  private bool hasModifiers;
  private uint modifiers_;
  public bool HasModifiers {
    get { return hasModifiers; }
  }
  [global::System.CLSCompliant(false)]
  public uint Modifiers {
    get { return modifiers_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgKeyDownFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasKeyCode) {
      output.WriteUInt32(2, field_names[1], KeyCode);
    }
    if (hasModifiers) {
      output.WriteUInt32(3, field_names[2], Modifiers);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasKeyCode) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, KeyCode);
      }
      if (hasModifiers) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Modifiers);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgKeyDown ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyDown ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgKeyDown ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgKeyDown ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgKeyDown MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgKeyDown prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgKeyDown, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgKeyDown cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgKeyDown result;
    
    private CMsgKeyDown PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgKeyDown original = result;
        result = new CMsgKeyDown();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgKeyDown MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgKeyDown.Descriptor; }
    }
    
    public override CMsgKeyDown DefaultInstanceForType {
      get { return global::CMsgKeyDown.DefaultInstance; }
    }
    
    public override CMsgKeyDown BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgKeyDown) {
        return MergeFrom((CMsgKeyDown) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgKeyDown other) {
      if (other == global::CMsgKeyDown.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasKeyCode) {
        KeyCode = other.KeyCode;
      }
      if (other.HasModifiers) {
        Modifiers = other.Modifiers;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgKeyDownFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgKeyDownFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasKeyCode = input.ReadUInt32(ref result.keyCode_);
            break;
          }
          case 24: {
            result.hasModifiers = input.ReadUInt32(ref result.modifiers_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasKeyCode {
      get { return result.hasKeyCode; }
    }
    [global::System.CLSCompliant(false)]
    public uint KeyCode {
      get { return result.KeyCode; }
      set { SetKeyCode(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetKeyCode(uint value) {
      PrepareBuilder();
      result.hasKeyCode = true;
      result.keyCode_ = value;
      return this;
    }
    public Builder ClearKeyCode() {
      PrepareBuilder();
      result.hasKeyCode = false;
      result.keyCode_ = 0;
      return this;
    }
    
    public bool HasModifiers {
      get { return result.hasModifiers; }
    }
    [global::System.CLSCompliant(false)]
    public uint Modifiers {
      get { return result.Modifiers; }
      set { SetModifiers(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetModifiers(uint value) {
      PrepareBuilder();
      result.hasModifiers = true;
      result.modifiers_ = value;
      return this;
    }
    public Builder ClearModifiers() {
      PrepareBuilder();
      result.hasModifiers = false;
      result.modifiers_ = 0;
      return this;
    }
  }
  static CMsgKeyDown() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgKeyChar : pb::GeneratedMessage<CMsgKeyChar, CMsgKeyChar.Builder> {
  private CMsgKeyChar() { }
  private static readonly CMsgKeyChar defaultInstance = new CMsgKeyChar().MakeReadOnly();
  private static readonly string[] _cMsgKeyCharFieldNames = new string[] { "browser_handle", "unichar" };
  private static readonly uint[] _cMsgKeyCharFieldTags = new uint[] { 8, 16 };
  public static CMsgKeyChar DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgKeyChar DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgKeyChar ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgKeyChar__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgKeyChar, CMsgKeyChar.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgKeyChar__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UnicharFieldNumber = 2;
  private bool hasUnichar;
  private uint unichar_;
  public bool HasUnichar {
    get { return hasUnichar; }
  }
  [global::System.CLSCompliant(false)]
  public uint Unichar {
    get { return unichar_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgKeyCharFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUnichar) {
      output.WriteUInt32(2, field_names[1], Unichar);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUnichar) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Unichar);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgKeyChar ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgKeyChar ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgKeyChar ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgKeyChar ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgKeyChar MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgKeyChar prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgKeyChar, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgKeyChar cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgKeyChar result;
    
    private CMsgKeyChar PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgKeyChar original = result;
        result = new CMsgKeyChar();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgKeyChar MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgKeyChar.Descriptor; }
    }
    
    public override CMsgKeyChar DefaultInstanceForType {
      get { return global::CMsgKeyChar.DefaultInstance; }
    }
    
    public override CMsgKeyChar BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgKeyChar) {
        return MergeFrom((CMsgKeyChar) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgKeyChar other) {
      if (other == global::CMsgKeyChar.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUnichar) {
        Unichar = other.Unichar;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgKeyCharFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgKeyCharFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasUnichar = input.ReadUInt32(ref result.unichar_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUnichar {
      get { return result.hasUnichar; }
    }
    [global::System.CLSCompliant(false)]
    public uint Unichar {
      get { return result.Unichar; }
      set { SetUnichar(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetUnichar(uint value) {
      PrepareBuilder();
      result.hasUnichar = true;
      result.unichar_ = value;
      return this;
    }
    public Builder ClearUnichar() {
      PrepareBuilder();
      result.hasUnichar = false;
      result.unichar_ = 0;
      return this;
    }
  }
  static CMsgKeyChar() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgMouseDown : pb::GeneratedMessage<CMsgMouseDown, CMsgMouseDown.Builder> {
  private CMsgMouseDown() { }
  private static readonly CMsgMouseDown defaultInstance = new CMsgMouseDown().MakeReadOnly();
  private static readonly string[] _cMsgMouseDownFieldNames = new string[] { "browser_handle", "mouse_button" };
  private static readonly uint[] _cMsgMouseDownFieldTags = new uint[] { 8, 16 };
  public static CMsgMouseDown DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgMouseDown DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgMouseDown ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgMouseDown__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgMouseDown, CMsgMouseDown.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgMouseDown__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int MouseButtonFieldNumber = 2;
  private bool hasMouseButton;
  private uint mouseButton_;
  public bool HasMouseButton {
    get { return hasMouseButton; }
  }
  [global::System.CLSCompliant(false)]
  public uint MouseButton {
    get { return mouseButton_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgMouseDownFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasMouseButton) {
      output.WriteUInt32(2, field_names[1], MouseButton);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasMouseButton) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MouseButton);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgMouseDown ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseDown ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgMouseDown ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseDown ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgMouseDown MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgMouseDown prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgMouseDown, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgMouseDown cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgMouseDown result;
    
    private CMsgMouseDown PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgMouseDown original = result;
        result = new CMsgMouseDown();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgMouseDown MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgMouseDown.Descriptor; }
    }
    
    public override CMsgMouseDown DefaultInstanceForType {
      get { return global::CMsgMouseDown.DefaultInstance; }
    }
    
    public override CMsgMouseDown BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgMouseDown) {
        return MergeFrom((CMsgMouseDown) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgMouseDown other) {
      if (other == global::CMsgMouseDown.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasMouseButton) {
        MouseButton = other.MouseButton;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgMouseDownFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgMouseDownFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasMouseButton = input.ReadUInt32(ref result.mouseButton_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasMouseButton {
      get { return result.hasMouseButton; }
    }
    [global::System.CLSCompliant(false)]
    public uint MouseButton {
      get { return result.MouseButton; }
      set { SetMouseButton(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMouseButton(uint value) {
      PrepareBuilder();
      result.hasMouseButton = true;
      result.mouseButton_ = value;
      return this;
    }
    public Builder ClearMouseButton() {
      PrepareBuilder();
      result.hasMouseButton = false;
      result.mouseButton_ = 0;
      return this;
    }
  }
  static CMsgMouseDown() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgMouseUp : pb::GeneratedMessage<CMsgMouseUp, CMsgMouseUp.Builder> {
  private CMsgMouseUp() { }
  private static readonly CMsgMouseUp defaultInstance = new CMsgMouseUp().MakeReadOnly();
  private static readonly string[] _cMsgMouseUpFieldNames = new string[] { "browser_handle", "mouse_button" };
  private static readonly uint[] _cMsgMouseUpFieldTags = new uint[] { 8, 16 };
  public static CMsgMouseUp DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgMouseUp DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgMouseUp ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgMouseUp__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgMouseUp, CMsgMouseUp.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgMouseUp__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int MouseButtonFieldNumber = 2;
  private bool hasMouseButton;
  private uint mouseButton_;
  public bool HasMouseButton {
    get { return hasMouseButton; }
  }
  [global::System.CLSCompliant(false)]
  public uint MouseButton {
    get { return mouseButton_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgMouseUpFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasMouseButton) {
      output.WriteUInt32(2, field_names[1], MouseButton);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasMouseButton) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MouseButton);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgMouseUp ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseUp ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgMouseUp ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseUp ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgMouseUp MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgMouseUp prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgMouseUp, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgMouseUp cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgMouseUp result;
    
    private CMsgMouseUp PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgMouseUp original = result;
        result = new CMsgMouseUp();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgMouseUp MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgMouseUp.Descriptor; }
    }
    
    public override CMsgMouseUp DefaultInstanceForType {
      get { return global::CMsgMouseUp.DefaultInstance; }
    }
    
    public override CMsgMouseUp BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgMouseUp) {
        return MergeFrom((CMsgMouseUp) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgMouseUp other) {
      if (other == global::CMsgMouseUp.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasMouseButton) {
        MouseButton = other.MouseButton;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgMouseUpFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgMouseUpFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasMouseButton = input.ReadUInt32(ref result.mouseButton_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasMouseButton {
      get { return result.hasMouseButton; }
    }
    [global::System.CLSCompliant(false)]
    public uint MouseButton {
      get { return result.MouseButton; }
      set { SetMouseButton(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMouseButton(uint value) {
      PrepareBuilder();
      result.hasMouseButton = true;
      result.mouseButton_ = value;
      return this;
    }
    public Builder ClearMouseButton() {
      PrepareBuilder();
      result.hasMouseButton = false;
      result.mouseButton_ = 0;
      return this;
    }
  }
  static CMsgMouseUp() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgMouseDblClick : pb::GeneratedMessage<CMsgMouseDblClick, CMsgMouseDblClick.Builder> {
  private CMsgMouseDblClick() { }
  private static readonly CMsgMouseDblClick defaultInstance = new CMsgMouseDblClick().MakeReadOnly();
  private static readonly string[] _cMsgMouseDblClickFieldNames = new string[] { "browser_handle", "mouse_button" };
  private static readonly uint[] _cMsgMouseDblClickFieldTags = new uint[] { 8, 16 };
  public static CMsgMouseDblClick DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgMouseDblClick DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgMouseDblClick ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgMouseDblClick__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgMouseDblClick, CMsgMouseDblClick.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgMouseDblClick__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int MouseButtonFieldNumber = 2;
  private bool hasMouseButton;
  private uint mouseButton_;
  public bool HasMouseButton {
    get { return hasMouseButton; }
  }
  [global::System.CLSCompliant(false)]
  public uint MouseButton {
    get { return mouseButton_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgMouseDblClickFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasMouseButton) {
      output.WriteUInt32(2, field_names[1], MouseButton);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasMouseButton) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, MouseButton);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgMouseDblClick ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgMouseDblClick ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseDblClick ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgMouseDblClick MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgMouseDblClick prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgMouseDblClick, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgMouseDblClick cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgMouseDblClick result;
    
    private CMsgMouseDblClick PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgMouseDblClick original = result;
        result = new CMsgMouseDblClick();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgMouseDblClick MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgMouseDblClick.Descriptor; }
    }
    
    public override CMsgMouseDblClick DefaultInstanceForType {
      get { return global::CMsgMouseDblClick.DefaultInstance; }
    }
    
    public override CMsgMouseDblClick BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgMouseDblClick) {
        return MergeFrom((CMsgMouseDblClick) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgMouseDblClick other) {
      if (other == global::CMsgMouseDblClick.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasMouseButton) {
        MouseButton = other.MouseButton;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgMouseDblClickFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgMouseDblClickFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasMouseButton = input.ReadUInt32(ref result.mouseButton_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasMouseButton {
      get { return result.hasMouseButton; }
    }
    [global::System.CLSCompliant(false)]
    public uint MouseButton {
      get { return result.MouseButton; }
      set { SetMouseButton(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetMouseButton(uint value) {
      PrepareBuilder();
      result.hasMouseButton = true;
      result.mouseButton_ = value;
      return this;
    }
    public Builder ClearMouseButton() {
      PrepareBuilder();
      result.hasMouseButton = false;
      result.mouseButton_ = 0;
      return this;
    }
  }
  static CMsgMouseDblClick() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgMouseWheel : pb::GeneratedMessage<CMsgMouseWheel, CMsgMouseWheel.Builder> {
  private CMsgMouseWheel() { }
  private static readonly CMsgMouseWheel defaultInstance = new CMsgMouseWheel().MakeReadOnly();
  private static readonly string[] _cMsgMouseWheelFieldNames = new string[] { "browser_handle", "delta" };
  private static readonly uint[] _cMsgMouseWheelFieldTags = new uint[] { 8, 16 };
  public static CMsgMouseWheel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgMouseWheel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgMouseWheel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgMouseWheel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgMouseWheel, CMsgMouseWheel.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgMouseWheel__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int DeltaFieldNumber = 2;
  private bool hasDelta;
  private int delta_;
  public bool HasDelta {
    get { return hasDelta; }
  }
  public int Delta {
    get { return delta_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgMouseWheelFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasDelta) {
      output.WriteInt32(2, field_names[1], Delta);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasDelta) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, Delta);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgMouseWheel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseWheel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgMouseWheel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseWheel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgMouseWheel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgMouseWheel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgMouseWheel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgMouseWheel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgMouseWheel result;
    
    private CMsgMouseWheel PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgMouseWheel original = result;
        result = new CMsgMouseWheel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgMouseWheel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgMouseWheel.Descriptor; }
    }
    
    public override CMsgMouseWheel DefaultInstanceForType {
      get { return global::CMsgMouseWheel.DefaultInstance; }
    }
    
    public override CMsgMouseWheel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgMouseWheel) {
        return MergeFrom((CMsgMouseWheel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgMouseWheel other) {
      if (other == global::CMsgMouseWheel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasDelta) {
        Delta = other.Delta;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgMouseWheelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgMouseWheelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasDelta = input.ReadInt32(ref result.delta_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasDelta {
      get { return result.hasDelta; }
    }
    public int Delta {
      get { return result.Delta; }
      set { SetDelta(value); }
    }
    public Builder SetDelta(int value) {
      PrepareBuilder();
      result.hasDelta = true;
      result.delta_ = value;
      return this;
    }
    public Builder ClearDelta() {
      PrepareBuilder();
      result.hasDelta = false;
      result.delta_ = 0;
      return this;
    }
  }
  static CMsgMouseWheel() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgMouseMove : pb::GeneratedMessage<CMsgMouseMove, CMsgMouseMove.Builder> {
  private CMsgMouseMove() { }
  private static readonly CMsgMouseMove defaultInstance = new CMsgMouseMove().MakeReadOnly();
  private static readonly string[] _cMsgMouseMoveFieldNames = new string[] { "browser_handle", "x", "y" };
  private static readonly uint[] _cMsgMouseMoveFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgMouseMove DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgMouseMove DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgMouseMove ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgMouseMove__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgMouseMove, CMsgMouseMove.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgMouseMove__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private int x_;
  public bool HasX {
    get { return hasX; }
  }
  public int X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private int y_;
  public bool HasY {
    get { return hasY; }
  }
  public int Y {
    get { return y_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgMouseMoveFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteInt32(2, field_names[1], X);
    }
    if (hasY) {
      output.WriteInt32(3, field_names[2], Y);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Y);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgMouseMove ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseMove ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgMouseMove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseMove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgMouseMove MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgMouseMove prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgMouseMove, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgMouseMove cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgMouseMove result;
    
    private CMsgMouseMove PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgMouseMove original = result;
        result = new CMsgMouseMove();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgMouseMove MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgMouseMove.Descriptor; }
    }
    
    public override CMsgMouseMove DefaultInstanceForType {
      get { return global::CMsgMouseMove.DefaultInstance; }
    }
    
    public override CMsgMouseMove BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgMouseMove) {
        return MergeFrom((CMsgMouseMove) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgMouseMove other) {
      if (other == global::CMsgMouseMove.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgMouseMoveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgMouseMoveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadInt32(ref result.y_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    public int X {
      get { return result.X; }
      set { SetX(value); }
    }
    public Builder SetX(int value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    public int Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    public Builder SetY(int value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
  }
  static CMsgMouseMove() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgMouseLeave : pb::GeneratedMessage<CMsgMouseLeave, CMsgMouseLeave.Builder> {
  private CMsgMouseLeave() { }
  private static readonly CMsgMouseLeave defaultInstance = new CMsgMouseLeave().MakeReadOnly();
  private static readonly string[] _cMsgMouseLeaveFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgMouseLeaveFieldTags = new uint[] { 8 };
  public static CMsgMouseLeave DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgMouseLeave DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgMouseLeave ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgMouseLeave__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgMouseLeave, CMsgMouseLeave.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgMouseLeave__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgMouseLeaveFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgMouseLeave ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgMouseLeave ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgMouseLeave ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgMouseLeave ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgMouseLeave MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgMouseLeave prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgMouseLeave, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgMouseLeave cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgMouseLeave result;
    
    private CMsgMouseLeave PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgMouseLeave original = result;
        result = new CMsgMouseLeave();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgMouseLeave MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgMouseLeave.Descriptor; }
    }
    
    public override CMsgMouseLeave DefaultInstanceForType {
      get { return global::CMsgMouseLeave.DefaultInstance; }
    }
    
    public override CMsgMouseLeave BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgMouseLeave) {
        return MergeFrom((CMsgMouseLeave) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgMouseLeave other) {
      if (other == global::CMsgMouseLeave.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgMouseLeaveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgMouseLeaveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgMouseLeave() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserCreate : pb::GeneratedMessage<CMsgBrowserCreate, CMsgBrowserCreate.Builder> {
  private CMsgBrowserCreate() { }
  private static readonly CMsgBrowserCreate defaultInstance = new CMsgBrowserCreate().MakeReadOnly();
  private static readonly string[] _cMsgBrowserCreateFieldNames = new string[] { "popup", "request_id", "user_css", "useragent", "webkit_scrollbars" };
  private static readonly uint[] _cMsgBrowserCreateFieldTags = new uint[] { 16, 8, 42, 26, 32 };
  public static CMsgBrowserCreate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserCreate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserCreate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserCreate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserCreate, CMsgBrowserCreate.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserCreate__FieldAccessorTable; }
  }
  
  public const int RequestIdFieldNumber = 1;
  private bool hasRequestId;
  private uint requestId_;
  public bool HasRequestId {
    get { return hasRequestId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequestId {
    get { return requestId_; }
  }
  
  public const int PopupFieldNumber = 2;
  private bool hasPopup;
  private bool popup_;
  public bool HasPopup {
    get { return hasPopup; }
  }
  public bool Popup {
    get { return popup_; }
  }
  
  public const int UseragentFieldNumber = 3;
  private bool hasUseragent;
  private string useragent_ = "";
  public bool HasUseragent {
    get { return hasUseragent; }
  }
  public string Useragent {
    get { return useragent_; }
  }
  
  public const int WebkitScrollbarsFieldNumber = 4;
  private bool hasWebkitScrollbars;
  private bool webkitScrollbars_;
  public bool HasWebkitScrollbars {
    get { return hasWebkitScrollbars; }
  }
  public bool WebkitScrollbars {
    get { return webkitScrollbars_; }
  }
  
  public const int UserCssFieldNumber = 5;
  private bool hasUserCss;
  private string userCss_ = "";
  public bool HasUserCss {
    get { return hasUserCss; }
  }
  public string UserCss {
    get { return userCss_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserCreateFieldNames;
    if (hasRequestId) {
      output.WriteUInt32(1, field_names[1], RequestId);
    }
    if (hasPopup) {
      output.WriteBool(2, field_names[0], Popup);
    }
    if (hasUseragent) {
      output.WriteString(3, field_names[3], Useragent);
    }
    if (hasWebkitScrollbars) {
      output.WriteBool(4, field_names[4], WebkitScrollbars);
    }
    if (hasUserCss) {
      output.WriteString(5, field_names[2], UserCss);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, RequestId);
      }
      if (hasPopup) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Popup);
      }
      if (hasUseragent) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Useragent);
      }
      if (hasWebkitScrollbars) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, WebkitScrollbars);
      }
      if (hasUserCss) {
        size += pb::CodedOutputStream.ComputeStringSize(5, UserCss);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserCreate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserCreate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserCreate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserCreate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserCreate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserCreate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserCreate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserCreate result;
    
    private CMsgBrowserCreate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserCreate original = result;
        result = new CMsgBrowserCreate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserCreate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserCreate.Descriptor; }
    }
    
    public override CMsgBrowserCreate DefaultInstanceForType {
      get { return global::CMsgBrowserCreate.DefaultInstance; }
    }
    
    public override CMsgBrowserCreate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserCreate) {
        return MergeFrom((CMsgBrowserCreate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserCreate other) {
      if (other == global::CMsgBrowserCreate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      if (other.HasPopup) {
        Popup = other.Popup;
      }
      if (other.HasUseragent) {
        Useragent = other.Useragent;
      }
      if (other.HasWebkitScrollbars) {
        WebkitScrollbars = other.WebkitScrollbars;
      }
      if (other.HasUserCss) {
        UserCss = other.UserCss;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserCreateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserCreateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasRequestId = input.ReadUInt32(ref result.requestId_);
            break;
          }
          case 16: {
            result.hasPopup = input.ReadBool(ref result.popup_);
            break;
          }
          case 26: {
            result.hasUseragent = input.ReadString(ref result.useragent_);
            break;
          }
          case 32: {
            result.hasWebkitScrollbars = input.ReadBool(ref result.webkitScrollbars_);
            break;
          }
          case 42: {
            result.hasUserCss = input.ReadString(ref result.userCss_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasRequestId {
      get { return result.hasRequestId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestId {
      get { return result.RequestId; }
      set { SetRequestId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequestId(uint value) {
      PrepareBuilder();
      result.hasRequestId = true;
      result.requestId_ = value;
      return this;
    }
    public Builder ClearRequestId() {
      PrepareBuilder();
      result.hasRequestId = false;
      result.requestId_ = 0;
      return this;
    }
    
    public bool HasPopup {
      get { return result.hasPopup; }
    }
    public bool Popup {
      get { return result.Popup; }
      set { SetPopup(value); }
    }
    public Builder SetPopup(bool value) {
      PrepareBuilder();
      result.hasPopup = true;
      result.popup_ = value;
      return this;
    }
    public Builder ClearPopup() {
      PrepareBuilder();
      result.hasPopup = false;
      result.popup_ = false;
      return this;
    }
    
    public bool HasUseragent {
      get { return result.hasUseragent; }
    }
    public string Useragent {
      get { return result.Useragent; }
      set { SetUseragent(value); }
    }
    public Builder SetUseragent(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUseragent = true;
      result.useragent_ = value;
      return this;
    }
    public Builder ClearUseragent() {
      PrepareBuilder();
      result.hasUseragent = false;
      result.useragent_ = "";
      return this;
    }
    
    public bool HasWebkitScrollbars {
      get { return result.hasWebkitScrollbars; }
    }
    public bool WebkitScrollbars {
      get { return result.WebkitScrollbars; }
      set { SetWebkitScrollbars(value); }
    }
    public Builder SetWebkitScrollbars(bool value) {
      PrepareBuilder();
      result.hasWebkitScrollbars = true;
      result.webkitScrollbars_ = value;
      return this;
    }
    public Builder ClearWebkitScrollbars() {
      PrepareBuilder();
      result.hasWebkitScrollbars = false;
      result.webkitScrollbars_ = false;
      return this;
    }
    
    public bool HasUserCss {
      get { return result.hasUserCss; }
    }
    public string UserCss {
      get { return result.UserCss; }
      set { SetUserCss(value); }
    }
    public Builder SetUserCss(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUserCss = true;
      result.userCss_ = value;
      return this;
    }
    public Builder ClearUserCss() {
      PrepareBuilder();
      result.hasUserCss = false;
      result.userCss_ = "";
      return this;
    }
  }
  static CMsgBrowserCreate() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserCreateResponse : pb::GeneratedMessage<CMsgBrowserCreateResponse, CMsgBrowserCreateResponse.Builder> {
  private CMsgBrowserCreateResponse() { }
  private static readonly CMsgBrowserCreateResponse defaultInstance = new CMsgBrowserCreateResponse().MakeReadOnly();
  private static readonly string[] _cMsgBrowserCreateResponseFieldNames = new string[] { "browser_handle", "request_id" };
  private static readonly uint[] _cMsgBrowserCreateResponseFieldTags = new uint[] { 8, 16 };
  public static CMsgBrowserCreateResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserCreateResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserCreateResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserCreateResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserCreateResponse, CMsgBrowserCreateResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserCreateResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int RequestIdFieldNumber = 2;
  private bool hasRequestId;
  private uint requestId_;
  public bool HasRequestId {
    get { return hasRequestId; }
  }
  [global::System.CLSCompliant(false)]
  public uint RequestId {
    get { return requestId_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserCreateResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasRequestId) {
      output.WriteUInt32(2, field_names[1], RequestId);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasRequestId) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, RequestId);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserCreateResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserCreateResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserCreateResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserCreateResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserCreateResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserCreateResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserCreateResponse result;
    
    private CMsgBrowserCreateResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserCreateResponse original = result;
        result = new CMsgBrowserCreateResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserCreateResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserCreateResponse.Descriptor; }
    }
    
    public override CMsgBrowserCreateResponse DefaultInstanceForType {
      get { return global::CMsgBrowserCreateResponse.DefaultInstance; }
    }
    
    public override CMsgBrowserCreateResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserCreateResponse) {
        return MergeFrom((CMsgBrowserCreateResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserCreateResponse other) {
      if (other == global::CMsgBrowserCreateResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasRequestId) {
        RequestId = other.RequestId;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserCreateResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserCreateResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasRequestId = input.ReadUInt32(ref result.requestId_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasRequestId {
      get { return result.hasRequestId; }
    }
    [global::System.CLSCompliant(false)]
    public uint RequestId {
      get { return result.RequestId; }
      set { SetRequestId(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRequestId(uint value) {
      PrepareBuilder();
      result.hasRequestId = true;
      result.requestId_ = value;
      return this;
    }
    public Builder ClearRequestId() {
      PrepareBuilder();
      result.hasRequestId = false;
      result.requestId_ = 0;
      return this;
    }
  }
  static CMsgBrowserCreateResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserRemove : pb::GeneratedMessage<CMsgBrowserRemove, CMsgBrowserRemove.Builder> {
  private CMsgBrowserRemove() { }
  private static readonly CMsgBrowserRemove defaultInstance = new CMsgBrowserRemove().MakeReadOnly();
  private static readonly string[] _cMsgBrowserRemoveFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgBrowserRemoveFieldTags = new uint[] { 8 };
  public static CMsgBrowserRemove DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserRemove DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserRemove ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserRemove__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserRemove, CMsgBrowserRemove.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserRemove__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserRemoveFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserRemove ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserRemove ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserRemove ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserRemove MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserRemove prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserRemove, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserRemove cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserRemove result;
    
    private CMsgBrowserRemove PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserRemove original = result;
        result = new CMsgBrowserRemove();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserRemove MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserRemove.Descriptor; }
    }
    
    public override CMsgBrowserRemove DefaultInstanceForType {
      get { return global::CMsgBrowserRemove.DefaultInstance; }
    }
    
    public override CMsgBrowserRemove BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserRemove) {
        return MergeFrom((CMsgBrowserRemove) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserRemove other) {
      if (other == global::CMsgBrowserRemove.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserRemoveFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserRemoveFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgBrowserRemove() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserErrorStrings : pb::GeneratedMessage<CMsgBrowserErrorStrings, CMsgBrowserErrorStrings.Builder> {
  private CMsgBrowserErrorStrings() { }
  private static readonly CMsgBrowserErrorStrings defaultInstance = new CMsgBrowserErrorStrings().MakeReadOnly();
  private static readonly string[] _cMsgBrowserErrorStringsFieldNames = new string[] { "bad_url", "browser_handle", "cache_miss", "connection_problem", "header", "proxy_problem", "title", "unknown" };
  private static readonly uint[] _cMsgBrowserErrorStringsFieldTags = new uint[] { 42, 8, 34, 50, 26, 58, 18, 66 };
  public static CMsgBrowserErrorStrings DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserErrorStrings DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserErrorStrings ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserErrorStrings__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserErrorStrings, CMsgBrowserErrorStrings.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserErrorStrings__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TitleFieldNumber = 2;
  private bool hasTitle;
  private string title_ = "";
  public bool HasTitle {
    get { return hasTitle; }
  }
  public string Title {
    get { return title_; }
  }
  
  public const int HeaderFieldNumber = 3;
  private bool hasHeader;
  private string header_ = "";
  public bool HasHeader {
    get { return hasHeader; }
  }
  public string Header {
    get { return header_; }
  }
  
  public const int CacheMissFieldNumber = 4;
  private bool hasCacheMiss;
  private string cacheMiss_ = "";
  public bool HasCacheMiss {
    get { return hasCacheMiss; }
  }
  public string CacheMiss {
    get { return cacheMiss_; }
  }
  
  public const int BadUrlFieldNumber = 5;
  private bool hasBadUrl;
  private string badUrl_ = "";
  public bool HasBadUrl {
    get { return hasBadUrl; }
  }
  public string BadUrl {
    get { return badUrl_; }
  }
  
  public const int ConnectionProblemFieldNumber = 6;
  private bool hasConnectionProblem;
  private string connectionProblem_ = "";
  public bool HasConnectionProblem {
    get { return hasConnectionProblem; }
  }
  public string ConnectionProblem {
    get { return connectionProblem_; }
  }
  
  public const int ProxyProblemFieldNumber = 7;
  private bool hasProxyProblem;
  private string proxyProblem_ = "";
  public bool HasProxyProblem {
    get { return hasProxyProblem; }
  }
  public string ProxyProblem {
    get { return proxyProblem_; }
  }
  
  public const int UnknownFieldNumber = 8;
  private bool hasUnknown;
  private string unknown_ = "";
  public bool HasUnknown {
    get { return hasUnknown; }
  }
  public string Unknown {
    get { return unknown_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserErrorStringsFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasTitle) {
      output.WriteString(2, field_names[6], Title);
    }
    if (hasHeader) {
      output.WriteString(3, field_names[4], Header);
    }
    if (hasCacheMiss) {
      output.WriteString(4, field_names[2], CacheMiss);
    }
    if (hasBadUrl) {
      output.WriteString(5, field_names[0], BadUrl);
    }
    if (hasConnectionProblem) {
      output.WriteString(6, field_names[3], ConnectionProblem);
    }
    if (hasProxyProblem) {
      output.WriteString(7, field_names[5], ProxyProblem);
    }
    if (hasUnknown) {
      output.WriteString(8, field_names[7], Unknown);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      if (hasHeader) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Header);
      }
      if (hasCacheMiss) {
        size += pb::CodedOutputStream.ComputeStringSize(4, CacheMiss);
      }
      if (hasBadUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(5, BadUrl);
      }
      if (hasConnectionProblem) {
        size += pb::CodedOutputStream.ComputeStringSize(6, ConnectionProblem);
      }
      if (hasProxyProblem) {
        size += pb::CodedOutputStream.ComputeStringSize(7, ProxyProblem);
      }
      if (hasUnknown) {
        size += pb::CodedOutputStream.ComputeStringSize(8, Unknown);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserErrorStrings ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserErrorStrings ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserErrorStrings MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserErrorStrings prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserErrorStrings, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserErrorStrings cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserErrorStrings result;
    
    private CMsgBrowserErrorStrings PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserErrorStrings original = result;
        result = new CMsgBrowserErrorStrings();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserErrorStrings MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserErrorStrings.Descriptor; }
    }
    
    public override CMsgBrowserErrorStrings DefaultInstanceForType {
      get { return global::CMsgBrowserErrorStrings.DefaultInstance; }
    }
    
    public override CMsgBrowserErrorStrings BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserErrorStrings) {
        return MergeFrom((CMsgBrowserErrorStrings) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserErrorStrings other) {
      if (other == global::CMsgBrowserErrorStrings.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasHeader) {
        Header = other.Header;
      }
      if (other.HasCacheMiss) {
        CacheMiss = other.CacheMiss;
      }
      if (other.HasBadUrl) {
        BadUrl = other.BadUrl;
      }
      if (other.HasConnectionProblem) {
        ConnectionProblem = other.ConnectionProblem;
      }
      if (other.HasProxyProblem) {
        ProxyProblem = other.ProxyProblem;
      }
      if (other.HasUnknown) {
        Unknown = other.Unknown;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserErrorStringsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserErrorStringsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasTitle = input.ReadString(ref result.title_);
            break;
          }
          case 26: {
            result.hasHeader = input.ReadString(ref result.header_);
            break;
          }
          case 34: {
            result.hasCacheMiss = input.ReadString(ref result.cacheMiss_);
            break;
          }
          case 42: {
            result.hasBadUrl = input.ReadString(ref result.badUrl_);
            break;
          }
          case 50: {
            result.hasConnectionProblem = input.ReadString(ref result.connectionProblem_);
            break;
          }
          case 58: {
            result.hasProxyProblem = input.ReadString(ref result.proxyProblem_);
            break;
          }
          case 66: {
            result.hasUnknown = input.ReadString(ref result.unknown_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public string Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = "";
      return this;
    }
    
    public bool HasHeader {
      get { return result.hasHeader; }
    }
    public string Header {
      get { return result.Header; }
      set { SetHeader(value); }
    }
    public Builder SetHeader(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHeader = true;
      result.header_ = value;
      return this;
    }
    public Builder ClearHeader() {
      PrepareBuilder();
      result.hasHeader = false;
      result.header_ = "";
      return this;
    }
    
    public bool HasCacheMiss {
      get { return result.hasCacheMiss; }
    }
    public string CacheMiss {
      get { return result.CacheMiss; }
      set { SetCacheMiss(value); }
    }
    public Builder SetCacheMiss(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCacheMiss = true;
      result.cacheMiss_ = value;
      return this;
    }
    public Builder ClearCacheMiss() {
      PrepareBuilder();
      result.hasCacheMiss = false;
      result.cacheMiss_ = "";
      return this;
    }
    
    public bool HasBadUrl {
      get { return result.hasBadUrl; }
    }
    public string BadUrl {
      get { return result.BadUrl; }
      set { SetBadUrl(value); }
    }
    public Builder SetBadUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasBadUrl = true;
      result.badUrl_ = value;
      return this;
    }
    public Builder ClearBadUrl() {
      PrepareBuilder();
      result.hasBadUrl = false;
      result.badUrl_ = "";
      return this;
    }
    
    public bool HasConnectionProblem {
      get { return result.hasConnectionProblem; }
    }
    public string ConnectionProblem {
      get { return result.ConnectionProblem; }
      set { SetConnectionProblem(value); }
    }
    public Builder SetConnectionProblem(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasConnectionProblem = true;
      result.connectionProblem_ = value;
      return this;
    }
    public Builder ClearConnectionProblem() {
      PrepareBuilder();
      result.hasConnectionProblem = false;
      result.connectionProblem_ = "";
      return this;
    }
    
    public bool HasProxyProblem {
      get { return result.hasProxyProblem; }
    }
    public string ProxyProblem {
      get { return result.ProxyProblem; }
      set { SetProxyProblem(value); }
    }
    public Builder SetProxyProblem(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasProxyProblem = true;
      result.proxyProblem_ = value;
      return this;
    }
    public Builder ClearProxyProblem() {
      PrepareBuilder();
      result.hasProxyProblem = false;
      result.proxyProblem_ = "";
      return this;
    }
    
    public bool HasUnknown {
      get { return result.hasUnknown; }
    }
    public string Unknown {
      get { return result.Unknown; }
      set { SetUnknown(value); }
    }
    public Builder SetUnknown(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUnknown = true;
      result.unknown_ = value;
      return this;
    }
    public Builder ClearUnknown() {
      PrepareBuilder();
      result.hasUnknown = false;
      result.unknown_ = "";
      return this;
    }
  }
  static CMsgBrowserErrorStrings() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserSize : pb::GeneratedMessage<CMsgBrowserSize, CMsgBrowserSize.Builder> {
  private CMsgBrowserSize() { }
  private static readonly CMsgBrowserSize defaultInstance = new CMsgBrowserSize().MakeReadOnly();
  private static readonly string[] _cMsgBrowserSizeFieldNames = new string[] { "browser_handle", "height", "width" };
  private static readonly uint[] _cMsgBrowserSizeFieldTags = new uint[] { 8, 24, 16 };
  public static CMsgBrowserSize DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserSize DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserSize ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserSize__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserSize, CMsgBrowserSize.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserSize__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int WidthFieldNumber = 2;
  private bool hasWidth;
  private uint width_;
  public bool HasWidth {
    get { return hasWidth; }
  }
  [global::System.CLSCompliant(false)]
  public uint Width {
    get { return width_; }
  }
  
  public const int HeightFieldNumber = 3;
  private bool hasHeight;
  private uint height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  [global::System.CLSCompliant(false)]
  public uint Height {
    get { return height_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserSizeFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasWidth) {
      output.WriteUInt32(2, field_names[2], Width);
    }
    if (hasHeight) {
      output.WriteUInt32(3, field_names[1], Height);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasWidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Width);
      }
      if (hasHeight) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Height);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserSize ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserSize ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserSize ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserSize ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserSize MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserSize prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserSize, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserSize cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserSize result;
    
    private CMsgBrowserSize PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserSize original = result;
        result = new CMsgBrowserSize();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserSize MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserSize.Descriptor; }
    }
    
    public override CMsgBrowserSize DefaultInstanceForType {
      get { return global::CMsgBrowserSize.DefaultInstance; }
    }
    
    public override CMsgBrowserSize BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserSize) {
        return MergeFrom((CMsgBrowserSize) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserSize other) {
      if (other == global::CMsgBrowserSize.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserSizeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserSizeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasWidth = input.ReadUInt32(ref result.width_);
            break;
          }
          case 24: {
            result.hasHeight = input.ReadUInt32(ref result.height_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasWidth {
      get { return result.hasWidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint Width {
      get { return result.Width; }
      set { SetWidth(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWidth(uint value) {
      PrepareBuilder();
      result.hasWidth = true;
      result.width_ = value;
      return this;
    }
    public Builder ClearWidth() {
      PrepareBuilder();
      result.hasWidth = false;
      result.width_ = 0;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    [global::System.CLSCompliant(false)]
    public uint Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetHeight(uint value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0;
      return this;
    }
  }
  static CMsgBrowserSize() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserPosition : pb::GeneratedMessage<CMsgBrowserPosition, CMsgBrowserPosition.Builder> {
  private CMsgBrowserPosition() { }
  private static readonly CMsgBrowserPosition defaultInstance = new CMsgBrowserPosition().MakeReadOnly();
  private static readonly string[] _cMsgBrowserPositionFieldNames = new string[] { "browser_handle", "x", "y" };
  private static readonly uint[] _cMsgBrowserPositionFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgBrowserPosition DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserPosition DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserPosition ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserPosition__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserPosition, CMsgBrowserPosition.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserPosition__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserPositionFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[1], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[2], Y);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserPosition ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserPosition MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserPosition prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserPosition, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserPosition cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserPosition result;
    
    private CMsgBrowserPosition PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserPosition original = result;
        result = new CMsgBrowserPosition();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserPosition MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserPosition.Descriptor; }
    }
    
    public override CMsgBrowserPosition DefaultInstanceForType {
      get { return global::CMsgBrowserPosition.DefaultInstance; }
    }
    
    public override CMsgBrowserPosition BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserPosition) {
        return MergeFrom((CMsgBrowserPosition) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserPosition other) {
      if (other == global::CMsgBrowserPosition.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserPositionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
  }
  static CMsgBrowserPosition() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgPostURL : pb::GeneratedMessage<CMsgPostURL, CMsgPostURL.Builder> {
  private CMsgPostURL() { }
  private static readonly CMsgPostURL defaultInstance = new CMsgPostURL().MakeReadOnly();
  private static readonly string[] _cMsgPostURLFieldNames = new string[] { "browser_handle", "pageserial", "post", "url" };
  private static readonly uint[] _cMsgPostURLFieldTags = new uint[] { 8, 32, 26, 18 };
  public static CMsgPostURL DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgPostURL DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgPostURL ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgPostURL__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgPostURL, CMsgPostURL.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgPostURL__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int PostFieldNumber = 3;
  private bool hasPost;
  private string post_ = "";
  public bool HasPost {
    get { return hasPost; }
  }
  public string Post {
    get { return post_; }
  }
  
  public const int PageserialFieldNumber = 4;
  private bool hasPageserial;
  private uint pageserial_;
  public bool HasPageserial {
    get { return hasPageserial; }
  }
  [global::System.CLSCompliant(false)]
  public uint Pageserial {
    get { return pageserial_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgPostURLFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[3], Url);
    }
    if (hasPost) {
      output.WriteString(3, field_names[2], Post);
    }
    if (hasPageserial) {
      output.WriteUInt32(4, field_names[1], Pageserial);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasPost) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Post);
      }
      if (hasPageserial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Pageserial);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgPostURL ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgPostURL ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgPostURL ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPostURL ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgPostURL MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgPostURL prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgPostURL, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgPostURL cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgPostURL result;
    
    private CMsgPostURL PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgPostURL original = result;
        result = new CMsgPostURL();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgPostURL MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgPostURL.Descriptor; }
    }
    
    public override CMsgPostURL DefaultInstanceForType {
      get { return global::CMsgPostURL.DefaultInstance; }
    }
    
    public override CMsgPostURL BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgPostURL) {
        return MergeFrom((CMsgPostURL) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgPostURL other) {
      if (other == global::CMsgPostURL.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasPost) {
        Post = other.Post;
      }
      if (other.HasPageserial) {
        Pageserial = other.Pageserial;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgPostURLFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgPostURLFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            result.hasPost = input.ReadString(ref result.post_);
            break;
          }
          case 32: {
            result.hasPageserial = input.ReadUInt32(ref result.pageserial_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasPost {
      get { return result.hasPost; }
    }
    public string Post {
      get { return result.Post; }
      set { SetPost(value); }
    }
    public Builder SetPost(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPost = true;
      result.post_ = value;
      return this;
    }
    public Builder ClearPost() {
      PrepareBuilder();
      result.hasPost = false;
      result.post_ = "";
      return this;
    }
    
    public bool HasPageserial {
      get { return result.hasPageserial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Pageserial {
      get { return result.Pageserial; }
      set { SetPageserial(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPageserial(uint value) {
      PrepareBuilder();
      result.hasPageserial = true;
      result.pageserial_ = value;
      return this;
    }
    public Builder ClearPageserial() {
      PrepareBuilder();
      result.hasPageserial = false;
      result.pageserial_ = 0;
      return this;
    }
  }
  static CMsgPostURL() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgAddHeader : pb::GeneratedMessage<CMsgAddHeader, CMsgAddHeader.Builder> {
  private CMsgAddHeader() { }
  private static readonly CMsgAddHeader defaultInstance = new CMsgAddHeader().MakeReadOnly();
  private static readonly string[] _cMsgAddHeaderFieldNames = new string[] { "browser_handle", "key", "value" };
  private static readonly uint[] _cMsgAddHeaderFieldTags = new uint[] { 8, 18, 26 };
  public static CMsgAddHeader DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgAddHeader DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgAddHeader ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgAddHeader__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgAddHeader, CMsgAddHeader.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgAddHeader__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int KeyFieldNumber = 2;
  private bool hasKey;
  private string key_ = "";
  public bool HasKey {
    get { return hasKey; }
  }
  public string Key {
    get { return key_; }
  }
  
  public const int ValueFieldNumber = 3;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgAddHeaderFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasKey) {
      output.WriteString(2, field_names[1], Key);
    }
    if (hasValue) {
      output.WriteString(3, field_names[2], Value);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Key);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgAddHeader ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgAddHeader ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgAddHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgAddHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgAddHeader MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgAddHeader prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgAddHeader, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgAddHeader cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgAddHeader result;
    
    private CMsgAddHeader PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgAddHeader original = result;
        result = new CMsgAddHeader();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgAddHeader MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgAddHeader.Descriptor; }
    }
    
    public override CMsgAddHeader DefaultInstanceForType {
      get { return global::CMsgAddHeader.DefaultInstance; }
    }
    
    public override CMsgAddHeader BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgAddHeader) {
        return MergeFrom((CMsgAddHeader) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgAddHeader other) {
      if (other == global::CMsgAddHeader.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgAddHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgAddHeaderFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasKey = input.ReadString(ref result.key_);
            break;
          }
          case 26: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasKey {
      get { return result.hasKey; }
    }
    public string Key {
      get { return result.Key; }
      set { SetKey(value); }
    }
    public Builder SetKey(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKey = true;
      result.key_ = value;
      return this;
    }
    public Builder ClearKey() {
      PrepareBuilder();
      result.hasKey = false;
      result.key_ = "";
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
  }
  static CMsgAddHeader() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgStopLoad : pb::GeneratedMessage<CMsgStopLoad, CMsgStopLoad.Builder> {
  private CMsgStopLoad() { }
  private static readonly CMsgStopLoad defaultInstance = new CMsgStopLoad().MakeReadOnly();
  private static readonly string[] _cMsgStopLoadFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgStopLoadFieldTags = new uint[] { 8 };
  public static CMsgStopLoad DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgStopLoad DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgStopLoad ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgStopLoad__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgStopLoad, CMsgStopLoad.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgStopLoad__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgStopLoadFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgStopLoad ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgStopLoad ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgStopLoad ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStopLoad ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgStopLoad MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgStopLoad prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgStopLoad, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgStopLoad cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgStopLoad result;
    
    private CMsgStopLoad PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgStopLoad original = result;
        result = new CMsgStopLoad();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgStopLoad MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgStopLoad.Descriptor; }
    }
    
    public override CMsgStopLoad DefaultInstanceForType {
      get { return global::CMsgStopLoad.DefaultInstance; }
    }
    
    public override CMsgStopLoad BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgStopLoad) {
        return MergeFrom((CMsgStopLoad) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgStopLoad other) {
      if (other == global::CMsgStopLoad.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgStopLoadFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgStopLoadFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgStopLoad() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgReload : pb::GeneratedMessage<CMsgReload, CMsgReload.Builder> {
  private CMsgReload() { }
  private static readonly CMsgReload defaultInstance = new CMsgReload().MakeReadOnly();
  private static readonly string[] _cMsgReloadFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgReloadFieldTags = new uint[] { 8 };
  public static CMsgReload DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgReload DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgReload ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgReload__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgReload, CMsgReload.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgReload__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgReloadFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgReload ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgReload ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgReload ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgReload ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgReload ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgReload ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgReload ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgReload ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgReload ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgReload ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgReload MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgReload prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgReload, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgReload cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgReload result;
    
    private CMsgReload PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgReload original = result;
        result = new CMsgReload();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgReload MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgReload.Descriptor; }
    }
    
    public override CMsgReload DefaultInstanceForType {
      get { return global::CMsgReload.DefaultInstance; }
    }
    
    public override CMsgReload BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgReload) {
        return MergeFrom((CMsgReload) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgReload other) {
      if (other == global::CMsgReload.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgReloadFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgReloadFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgReload() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGoForward : pb::GeneratedMessage<CMsgGoForward, CMsgGoForward.Builder> {
  private CMsgGoForward() { }
  private static readonly CMsgGoForward defaultInstance = new CMsgGoForward().MakeReadOnly();
  private static readonly string[] _cMsgGoForwardFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgGoForwardFieldTags = new uint[] { 8 };
  public static CMsgGoForward DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGoForward DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGoForward ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgGoForward__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGoForward, CMsgGoForward.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgGoForward__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGoForwardFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGoForward ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGoForward ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGoForward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGoForward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGoForward MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGoForward prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGoForward, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGoForward cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGoForward result;
    
    private CMsgGoForward PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGoForward original = result;
        result = new CMsgGoForward();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGoForward MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGoForward.Descriptor; }
    }
    
    public override CMsgGoForward DefaultInstanceForType {
      get { return global::CMsgGoForward.DefaultInstance; }
    }
    
    public override CMsgGoForward BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGoForward) {
        return MergeFrom((CMsgGoForward) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGoForward other) {
      if (other == global::CMsgGoForward.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGoForwardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGoForwardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgGoForward() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGoBack : pb::GeneratedMessage<CMsgGoBack, CMsgGoBack.Builder> {
  private CMsgGoBack() { }
  private static readonly CMsgGoBack defaultInstance = new CMsgGoBack().MakeReadOnly();
  private static readonly string[] _cMsgGoBackFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgGoBackFieldTags = new uint[] { 8 };
  public static CMsgGoBack DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGoBack DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGoBack ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgGoBack__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGoBack, CMsgGoBack.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgGoBack__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGoBackFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGoBack ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGoBack ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGoBack ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGoBack ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGoBack MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGoBack prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGoBack, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGoBack cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGoBack result;
    
    private CMsgGoBack PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGoBack original = result;
        result = new CMsgGoBack();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGoBack MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGoBack.Descriptor; }
    }
    
    public override CMsgGoBack DefaultInstanceForType {
      get { return global::CMsgGoBack.DefaultInstance; }
    }
    
    public override CMsgGoBack BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGoBack) {
        return MergeFrom((CMsgGoBack) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGoBack other) {
      if (other == global::CMsgGoBack.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGoBackFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGoBackFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgGoBack() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgClearHistory : pb::GeneratedMessage<CMsgClearHistory, CMsgClearHistory.Builder> {
  private CMsgClearHistory() { }
  private static readonly CMsgClearHistory defaultInstance = new CMsgClearHistory().MakeReadOnly();
  private static readonly string[] _cMsgClearHistoryFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgClearHistoryFieldTags = new uint[] { 8 };
  public static CMsgClearHistory DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgClearHistory DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgClearHistory ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgClearHistory__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgClearHistory, CMsgClearHistory.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgClearHistory__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgClearHistoryFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgClearHistory ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgClearHistory ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgClearHistory ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgClearHistory ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgClearHistory MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgClearHistory prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgClearHistory, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgClearHistory cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgClearHistory result;
    
    private CMsgClearHistory PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgClearHistory original = result;
        result = new CMsgClearHistory();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgClearHistory MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgClearHistory.Descriptor; }
    }
    
    public override CMsgClearHistory DefaultInstanceForType {
      get { return global::CMsgClearHistory.DefaultInstance; }
    }
    
    public override CMsgClearHistory BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgClearHistory) {
        return MergeFrom((CMsgClearHistory) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgClearHistory other) {
      if (other == global::CMsgClearHistory.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgClearHistoryFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgClearHistoryFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgClearHistory() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgCopy : pb::GeneratedMessage<CMsgCopy, CMsgCopy.Builder> {
  private CMsgCopy() { }
  private static readonly CMsgCopy defaultInstance = new CMsgCopy().MakeReadOnly();
  private static readonly string[] _cMsgCopyFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgCopyFieldTags = new uint[] { 8 };
  public static CMsgCopy DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgCopy DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgCopy ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgCopy__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgCopy, CMsgCopy.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgCopy__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgCopyFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgCopy ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCopy ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCopy ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCopy ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCopy ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCopy ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgCopy ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgCopy ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgCopy ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCopy ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgCopy MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgCopy prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgCopy, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgCopy cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgCopy result;
    
    private CMsgCopy PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgCopy original = result;
        result = new CMsgCopy();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgCopy MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgCopy.Descriptor; }
    }
    
    public override CMsgCopy DefaultInstanceForType {
      get { return global::CMsgCopy.DefaultInstance; }
    }
    
    public override CMsgCopy BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgCopy) {
        return MergeFrom((CMsgCopy) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgCopy other) {
      if (other == global::CMsgCopy.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgCopyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgCopyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgCopy() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgPaste : pb::GeneratedMessage<CMsgPaste, CMsgPaste.Builder> {
  private CMsgPaste() { }
  private static readonly CMsgPaste defaultInstance = new CMsgPaste().MakeReadOnly();
  private static readonly string[] _cMsgPasteFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgPasteFieldTags = new uint[] { 8 };
  public static CMsgPaste DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgPaste DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgPaste ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgPaste__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgPaste, CMsgPaste.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgPaste__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgPasteFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgPaste ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPaste ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPaste ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPaste ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPaste ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPaste ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgPaste ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgPaste ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgPaste ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPaste ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgPaste MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgPaste prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgPaste, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgPaste cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgPaste result;
    
    private CMsgPaste PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgPaste original = result;
        result = new CMsgPaste();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgPaste MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgPaste.Descriptor; }
    }
    
    public override CMsgPaste DefaultInstanceForType {
      get { return global::CMsgPaste.DefaultInstance; }
    }
    
    public override CMsgPaste BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgPaste) {
        return MergeFrom((CMsgPaste) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgPaste other) {
      if (other == global::CMsgPaste.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgPasteFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgPasteFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgPaste() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgExecuteJavaScript : pb::GeneratedMessage<CMsgExecuteJavaScript, CMsgExecuteJavaScript.Builder> {
  private CMsgExecuteJavaScript() { }
  private static readonly CMsgExecuteJavaScript defaultInstance = new CMsgExecuteJavaScript().MakeReadOnly();
  private static readonly string[] _cMsgExecuteJavaScriptFieldNames = new string[] { "browser_handle", "script" };
  private static readonly uint[] _cMsgExecuteJavaScriptFieldTags = new uint[] { 8, 18 };
  public static CMsgExecuteJavaScript DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgExecuteJavaScript DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgExecuteJavaScript ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgExecuteJavaScript__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgExecuteJavaScript, CMsgExecuteJavaScript.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgExecuteJavaScript__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ScriptFieldNumber = 2;
  private bool hasScript;
  private string script_ = "";
  public bool HasScript {
    get { return hasScript; }
  }
  public string Script {
    get { return script_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgExecuteJavaScriptFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasScript) {
      output.WriteString(2, field_names[1], Script);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasScript) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Script);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgExecuteJavaScript ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgExecuteJavaScript ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgExecuteJavaScript MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgExecuteJavaScript prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgExecuteJavaScript, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgExecuteJavaScript cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgExecuteJavaScript result;
    
    private CMsgExecuteJavaScript PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgExecuteJavaScript original = result;
        result = new CMsgExecuteJavaScript();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgExecuteJavaScript MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgExecuteJavaScript.Descriptor; }
    }
    
    public override CMsgExecuteJavaScript DefaultInstanceForType {
      get { return global::CMsgExecuteJavaScript.DefaultInstance; }
    }
    
    public override CMsgExecuteJavaScript BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgExecuteJavaScript) {
        return MergeFrom((CMsgExecuteJavaScript) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgExecuteJavaScript other) {
      if (other == global::CMsgExecuteJavaScript.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasScript) {
        Script = other.Script;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgExecuteJavaScriptFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgExecuteJavaScriptFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasScript = input.ReadString(ref result.script_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasScript {
      get { return result.hasScript; }
    }
    public string Script {
      get { return result.Script; }
      set { SetScript(value); }
    }
    public Builder SetScript(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasScript = true;
      result.script_ = value;
      return this;
    }
    public Builder ClearScript() {
      PrepareBuilder();
      result.hasScript = false;
      result.script_ = "";
      return this;
    }
  }
  static CMsgExecuteJavaScript() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetFocus : pb::GeneratedMessage<CMsgSetFocus, CMsgSetFocus.Builder> {
  private CMsgSetFocus() { }
  private static readonly CMsgSetFocus defaultInstance = new CMsgSetFocus().MakeReadOnly();
  private static readonly string[] _cMsgSetFocusFieldNames = new string[] { "browser_handle", "focus" };
  private static readonly uint[] _cMsgSetFocusFieldTags = new uint[] { 8, 16 };
  public static CMsgSetFocus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetFocus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetFocus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetFocus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetFocus, CMsgSetFocus.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetFocus__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int FocusFieldNumber = 2;
  private bool hasFocus;
  private bool focus_;
  public bool HasFocus {
    get { return hasFocus; }
  }
  public bool Focus {
    get { return focus_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetFocusFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasFocus) {
      output.WriteBool(2, field_names[1], Focus);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasFocus) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Focus);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetFocus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetFocus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetFocus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetFocus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetFocus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetFocus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetFocus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetFocus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetFocus result;
    
    private CMsgSetFocus PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetFocus original = result;
        result = new CMsgSetFocus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetFocus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetFocus.Descriptor; }
    }
    
    public override CMsgSetFocus DefaultInstanceForType {
      get { return global::CMsgSetFocus.DefaultInstance; }
    }
    
    public override CMsgSetFocus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetFocus) {
        return MergeFrom((CMsgSetFocus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetFocus other) {
      if (other == global::CMsgSetFocus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasFocus) {
        Focus = other.Focus;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetFocusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetFocusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasFocus = input.ReadBool(ref result.focus_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasFocus {
      get { return result.hasFocus; }
    }
    public bool Focus {
      get { return result.Focus; }
      set { SetFocus(value); }
    }
    public Builder SetFocus(bool value) {
      PrepareBuilder();
      result.hasFocus = true;
      result.focus_ = value;
      return this;
    }
    public Builder ClearFocus() {
      PrepareBuilder();
      result.hasFocus = false;
      result.focus_ = false;
      return this;
    }
  }
  static CMsgSetFocus() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgHorizontalScrollBarSize : pb::GeneratedMessage<CMsgHorizontalScrollBarSize, CMsgHorizontalScrollBarSize.Builder> {
  private CMsgHorizontalScrollBarSize() { }
  private static readonly CMsgHorizontalScrollBarSize defaultInstance = new CMsgHorizontalScrollBarSize().MakeReadOnly();
  private static readonly string[] _cMsgHorizontalScrollBarSizeFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgHorizontalScrollBarSizeFieldTags = new uint[] { 8 };
  public static CMsgHorizontalScrollBarSize DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgHorizontalScrollBarSize DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgHorizontalScrollBarSize ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgHorizontalScrollBarSize__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgHorizontalScrollBarSize, CMsgHorizontalScrollBarSize.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgHorizontalScrollBarSize__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgHorizontalScrollBarSizeFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgHorizontalScrollBarSize ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSize ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgHorizontalScrollBarSize MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgHorizontalScrollBarSize prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgHorizontalScrollBarSize, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgHorizontalScrollBarSize cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgHorizontalScrollBarSize result;
    
    private CMsgHorizontalScrollBarSize PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgHorizontalScrollBarSize original = result;
        result = new CMsgHorizontalScrollBarSize();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgHorizontalScrollBarSize MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgHorizontalScrollBarSize.Descriptor; }
    }
    
    public override CMsgHorizontalScrollBarSize DefaultInstanceForType {
      get { return global::CMsgHorizontalScrollBarSize.DefaultInstance; }
    }
    
    public override CMsgHorizontalScrollBarSize BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgHorizontalScrollBarSize) {
        return MergeFrom((CMsgHorizontalScrollBarSize) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgHorizontalScrollBarSize other) {
      if (other == global::CMsgHorizontalScrollBarSize.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgHorizontalScrollBarSizeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgHorizontalScrollBarSizeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgHorizontalScrollBarSize() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgHorizontalScrollBarSizeResponse : pb::GeneratedMessage<CMsgHorizontalScrollBarSizeResponse, CMsgHorizontalScrollBarSizeResponse.Builder> {
  private CMsgHorizontalScrollBarSizeResponse() { }
  private static readonly CMsgHorizontalScrollBarSizeResponse defaultInstance = new CMsgHorizontalScrollBarSizeResponse().MakeReadOnly();
  private static readonly string[] _cMsgHorizontalScrollBarSizeResponseFieldNames = new string[] { "browser_handle", "scroll", "scroll_max", "tall", "visible", "wide", "x", "y", "zoom" };
  private static readonly uint[] _cMsgHorizontalScrollBarSizeResponseFieldTags = new uint[] { 8, 56, 48, 40, 72, 32, 16, 24, 69 };
  public static CMsgHorizontalScrollBarSizeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgHorizontalScrollBarSizeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgHorizontalScrollBarSizeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgHorizontalScrollBarSizeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgHorizontalScrollBarSizeResponse, CMsgHorizontalScrollBarSizeResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgHorizontalScrollBarSizeResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public const int WideFieldNumber = 4;
  private bool hasWide;
  private uint wide_;
  public bool HasWide {
    get { return hasWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wide {
    get { return wide_; }
  }
  
  public const int TallFieldNumber = 5;
  private bool hasTall;
  private uint tall_;
  public bool HasTall {
    get { return hasTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tall {
    get { return tall_; }
  }
  
  public const int ScrollMaxFieldNumber = 6;
  private bool hasScrollMax;
  private uint scrollMax_;
  public bool HasScrollMax {
    get { return hasScrollMax; }
  }
  [global::System.CLSCompliant(false)]
  public uint ScrollMax {
    get { return scrollMax_; }
  }
  
  public const int ScrollFieldNumber = 7;
  private bool hasScroll;
  private uint scroll_;
  public bool HasScroll {
    get { return hasScroll; }
  }
  [global::System.CLSCompliant(false)]
  public uint Scroll {
    get { return scroll_; }
  }
  
  public const int ZoomFieldNumber = 8;
  private bool hasZoom;
  private float zoom_;
  public bool HasZoom {
    get { return hasZoom; }
  }
  public float Zoom {
    get { return zoom_; }
  }
  
  public const int VisibleFieldNumber = 9;
  private bool hasVisible;
  private bool visible_;
  public bool HasVisible {
    get { return hasVisible; }
  }
  public bool Visible {
    get { return visible_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgHorizontalScrollBarSizeResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[6], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[7], Y);
    }
    if (hasWide) {
      output.WriteUInt32(4, field_names[5], Wide);
    }
    if (hasTall) {
      output.WriteUInt32(5, field_names[3], Tall);
    }
    if (hasScrollMax) {
      output.WriteUInt32(6, field_names[2], ScrollMax);
    }
    if (hasScroll) {
      output.WriteUInt32(7, field_names[1], Scroll);
    }
    if (hasZoom) {
      output.WriteFloat(8, field_names[8], Zoom);
    }
    if (hasVisible) {
      output.WriteBool(9, field_names[4], Visible);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      if (hasWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Wide);
      }
      if (hasTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Tall);
      }
      if (hasScrollMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ScrollMax);
      }
      if (hasScroll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Scroll);
      }
      if (hasZoom) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, Zoom);
      }
      if (hasVisible) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, Visible);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHorizontalScrollBarSizeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgHorizontalScrollBarSizeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgHorizontalScrollBarSizeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgHorizontalScrollBarSizeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgHorizontalScrollBarSizeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgHorizontalScrollBarSizeResponse result;
    
    private CMsgHorizontalScrollBarSizeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgHorizontalScrollBarSizeResponse original = result;
        result = new CMsgHorizontalScrollBarSizeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgHorizontalScrollBarSizeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgHorizontalScrollBarSizeResponse.Descriptor; }
    }
    
    public override CMsgHorizontalScrollBarSizeResponse DefaultInstanceForType {
      get { return global::CMsgHorizontalScrollBarSizeResponse.DefaultInstance; }
    }
    
    public override CMsgHorizontalScrollBarSizeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgHorizontalScrollBarSizeResponse) {
        return MergeFrom((CMsgHorizontalScrollBarSizeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgHorizontalScrollBarSizeResponse other) {
      if (other == global::CMsgHorizontalScrollBarSizeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasWide) {
        Wide = other.Wide;
      }
      if (other.HasTall) {
        Tall = other.Tall;
      }
      if (other.HasScrollMax) {
        ScrollMax = other.ScrollMax;
      }
      if (other.HasScroll) {
        Scroll = other.Scroll;
      }
      if (other.HasZoom) {
        Zoom = other.Zoom;
      }
      if (other.HasVisible) {
        Visible = other.Visible;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgHorizontalScrollBarSizeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgHorizontalScrollBarSizeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
          case 32: {
            result.hasWide = input.ReadUInt32(ref result.wide_);
            break;
          }
          case 40: {
            result.hasTall = input.ReadUInt32(ref result.tall_);
            break;
          }
          case 48: {
            result.hasScrollMax = input.ReadUInt32(ref result.scrollMax_);
            break;
          }
          case 56: {
            result.hasScroll = input.ReadUInt32(ref result.scroll_);
            break;
          }
          case 69: {
            result.hasZoom = input.ReadFloat(ref result.zoom_);
            break;
          }
          case 72: {
            result.hasVisible = input.ReadBool(ref result.visible_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public bool HasWide {
      get { return result.hasWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wide {
      get { return result.Wide; }
      set { SetWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWide(uint value) {
      PrepareBuilder();
      result.hasWide = true;
      result.wide_ = value;
      return this;
    }
    public Builder ClearWide() {
      PrepareBuilder();
      result.hasWide = false;
      result.wide_ = 0;
      return this;
    }
    
    public bool HasTall {
      get { return result.hasTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tall {
      get { return result.Tall; }
      set { SetTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTall(uint value) {
      PrepareBuilder();
      result.hasTall = true;
      result.tall_ = value;
      return this;
    }
    public Builder ClearTall() {
      PrepareBuilder();
      result.hasTall = false;
      result.tall_ = 0;
      return this;
    }
    
    public bool HasScrollMax {
      get { return result.hasScrollMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint ScrollMax {
      get { return result.ScrollMax; }
      set { SetScrollMax(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScrollMax(uint value) {
      PrepareBuilder();
      result.hasScrollMax = true;
      result.scrollMax_ = value;
      return this;
    }
    public Builder ClearScrollMax() {
      PrepareBuilder();
      result.hasScrollMax = false;
      result.scrollMax_ = 0;
      return this;
    }
    
    public bool HasScroll {
      get { return result.hasScroll; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scroll {
      get { return result.Scroll; }
      set { SetScroll(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScroll(uint value) {
      PrepareBuilder();
      result.hasScroll = true;
      result.scroll_ = value;
      return this;
    }
    public Builder ClearScroll() {
      PrepareBuilder();
      result.hasScroll = false;
      result.scroll_ = 0;
      return this;
    }
    
    public bool HasZoom {
      get { return result.hasZoom; }
    }
    public float Zoom {
      get { return result.Zoom; }
      set { SetZoom(value); }
    }
    public Builder SetZoom(float value) {
      PrepareBuilder();
      result.hasZoom = true;
      result.zoom_ = value;
      return this;
    }
    public Builder ClearZoom() {
      PrepareBuilder();
      result.hasZoom = false;
      result.zoom_ = 0F;
      return this;
    }
    
    public bool HasVisible {
      get { return result.hasVisible; }
    }
    public bool Visible {
      get { return result.Visible; }
      set { SetVisible(value); }
    }
    public Builder SetVisible(bool value) {
      PrepareBuilder();
      result.hasVisible = true;
      result.visible_ = value;
      return this;
    }
    public Builder ClearVisible() {
      PrepareBuilder();
      result.hasVisible = false;
      result.visible_ = false;
      return this;
    }
  }
  static CMsgHorizontalScrollBarSizeResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgVerticalScrollBarSize : pb::GeneratedMessage<CMsgVerticalScrollBarSize, CMsgVerticalScrollBarSize.Builder> {
  private CMsgVerticalScrollBarSize() { }
  private static readonly CMsgVerticalScrollBarSize defaultInstance = new CMsgVerticalScrollBarSize().MakeReadOnly();
  private static readonly string[] _cMsgVerticalScrollBarSizeFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgVerticalScrollBarSizeFieldTags = new uint[] { 8 };
  public static CMsgVerticalScrollBarSize DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgVerticalScrollBarSize DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgVerticalScrollBarSize ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgVerticalScrollBarSize__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgVerticalScrollBarSize, CMsgVerticalScrollBarSize.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgVerticalScrollBarSize__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgVerticalScrollBarSizeFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgVerticalScrollBarSize ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSize ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgVerticalScrollBarSize MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgVerticalScrollBarSize prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgVerticalScrollBarSize, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgVerticalScrollBarSize cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgVerticalScrollBarSize result;
    
    private CMsgVerticalScrollBarSize PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgVerticalScrollBarSize original = result;
        result = new CMsgVerticalScrollBarSize();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgVerticalScrollBarSize MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgVerticalScrollBarSize.Descriptor; }
    }
    
    public override CMsgVerticalScrollBarSize DefaultInstanceForType {
      get { return global::CMsgVerticalScrollBarSize.DefaultInstance; }
    }
    
    public override CMsgVerticalScrollBarSize BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgVerticalScrollBarSize) {
        return MergeFrom((CMsgVerticalScrollBarSize) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgVerticalScrollBarSize other) {
      if (other == global::CMsgVerticalScrollBarSize.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgVerticalScrollBarSizeFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgVerticalScrollBarSizeFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgVerticalScrollBarSize() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgVerticalScrollBarSizeResponse : pb::GeneratedMessage<CMsgVerticalScrollBarSizeResponse, CMsgVerticalScrollBarSizeResponse.Builder> {
  private CMsgVerticalScrollBarSizeResponse() { }
  private static readonly CMsgVerticalScrollBarSizeResponse defaultInstance = new CMsgVerticalScrollBarSizeResponse().MakeReadOnly();
  private static readonly string[] _cMsgVerticalScrollBarSizeResponseFieldNames = new string[] { "browser_handle", "scroll", "scroll_max", "tall", "visible", "wide", "x", "y", "zoom" };
  private static readonly uint[] _cMsgVerticalScrollBarSizeResponseFieldTags = new uint[] { 8, 56, 48, 40, 72, 32, 16, 24, 69 };
  public static CMsgVerticalScrollBarSizeResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgVerticalScrollBarSizeResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgVerticalScrollBarSizeResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgVerticalScrollBarSizeResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgVerticalScrollBarSizeResponse, CMsgVerticalScrollBarSizeResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgVerticalScrollBarSizeResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public const int WideFieldNumber = 4;
  private bool hasWide;
  private uint wide_;
  public bool HasWide {
    get { return hasWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wide {
    get { return wide_; }
  }
  
  public const int TallFieldNumber = 5;
  private bool hasTall;
  private uint tall_;
  public bool HasTall {
    get { return hasTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tall {
    get { return tall_; }
  }
  
  public const int ScrollMaxFieldNumber = 6;
  private bool hasScrollMax;
  private uint scrollMax_;
  public bool HasScrollMax {
    get { return hasScrollMax; }
  }
  [global::System.CLSCompliant(false)]
  public uint ScrollMax {
    get { return scrollMax_; }
  }
  
  public const int ScrollFieldNumber = 7;
  private bool hasScroll;
  private uint scroll_;
  public bool HasScroll {
    get { return hasScroll; }
  }
  [global::System.CLSCompliant(false)]
  public uint Scroll {
    get { return scroll_; }
  }
  
  public const int ZoomFieldNumber = 8;
  private bool hasZoom;
  private float zoom_;
  public bool HasZoom {
    get { return hasZoom; }
  }
  public float Zoom {
    get { return zoom_; }
  }
  
  public const int VisibleFieldNumber = 9;
  private bool hasVisible;
  private bool visible_;
  public bool HasVisible {
    get { return hasVisible; }
  }
  public bool Visible {
    get { return visible_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgVerticalScrollBarSizeResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[6], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[7], Y);
    }
    if (hasWide) {
      output.WriteUInt32(4, field_names[5], Wide);
    }
    if (hasTall) {
      output.WriteUInt32(5, field_names[3], Tall);
    }
    if (hasScrollMax) {
      output.WriteUInt32(6, field_names[2], ScrollMax);
    }
    if (hasScroll) {
      output.WriteUInt32(7, field_names[1], Scroll);
    }
    if (hasZoom) {
      output.WriteFloat(8, field_names[8], Zoom);
    }
    if (hasVisible) {
      output.WriteBool(9, field_names[4], Visible);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      if (hasWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Wide);
      }
      if (hasTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Tall);
      }
      if (hasScrollMax) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, ScrollMax);
      }
      if (hasScroll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Scroll);
      }
      if (hasZoom) {
        size += pb::CodedOutputStream.ComputeFloatSize(8, Zoom);
      }
      if (hasVisible) {
        size += pb::CodedOutputStream.ComputeBoolSize(9, Visible);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgVerticalScrollBarSizeResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgVerticalScrollBarSizeResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgVerticalScrollBarSizeResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgVerticalScrollBarSizeResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgVerticalScrollBarSizeResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgVerticalScrollBarSizeResponse result;
    
    private CMsgVerticalScrollBarSizeResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgVerticalScrollBarSizeResponse original = result;
        result = new CMsgVerticalScrollBarSizeResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgVerticalScrollBarSizeResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgVerticalScrollBarSizeResponse.Descriptor; }
    }
    
    public override CMsgVerticalScrollBarSizeResponse DefaultInstanceForType {
      get { return global::CMsgVerticalScrollBarSizeResponse.DefaultInstance; }
    }
    
    public override CMsgVerticalScrollBarSizeResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgVerticalScrollBarSizeResponse) {
        return MergeFrom((CMsgVerticalScrollBarSizeResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgVerticalScrollBarSizeResponse other) {
      if (other == global::CMsgVerticalScrollBarSizeResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasWide) {
        Wide = other.Wide;
      }
      if (other.HasTall) {
        Tall = other.Tall;
      }
      if (other.HasScrollMax) {
        ScrollMax = other.ScrollMax;
      }
      if (other.HasScroll) {
        Scroll = other.Scroll;
      }
      if (other.HasZoom) {
        Zoom = other.Zoom;
      }
      if (other.HasVisible) {
        Visible = other.Visible;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgVerticalScrollBarSizeResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgVerticalScrollBarSizeResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
          case 32: {
            result.hasWide = input.ReadUInt32(ref result.wide_);
            break;
          }
          case 40: {
            result.hasTall = input.ReadUInt32(ref result.tall_);
            break;
          }
          case 48: {
            result.hasScrollMax = input.ReadUInt32(ref result.scrollMax_);
            break;
          }
          case 56: {
            result.hasScroll = input.ReadUInt32(ref result.scroll_);
            break;
          }
          case 69: {
            result.hasZoom = input.ReadFloat(ref result.zoom_);
            break;
          }
          case 72: {
            result.hasVisible = input.ReadBool(ref result.visible_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public bool HasWide {
      get { return result.hasWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wide {
      get { return result.Wide; }
      set { SetWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWide(uint value) {
      PrepareBuilder();
      result.hasWide = true;
      result.wide_ = value;
      return this;
    }
    public Builder ClearWide() {
      PrepareBuilder();
      result.hasWide = false;
      result.wide_ = 0;
      return this;
    }
    
    public bool HasTall {
      get { return result.hasTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tall {
      get { return result.Tall; }
      set { SetTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTall(uint value) {
      PrepareBuilder();
      result.hasTall = true;
      result.tall_ = value;
      return this;
    }
    public Builder ClearTall() {
      PrepareBuilder();
      result.hasTall = false;
      result.tall_ = 0;
      return this;
    }
    
    public bool HasScrollMax {
      get { return result.hasScrollMax; }
    }
    [global::System.CLSCompliant(false)]
    public uint ScrollMax {
      get { return result.ScrollMax; }
      set { SetScrollMax(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScrollMax(uint value) {
      PrepareBuilder();
      result.hasScrollMax = true;
      result.scrollMax_ = value;
      return this;
    }
    public Builder ClearScrollMax() {
      PrepareBuilder();
      result.hasScrollMax = false;
      result.scrollMax_ = 0;
      return this;
    }
    
    public bool HasScroll {
      get { return result.hasScroll; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scroll {
      get { return result.Scroll; }
      set { SetScroll(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScroll(uint value) {
      PrepareBuilder();
      result.hasScroll = true;
      result.scroll_ = value;
      return this;
    }
    public Builder ClearScroll() {
      PrepareBuilder();
      result.hasScroll = false;
      result.scroll_ = 0;
      return this;
    }
    
    public bool HasZoom {
      get { return result.hasZoom; }
    }
    public float Zoom {
      get { return result.Zoom; }
      set { SetZoom(value); }
    }
    public Builder SetZoom(float value) {
      PrepareBuilder();
      result.hasZoom = true;
      result.zoom_ = value;
      return this;
    }
    public Builder ClearZoom() {
      PrepareBuilder();
      result.hasZoom = false;
      result.zoom_ = 0F;
      return this;
    }
    
    public bool HasVisible {
      get { return result.hasVisible; }
    }
    public bool Visible {
      get { return result.Visible; }
      set { SetVisible(value); }
    }
    public Builder SetVisible(bool value) {
      PrepareBuilder();
      result.hasVisible = true;
      result.visible_ = value;
      return this;
    }
    public Builder ClearVisible() {
      PrepareBuilder();
      result.hasVisible = false;
      result.visible_ = false;
      return this;
    }
  }
  static CMsgVerticalScrollBarSizeResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFind : pb::GeneratedMessage<CMsgFind, CMsgFind.Builder> {
  private CMsgFind() { }
  private static readonly CMsgFind defaultInstance = new CMsgFind().MakeReadOnly();
  private static readonly string[] _cMsgFindFieldNames = new string[] { "browser_handle", "find", "infind", "reverse" };
  private static readonly uint[] _cMsgFindFieldTags = new uint[] { 8, 18, 24, 32 };
  public static CMsgFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFind, CMsgFind.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFind__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int FindFieldNumber = 2;
  private bool hasFind;
  private string find_ = "";
  public bool HasFind {
    get { return hasFind; }
  }
  public string Find {
    get { return find_; }
  }
  
  public const int InfindFieldNumber = 3;
  private bool hasInfind;
  private bool infind_;
  public bool HasInfind {
    get { return hasInfind; }
  }
  public bool Infind {
    get { return infind_; }
  }
  
  public const int ReverseFieldNumber = 4;
  private bool hasReverse;
  private bool reverse_;
  public bool HasReverse {
    get { return hasReverse; }
  }
  public bool Reverse {
    get { return reverse_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFindFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasFind) {
      output.WriteString(2, field_names[1], Find);
    }
    if (hasInfind) {
      output.WriteBool(3, field_names[2], Infind);
    }
    if (hasReverse) {
      output.WriteBool(4, field_names[3], Reverse);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasFind) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Find);
      }
      if (hasInfind) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Infind);
      }
      if (hasReverse) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, Reverse);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFind result;
    
    private CMsgFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFind original = result;
        result = new CMsgFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFind.Descriptor; }
    }
    
    public override CMsgFind DefaultInstanceForType {
      get { return global::CMsgFind.DefaultInstance; }
    }
    
    public override CMsgFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFind) {
        return MergeFrom((CMsgFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFind other) {
      if (other == global::CMsgFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasFind) {
        Find = other.Find;
      }
      if (other.HasInfind) {
        Infind = other.Infind;
      }
      if (other.HasReverse) {
        Reverse = other.Reverse;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasFind = input.ReadString(ref result.find_);
            break;
          }
          case 24: {
            result.hasInfind = input.ReadBool(ref result.infind_);
            break;
          }
          case 32: {
            result.hasReverse = input.ReadBool(ref result.reverse_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasFind {
      get { return result.hasFind; }
    }
    public string Find {
      get { return result.Find; }
      set { SetFind(value); }
    }
    public Builder SetFind(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFind = true;
      result.find_ = value;
      return this;
    }
    public Builder ClearFind() {
      PrepareBuilder();
      result.hasFind = false;
      result.find_ = "";
      return this;
    }
    
    public bool HasInfind {
      get { return result.hasInfind; }
    }
    public bool Infind {
      get { return result.Infind; }
      set { SetInfind(value); }
    }
    public Builder SetInfind(bool value) {
      PrepareBuilder();
      result.hasInfind = true;
      result.infind_ = value;
      return this;
    }
    public Builder ClearInfind() {
      PrepareBuilder();
      result.hasInfind = false;
      result.infind_ = false;
      return this;
    }
    
    public bool HasReverse {
      get { return result.hasReverse; }
    }
    public bool Reverse {
      get { return result.Reverse; }
      set { SetReverse(value); }
    }
    public Builder SetReverse(bool value) {
      PrepareBuilder();
      result.hasReverse = true;
      result.reverse_ = value;
      return this;
    }
    public Builder ClearReverse() {
      PrepareBuilder();
      result.hasReverse = false;
      result.reverse_ = false;
      return this;
    }
  }
  static CMsgFind() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgStopFind : pb::GeneratedMessage<CMsgStopFind, CMsgStopFind.Builder> {
  private CMsgStopFind() { }
  private static readonly CMsgStopFind defaultInstance = new CMsgStopFind().MakeReadOnly();
  private static readonly string[] _cMsgStopFindFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgStopFindFieldTags = new uint[] { 8 };
  public static CMsgStopFind DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgStopFind DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgStopFind ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgStopFind__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgStopFind, CMsgStopFind.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgStopFind__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgStopFindFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgStopFind ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgStopFind ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgStopFind ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStopFind ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgStopFind MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgStopFind prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgStopFind, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgStopFind cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgStopFind result;
    
    private CMsgStopFind PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgStopFind original = result;
        result = new CMsgStopFind();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgStopFind MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgStopFind.Descriptor; }
    }
    
    public override CMsgStopFind DefaultInstanceForType {
      get { return global::CMsgStopFind.DefaultInstance; }
    }
    
    public override CMsgStopFind BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgStopFind) {
        return MergeFrom((CMsgStopFind) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgStopFind other) {
      if (other == global::CMsgStopFind.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgStopFindFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgStopFindFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgStopFind() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetHorizontalScroll : pb::GeneratedMessage<CMsgSetHorizontalScroll, CMsgSetHorizontalScroll.Builder> {
  private CMsgSetHorizontalScroll() { }
  private static readonly CMsgSetHorizontalScroll defaultInstance = new CMsgSetHorizontalScroll().MakeReadOnly();
  private static readonly string[] _cMsgSetHorizontalScrollFieldNames = new string[] { "browser_handle", "scroll" };
  private static readonly uint[] _cMsgSetHorizontalScrollFieldTags = new uint[] { 8, 16 };
  public static CMsgSetHorizontalScroll DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetHorizontalScroll DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetHorizontalScroll ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetHorizontalScroll__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetHorizontalScroll, CMsgSetHorizontalScroll.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetHorizontalScroll__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ScrollFieldNumber = 2;
  private bool hasScroll;
  private uint scroll_;
  public bool HasScroll {
    get { return hasScroll; }
  }
  [global::System.CLSCompliant(false)]
  public uint Scroll {
    get { return scroll_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetHorizontalScrollFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasScroll) {
      output.WriteUInt32(2, field_names[1], Scroll);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasScroll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Scroll);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetHorizontalScroll ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetHorizontalScroll ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetHorizontalScroll MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetHorizontalScroll prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetHorizontalScroll, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetHorizontalScroll cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetHorizontalScroll result;
    
    private CMsgSetHorizontalScroll PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetHorizontalScroll original = result;
        result = new CMsgSetHorizontalScroll();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetHorizontalScroll MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetHorizontalScroll.Descriptor; }
    }
    
    public override CMsgSetHorizontalScroll DefaultInstanceForType {
      get { return global::CMsgSetHorizontalScroll.DefaultInstance; }
    }
    
    public override CMsgSetHorizontalScroll BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetHorizontalScroll) {
        return MergeFrom((CMsgSetHorizontalScroll) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetHorizontalScroll other) {
      if (other == global::CMsgSetHorizontalScroll.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasScroll) {
        Scroll = other.Scroll;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetHorizontalScrollFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetHorizontalScrollFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasScroll = input.ReadUInt32(ref result.scroll_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasScroll {
      get { return result.hasScroll; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scroll {
      get { return result.Scroll; }
      set { SetScroll(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScroll(uint value) {
      PrepareBuilder();
      result.hasScroll = true;
      result.scroll_ = value;
      return this;
    }
    public Builder ClearScroll() {
      PrepareBuilder();
      result.hasScroll = false;
      result.scroll_ = 0;
      return this;
    }
  }
  static CMsgSetHorizontalScroll() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetVerticalScroll : pb::GeneratedMessage<CMsgSetVerticalScroll, CMsgSetVerticalScroll.Builder> {
  private CMsgSetVerticalScroll() { }
  private static readonly CMsgSetVerticalScroll defaultInstance = new CMsgSetVerticalScroll().MakeReadOnly();
  private static readonly string[] _cMsgSetVerticalScrollFieldNames = new string[] { "browser_handle", "scroll" };
  private static readonly uint[] _cMsgSetVerticalScrollFieldTags = new uint[] { 8, 16 };
  public static CMsgSetVerticalScroll DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetVerticalScroll DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetVerticalScroll ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetVerticalScroll__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetVerticalScroll, CMsgSetVerticalScroll.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetVerticalScroll__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ScrollFieldNumber = 2;
  private bool hasScroll;
  private uint scroll_;
  public bool HasScroll {
    get { return hasScroll; }
  }
  [global::System.CLSCompliant(false)]
  public uint Scroll {
    get { return scroll_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetVerticalScrollFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasScroll) {
      output.WriteUInt32(2, field_names[1], Scroll);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasScroll) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Scroll);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetVerticalScroll ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetVerticalScroll ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetVerticalScroll MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetVerticalScroll prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetVerticalScroll, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetVerticalScroll cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetVerticalScroll result;
    
    private CMsgSetVerticalScroll PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetVerticalScroll original = result;
        result = new CMsgSetVerticalScroll();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetVerticalScroll MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetVerticalScroll.Descriptor; }
    }
    
    public override CMsgSetVerticalScroll DefaultInstanceForType {
      get { return global::CMsgSetVerticalScroll.DefaultInstance; }
    }
    
    public override CMsgSetVerticalScroll BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetVerticalScroll) {
        return MergeFrom((CMsgSetVerticalScroll) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetVerticalScroll other) {
      if (other == global::CMsgSetVerticalScroll.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasScroll) {
        Scroll = other.Scroll;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetVerticalScrollFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetVerticalScrollFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasScroll = input.ReadUInt32(ref result.scroll_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasScroll {
      get { return result.hasScroll; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scroll {
      get { return result.Scroll; }
      set { SetScroll(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScroll(uint value) {
      PrepareBuilder();
      result.hasScroll = true;
      result.scroll_ = value;
      return this;
    }
    public Builder ClearScroll() {
      PrepareBuilder();
      result.hasScroll = false;
      result.scroll_ = 0;
      return this;
    }
  }
  static CMsgSetVerticalScroll() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetZoomLevel : pb::GeneratedMessage<CMsgSetZoomLevel, CMsgSetZoomLevel.Builder> {
  private CMsgSetZoomLevel() { }
  private static readonly CMsgSetZoomLevel defaultInstance = new CMsgSetZoomLevel().MakeReadOnly();
  private static readonly string[] _cMsgSetZoomLevelFieldNames = new string[] { "browser_handle", "zoom" };
  private static readonly uint[] _cMsgSetZoomLevelFieldTags = new uint[] { 8, 21 };
  public static CMsgSetZoomLevel DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetZoomLevel DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetZoomLevel ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetZoomLevel__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetZoomLevel, CMsgSetZoomLevel.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetZoomLevel__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ZoomFieldNumber = 2;
  private bool hasZoom;
  private float zoom_;
  public bool HasZoom {
    get { return hasZoom; }
  }
  public float Zoom {
    get { return zoom_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetZoomLevelFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasZoom) {
      output.WriteFloat(2, field_names[1], Zoom);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasZoom) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Zoom);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetZoomLevel ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetZoomLevel ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetZoomLevel MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetZoomLevel prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetZoomLevel, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetZoomLevel cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetZoomLevel result;
    
    private CMsgSetZoomLevel PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetZoomLevel original = result;
        result = new CMsgSetZoomLevel();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetZoomLevel MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetZoomLevel.Descriptor; }
    }
    
    public override CMsgSetZoomLevel DefaultInstanceForType {
      get { return global::CMsgSetZoomLevel.DefaultInstance; }
    }
    
    public override CMsgSetZoomLevel BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetZoomLevel) {
        return MergeFrom((CMsgSetZoomLevel) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetZoomLevel other) {
      if (other == global::CMsgSetZoomLevel.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasZoom) {
        Zoom = other.Zoom;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetZoomLevelFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetZoomLevelFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 21: {
            result.hasZoom = input.ReadFloat(ref result.zoom_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasZoom {
      get { return result.hasZoom; }
    }
    public float Zoom {
      get { return result.Zoom; }
      set { SetZoom(value); }
    }
    public Builder SetZoom(float value) {
      PrepareBuilder();
      result.hasZoom = true;
      result.zoom_ = value;
      return this;
    }
    public Builder ClearZoom() {
      PrepareBuilder();
      result.hasZoom = false;
      result.zoom_ = 0F;
      return this;
    }
  }
  static CMsgSetZoomLevel() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgViewSource : pb::GeneratedMessage<CMsgViewSource, CMsgViewSource.Builder> {
  private CMsgViewSource() { }
  private static readonly CMsgViewSource defaultInstance = new CMsgViewSource().MakeReadOnly();
  private static readonly string[] _cMsgViewSourceFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgViewSourceFieldTags = new uint[] { 8 };
  public static CMsgViewSource DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgViewSource DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgViewSource ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgViewSource__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgViewSource, CMsgViewSource.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgViewSource__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgViewSourceFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgViewSource ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgViewSource ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgViewSource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgViewSource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgViewSource MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgViewSource prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgViewSource, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgViewSource cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgViewSource result;
    
    private CMsgViewSource PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgViewSource original = result;
        result = new CMsgViewSource();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgViewSource MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgViewSource.Descriptor; }
    }
    
    public override CMsgViewSource DefaultInstanceForType {
      get { return global::CMsgViewSource.DefaultInstance; }
    }
    
    public override CMsgViewSource BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgViewSource) {
        return MergeFrom((CMsgViewSource) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgViewSource other) {
      if (other == global::CMsgViewSource.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgViewSourceFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgViewSourceFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgViewSource() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgBrowserReady : pb::GeneratedMessage<CMsgBrowserReady, CMsgBrowserReady.Builder> {
  private CMsgBrowserReady() { }
  private static readonly CMsgBrowserReady defaultInstance = new CMsgBrowserReady().MakeReadOnly();
  private static readonly string[] _cMsgBrowserReadyFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgBrowserReadyFieldTags = new uint[] { 8 };
  public static CMsgBrowserReady DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgBrowserReady DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgBrowserReady ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgBrowserReady__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgBrowserReady, CMsgBrowserReady.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgBrowserReady__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgBrowserReadyFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgBrowserReady ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgBrowserReady ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgBrowserReady ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgBrowserReady ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgBrowserReady MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgBrowserReady prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgBrowserReady, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgBrowserReady cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgBrowserReady result;
    
    private CMsgBrowserReady PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgBrowserReady original = result;
        result = new CMsgBrowserReady();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgBrowserReady MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgBrowserReady.Descriptor; }
    }
    
    public override CMsgBrowserReady DefaultInstanceForType {
      get { return global::CMsgBrowserReady.DefaultInstance; }
    }
    
    public override CMsgBrowserReady BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgBrowserReady) {
        return MergeFrom((CMsgBrowserReady) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgBrowserReady other) {
      if (other == global::CMsgBrowserReady.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgBrowserReadyFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgBrowserReadyFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgBrowserReady() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgURLChanged : pb::GeneratedMessage<CMsgURLChanged, CMsgURLChanged.Builder> {
  private CMsgURLChanged() { }
  private static readonly CMsgURLChanged defaultInstance = new CMsgURLChanged().MakeReadOnly();
  private static readonly string[] _cMsgURLChangedFieldNames = new string[] { "bIsRedirect", "bNewNavigation", "browser_handle", "pagetitle", "postData", "url" };
  private static readonly uint[] _cMsgURLChangedFieldTags = new uint[] { 32, 48, 8, 42, 26, 18 };
  public static CMsgURLChanged DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgURLChanged DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgURLChanged ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgURLChanged__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgURLChanged, CMsgURLChanged.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgURLChanged__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int PostDataFieldNumber = 3;
  private bool hasPostData;
  private string postData_ = "";
  public bool HasPostData {
    get { return hasPostData; }
  }
  public string PostData {
    get { return postData_; }
  }
  
  public const int BIsRedirectFieldNumber = 4;
  private bool hasBIsRedirect;
  private bool bIsRedirect_;
  public bool HasBIsRedirect {
    get { return hasBIsRedirect; }
  }
  public bool BIsRedirect {
    get { return bIsRedirect_; }
  }
  
  public const int PagetitleFieldNumber = 5;
  private bool hasPagetitle;
  private string pagetitle_ = "";
  public bool HasPagetitle {
    get { return hasPagetitle; }
  }
  public string Pagetitle {
    get { return pagetitle_; }
  }
  
  public const int BNewNavigationFieldNumber = 6;
  private bool hasBNewNavigation;
  private bool bNewNavigation_;
  public bool HasBNewNavigation {
    get { return hasBNewNavigation; }
  }
  public bool BNewNavigation {
    get { return bNewNavigation_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgURLChangedFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[2], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[5], Url);
    }
    if (hasPostData) {
      output.WriteString(3, field_names[4], PostData);
    }
    if (hasBIsRedirect) {
      output.WriteBool(4, field_names[0], BIsRedirect);
    }
    if (hasPagetitle) {
      output.WriteString(5, field_names[3], Pagetitle);
    }
    if (hasBNewNavigation) {
      output.WriteBool(6, field_names[1], BNewNavigation);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasPostData) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PostData);
      }
      if (hasBIsRedirect) {
        size += pb::CodedOutputStream.ComputeBoolSize(4, BIsRedirect);
      }
      if (hasPagetitle) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Pagetitle);
      }
      if (hasBNewNavigation) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, BNewNavigation);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgURLChanged ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgURLChanged ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgURLChanged ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgURLChanged ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgURLChanged MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgURLChanged prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgURLChanged, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgURLChanged cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgURLChanged result;
    
    private CMsgURLChanged PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgURLChanged original = result;
        result = new CMsgURLChanged();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgURLChanged MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgURLChanged.Descriptor; }
    }
    
    public override CMsgURLChanged DefaultInstanceForType {
      get { return global::CMsgURLChanged.DefaultInstance; }
    }
    
    public override CMsgURLChanged BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgURLChanged) {
        return MergeFrom((CMsgURLChanged) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgURLChanged other) {
      if (other == global::CMsgURLChanged.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasPostData) {
        PostData = other.PostData;
      }
      if (other.HasBIsRedirect) {
        BIsRedirect = other.BIsRedirect;
      }
      if (other.HasPagetitle) {
        Pagetitle = other.Pagetitle;
      }
      if (other.HasBNewNavigation) {
        BNewNavigation = other.BNewNavigation;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgURLChangedFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgURLChangedFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            result.hasPostData = input.ReadString(ref result.postData_);
            break;
          }
          case 32: {
            result.hasBIsRedirect = input.ReadBool(ref result.bIsRedirect_);
            break;
          }
          case 42: {
            result.hasPagetitle = input.ReadString(ref result.pagetitle_);
            break;
          }
          case 48: {
            result.hasBNewNavigation = input.ReadBool(ref result.bNewNavigation_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasPostData {
      get { return result.hasPostData; }
    }
    public string PostData {
      get { return result.PostData; }
      set { SetPostData(value); }
    }
    public Builder SetPostData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPostData = true;
      result.postData_ = value;
      return this;
    }
    public Builder ClearPostData() {
      PrepareBuilder();
      result.hasPostData = false;
      result.postData_ = "";
      return this;
    }
    
    public bool HasBIsRedirect {
      get { return result.hasBIsRedirect; }
    }
    public bool BIsRedirect {
      get { return result.BIsRedirect; }
      set { SetBIsRedirect(value); }
    }
    public Builder SetBIsRedirect(bool value) {
      PrepareBuilder();
      result.hasBIsRedirect = true;
      result.bIsRedirect_ = value;
      return this;
    }
    public Builder ClearBIsRedirect() {
      PrepareBuilder();
      result.hasBIsRedirect = false;
      result.bIsRedirect_ = false;
      return this;
    }
    
    public bool HasPagetitle {
      get { return result.hasPagetitle; }
    }
    public string Pagetitle {
      get { return result.Pagetitle; }
      set { SetPagetitle(value); }
    }
    public Builder SetPagetitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPagetitle = true;
      result.pagetitle_ = value;
      return this;
    }
    public Builder ClearPagetitle() {
      PrepareBuilder();
      result.hasPagetitle = false;
      result.pagetitle_ = "";
      return this;
    }
    
    public bool HasBNewNavigation {
      get { return result.hasBNewNavigation; }
    }
    public bool BNewNavigation {
      get { return result.BNewNavigation; }
      set { SetBNewNavigation(value); }
    }
    public Builder SetBNewNavigation(bool value) {
      PrepareBuilder();
      result.hasBNewNavigation = true;
      result.bNewNavigation_ = value;
      return this;
    }
    public Builder ClearBNewNavigation() {
      PrepareBuilder();
      result.hasBNewNavigation = false;
      result.bNewNavigation_ = false;
      return this;
    }
  }
  static CMsgURLChanged() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CHTMLHeader : pb::GeneratedMessage<CHTMLHeader, CHTMLHeader.Builder> {
  private CHTMLHeader() { }
  private static readonly CHTMLHeader defaultInstance = new CHTMLHeader().MakeReadOnly();
  private static readonly string[] _cHTMLHeaderFieldNames = new string[] { "key", "value" };
  private static readonly uint[] _cHTMLHeaderFieldTags = new uint[] { 10, 18 };
  public static CHTMLHeader DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CHTMLHeader DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CHTMLHeader ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CHTMLHeader__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CHTMLHeader, CHTMLHeader.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CHTMLHeader__FieldAccessorTable; }
  }
  
  public const int KeyFieldNumber = 1;
  private bool hasKey;
  private string key_ = "";
  public bool HasKey {
    get { return hasKey; }
  }
  public string Key {
    get { return key_; }
  }
  
  public const int ValueFieldNumber = 2;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cHTMLHeaderFieldNames;
    if (hasKey) {
      output.WriteString(1, field_names[0], Key);
    }
    if (hasValue) {
      output.WriteString(2, field_names[1], Value);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Key);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CHTMLHeader ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CHTMLHeader ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CHTMLHeader ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CHTMLHeader ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CHTMLHeader MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CHTMLHeader prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CHTMLHeader, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CHTMLHeader cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CHTMLHeader result;
    
    private CHTMLHeader PrepareBuilder() {
      if (resultIsReadOnly) {
        CHTMLHeader original = result;
        result = new CHTMLHeader();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CHTMLHeader MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CHTMLHeader.Descriptor; }
    }
    
    public override CHTMLHeader DefaultInstanceForType {
      get { return global::CHTMLHeader.DefaultInstance; }
    }
    
    public override CHTMLHeader BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CHTMLHeader) {
        return MergeFrom((CHTMLHeader) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CHTMLHeader other) {
      if (other == global::CHTMLHeader.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cHTMLHeaderFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cHTMLHeaderFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasKey = input.ReadString(ref result.key_);
            break;
          }
          case 18: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasKey {
      get { return result.hasKey; }
    }
    public string Key {
      get { return result.Key; }
      set { SetKey(value); }
    }
    public Builder SetKey(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKey = true;
      result.key_ = value;
      return this;
    }
    public Builder ClearKey() {
      PrepareBuilder();
      result.hasKey = false;
      result.key_ = "";
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
  }
  static CHTMLHeader() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CHTMLPageSecurityInfo : pb::GeneratedMessage<CHTMLPageSecurityInfo, CHTMLPageSecurityInfo.Builder> {
  private CHTMLPageSecurityInfo() { }
  private static readonly CHTMLPageSecurityInfo defaultInstance = new CHTMLPageSecurityInfo().MakeReadOnly();
  private static readonly string[] _cHTMLPageSecurityInfoFieldNames = new string[] { "bHasCertError", "bIsEVCert", "bIsSecure", "certExpiry", "certName", "issuerName", "nCertBits" };
  private static readonly uint[] _cHTMLPageSecurityInfoFieldTags = new uint[] { 16, 56, 8, 40, 34, 26, 48 };
  public static CHTMLPageSecurityInfo DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CHTMLPageSecurityInfo DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CHTMLPageSecurityInfo ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CHTMLPageSecurityInfo__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CHTMLPageSecurityInfo, CHTMLPageSecurityInfo.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CHTMLPageSecurityInfo__FieldAccessorTable; }
  }
  
  public const int BIsSecureFieldNumber = 1;
  private bool hasBIsSecure;
  private bool bIsSecure_;
  public bool HasBIsSecure {
    get { return hasBIsSecure; }
  }
  public bool BIsSecure {
    get { return bIsSecure_; }
  }
  
  public const int BHasCertErrorFieldNumber = 2;
  private bool hasBHasCertError;
  private bool bHasCertError_;
  public bool HasBHasCertError {
    get { return hasBHasCertError; }
  }
  public bool BHasCertError {
    get { return bHasCertError_; }
  }
  
  public const int IssuerNameFieldNumber = 3;
  private bool hasIssuerName;
  private string issuerName_ = "";
  public bool HasIssuerName {
    get { return hasIssuerName; }
  }
  public string IssuerName {
    get { return issuerName_; }
  }
  
  public const int CertNameFieldNumber = 4;
  private bool hasCertName;
  private string certName_ = "";
  public bool HasCertName {
    get { return hasCertName; }
  }
  public string CertName {
    get { return certName_; }
  }
  
  public const int CertExpiryFieldNumber = 5;
  private bool hasCertExpiry;
  private int certExpiry_;
  public bool HasCertExpiry {
    get { return hasCertExpiry; }
  }
  public int CertExpiry {
    get { return certExpiry_; }
  }
  
  public const int NCertBitsFieldNumber = 6;
  private bool hasNCertBits;
  private int nCertBits_;
  public bool HasNCertBits {
    get { return hasNCertBits; }
  }
  public int NCertBits {
    get { return nCertBits_; }
  }
  
  public const int BIsEVCertFieldNumber = 7;
  private bool hasBIsEVCert;
  private bool bIsEVCert_;
  public bool HasBIsEVCert {
    get { return hasBIsEVCert; }
  }
  public bool BIsEVCert {
    get { return bIsEVCert_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cHTMLPageSecurityInfoFieldNames;
    if (hasBIsSecure) {
      output.WriteBool(1, field_names[2], BIsSecure);
    }
    if (hasBHasCertError) {
      output.WriteBool(2, field_names[0], BHasCertError);
    }
    if (hasIssuerName) {
      output.WriteString(3, field_names[5], IssuerName);
    }
    if (hasCertName) {
      output.WriteString(4, field_names[4], CertName);
    }
    if (hasCertExpiry) {
      output.WriteInt32(5, field_names[3], CertExpiry);
    }
    if (hasNCertBits) {
      output.WriteInt32(6, field_names[6], NCertBits);
    }
    if (hasBIsEVCert) {
      output.WriteBool(7, field_names[1], BIsEVCert);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBIsSecure) {
        size += pb::CodedOutputStream.ComputeBoolSize(1, BIsSecure);
      }
      if (hasBHasCertError) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, BHasCertError);
      }
      if (hasIssuerName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, IssuerName);
      }
      if (hasCertName) {
        size += pb::CodedOutputStream.ComputeStringSize(4, CertName);
      }
      if (hasCertExpiry) {
        size += pb::CodedOutputStream.ComputeInt32Size(5, CertExpiry);
      }
      if (hasNCertBits) {
        size += pb::CodedOutputStream.ComputeInt32Size(6, NCertBits);
      }
      if (hasBIsEVCert) {
        size += pb::CodedOutputStream.ComputeBoolSize(7, BIsEVCert);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CHTMLPageSecurityInfo ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CHTMLPageSecurityInfo ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CHTMLPageSecurityInfo MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CHTMLPageSecurityInfo prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CHTMLPageSecurityInfo, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CHTMLPageSecurityInfo cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CHTMLPageSecurityInfo result;
    
    private CHTMLPageSecurityInfo PrepareBuilder() {
      if (resultIsReadOnly) {
        CHTMLPageSecurityInfo original = result;
        result = new CHTMLPageSecurityInfo();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CHTMLPageSecurityInfo MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CHTMLPageSecurityInfo.Descriptor; }
    }
    
    public override CHTMLPageSecurityInfo DefaultInstanceForType {
      get { return global::CHTMLPageSecurityInfo.DefaultInstance; }
    }
    
    public override CHTMLPageSecurityInfo BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CHTMLPageSecurityInfo) {
        return MergeFrom((CHTMLPageSecurityInfo) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CHTMLPageSecurityInfo other) {
      if (other == global::CHTMLPageSecurityInfo.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBIsSecure) {
        BIsSecure = other.BIsSecure;
      }
      if (other.HasBHasCertError) {
        BHasCertError = other.BHasCertError;
      }
      if (other.HasIssuerName) {
        IssuerName = other.IssuerName;
      }
      if (other.HasCertName) {
        CertName = other.CertName;
      }
      if (other.HasCertExpiry) {
        CertExpiry = other.CertExpiry;
      }
      if (other.HasNCertBits) {
        NCertBits = other.NCertBits;
      }
      if (other.HasBIsEVCert) {
        BIsEVCert = other.BIsEVCert;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cHTMLPageSecurityInfoFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cHTMLPageSecurityInfoFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBIsSecure = input.ReadBool(ref result.bIsSecure_);
            break;
          }
          case 16: {
            result.hasBHasCertError = input.ReadBool(ref result.bHasCertError_);
            break;
          }
          case 26: {
            result.hasIssuerName = input.ReadString(ref result.issuerName_);
            break;
          }
          case 34: {
            result.hasCertName = input.ReadString(ref result.certName_);
            break;
          }
          case 40: {
            result.hasCertExpiry = input.ReadInt32(ref result.certExpiry_);
            break;
          }
          case 48: {
            result.hasNCertBits = input.ReadInt32(ref result.nCertBits_);
            break;
          }
          case 56: {
            result.hasBIsEVCert = input.ReadBool(ref result.bIsEVCert_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBIsSecure {
      get { return result.hasBIsSecure; }
    }
    public bool BIsSecure {
      get { return result.BIsSecure; }
      set { SetBIsSecure(value); }
    }
    public Builder SetBIsSecure(bool value) {
      PrepareBuilder();
      result.hasBIsSecure = true;
      result.bIsSecure_ = value;
      return this;
    }
    public Builder ClearBIsSecure() {
      PrepareBuilder();
      result.hasBIsSecure = false;
      result.bIsSecure_ = false;
      return this;
    }
    
    public bool HasBHasCertError {
      get { return result.hasBHasCertError; }
    }
    public bool BHasCertError {
      get { return result.BHasCertError; }
      set { SetBHasCertError(value); }
    }
    public Builder SetBHasCertError(bool value) {
      PrepareBuilder();
      result.hasBHasCertError = true;
      result.bHasCertError_ = value;
      return this;
    }
    public Builder ClearBHasCertError() {
      PrepareBuilder();
      result.hasBHasCertError = false;
      result.bHasCertError_ = false;
      return this;
    }
    
    public bool HasIssuerName {
      get { return result.hasIssuerName; }
    }
    public string IssuerName {
      get { return result.IssuerName; }
      set { SetIssuerName(value); }
    }
    public Builder SetIssuerName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasIssuerName = true;
      result.issuerName_ = value;
      return this;
    }
    public Builder ClearIssuerName() {
      PrepareBuilder();
      result.hasIssuerName = false;
      result.issuerName_ = "";
      return this;
    }
    
    public bool HasCertName {
      get { return result.hasCertName; }
    }
    public string CertName {
      get { return result.CertName; }
      set { SetCertName(value); }
    }
    public Builder SetCertName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCertName = true;
      result.certName_ = value;
      return this;
    }
    public Builder ClearCertName() {
      PrepareBuilder();
      result.hasCertName = false;
      result.certName_ = "";
      return this;
    }
    
    public bool HasCertExpiry {
      get { return result.hasCertExpiry; }
    }
    public int CertExpiry {
      get { return result.CertExpiry; }
      set { SetCertExpiry(value); }
    }
    public Builder SetCertExpiry(int value) {
      PrepareBuilder();
      result.hasCertExpiry = true;
      result.certExpiry_ = value;
      return this;
    }
    public Builder ClearCertExpiry() {
      PrepareBuilder();
      result.hasCertExpiry = false;
      result.certExpiry_ = 0;
      return this;
    }
    
    public bool HasNCertBits {
      get { return result.hasNCertBits; }
    }
    public int NCertBits {
      get { return result.NCertBits; }
      set { SetNCertBits(value); }
    }
    public Builder SetNCertBits(int value) {
      PrepareBuilder();
      result.hasNCertBits = true;
      result.nCertBits_ = value;
      return this;
    }
    public Builder ClearNCertBits() {
      PrepareBuilder();
      result.hasNCertBits = false;
      result.nCertBits_ = 0;
      return this;
    }
    
    public bool HasBIsEVCert {
      get { return result.hasBIsEVCert; }
    }
    public bool BIsEVCert {
      get { return result.BIsEVCert; }
      set { SetBIsEVCert(value); }
    }
    public Builder SetBIsEVCert(bool value) {
      PrepareBuilder();
      result.hasBIsEVCert = true;
      result.bIsEVCert_ = value;
      return this;
    }
    public Builder ClearBIsEVCert() {
      PrepareBuilder();
      result.hasBIsEVCert = false;
      result.bIsEVCert_ = false;
      return this;
    }
  }
  static CHTMLPageSecurityInfo() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFinishedRequest : pb::GeneratedMessage<CMsgFinishedRequest, CMsgFinishedRequest.Builder> {
  private CMsgFinishedRequest() { }
  private static readonly CMsgFinishedRequest defaultInstance = new CMsgFinishedRequest().MakeReadOnly();
  private static readonly string[] _cMsgFinishedRequestFieldNames = new string[] { "browser_handle", "headers", "pageTitle", "security_info", "url" };
  private static readonly uint[] _cMsgFinishedRequestFieldTags = new uint[] { 8, 42, 26, 34, 18 };
  public static CMsgFinishedRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFinishedRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFinishedRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFinishedRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFinishedRequest, CMsgFinishedRequest.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFinishedRequest__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int PageTitleFieldNumber = 3;
  private bool hasPageTitle;
  private string pageTitle_ = "";
  public bool HasPageTitle {
    get { return hasPageTitle; }
  }
  public string PageTitle {
    get { return pageTitle_; }
  }
  
  public const int SecurityInfoFieldNumber = 4;
  private bool hasSecurityInfo;
  private global::CHTMLPageSecurityInfo securityInfo_;
  public bool HasSecurityInfo {
    get { return hasSecurityInfo; }
  }
  public global::CHTMLPageSecurityInfo SecurityInfo {
    get { return securityInfo_ ?? global::CHTMLPageSecurityInfo.DefaultInstance; }
  }
  
  public const int HeadersFieldNumber = 5;
  private pbc::PopsicleList<global::CHTMLHeader> headers_ = new pbc::PopsicleList<global::CHTMLHeader>();
  public scg::IList<global::CHTMLHeader> HeadersList {
    get { return headers_; }
  }
  public int HeadersCount {
    get { return headers_.Count; }
  }
  public global::CHTMLHeader GetHeaders(int index) {
    return headers_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFinishedRequestFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[4], Url);
    }
    if (hasPageTitle) {
      output.WriteString(3, field_names[2], PageTitle);
    }
    if (hasSecurityInfo) {
      output.WriteMessage(4, field_names[3], SecurityInfo);
    }
    if (headers_.Count > 0) {
      output.WriteMessageArray(5, field_names[1], headers_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasPageTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(3, PageTitle);
      }
      if (hasSecurityInfo) {
        size += pb::CodedOutputStream.ComputeMessageSize(4, SecurityInfo);
      }
      foreach (global::CHTMLHeader element in HeadersList) {
        size += pb::CodedOutputStream.ComputeMessageSize(5, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFinishedRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFinishedRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFinishedRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFinishedRequest MakeReadOnly() {
    headers_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFinishedRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFinishedRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFinishedRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFinishedRequest result;
    
    private CMsgFinishedRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFinishedRequest original = result;
        result = new CMsgFinishedRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFinishedRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFinishedRequest.Descriptor; }
    }
    
    public override CMsgFinishedRequest DefaultInstanceForType {
      get { return global::CMsgFinishedRequest.DefaultInstance; }
    }
    
    public override CMsgFinishedRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFinishedRequest) {
        return MergeFrom((CMsgFinishedRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFinishedRequest other) {
      if (other == global::CMsgFinishedRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasPageTitle) {
        PageTitle = other.PageTitle;
      }
      if (other.HasSecurityInfo) {
        MergeSecurityInfo(other.SecurityInfo);
      }
      if (other.headers_.Count != 0) {
        result.headers_.Add(other.headers_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFinishedRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFinishedRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            result.hasPageTitle = input.ReadString(ref result.pageTitle_);
            break;
          }
          case 34: {
            global::CHTMLPageSecurityInfo.Builder subBuilder = global::CHTMLPageSecurityInfo.CreateBuilder();
            if (result.hasSecurityInfo) {
              subBuilder.MergeFrom(SecurityInfo);
            }
            input.ReadMessage(subBuilder, extensionRegistry);
            SecurityInfo = subBuilder.BuildPartial();
            break;
          }
          case 42: {
            input.ReadMessageArray(tag, field_name, result.headers_, global::CHTMLHeader.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasPageTitle {
      get { return result.hasPageTitle; }
    }
    public string PageTitle {
      get { return result.PageTitle; }
      set { SetPageTitle(value); }
    }
    public Builder SetPageTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPageTitle = true;
      result.pageTitle_ = value;
      return this;
    }
    public Builder ClearPageTitle() {
      PrepareBuilder();
      result.hasPageTitle = false;
      result.pageTitle_ = "";
      return this;
    }
    
    public bool HasSecurityInfo {
     get { return result.hasSecurityInfo; }
    }
    public global::CHTMLPageSecurityInfo SecurityInfo {
      get { return result.SecurityInfo; }
      set { SetSecurityInfo(value); }
    }
    public Builder SetSecurityInfo(global::CHTMLPageSecurityInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSecurityInfo = true;
      result.securityInfo_ = value;
      return this;
    }
    public Builder SetSecurityInfo(global::CHTMLPageSecurityInfo.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.hasSecurityInfo = true;
      result.securityInfo_ = builderForValue.Build();
      return this;
    }
    public Builder MergeSecurityInfo(global::CHTMLPageSecurityInfo value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      if (result.hasSecurityInfo &&
          result.securityInfo_ != global::CHTMLPageSecurityInfo.DefaultInstance) {
          result.securityInfo_ = global::CHTMLPageSecurityInfo.CreateBuilder(result.securityInfo_).MergeFrom(value).BuildPartial();
      } else {
        result.securityInfo_ = value;
      }
      result.hasSecurityInfo = true;
      return this;
    }
    public Builder ClearSecurityInfo() {
      PrepareBuilder();
      result.hasSecurityInfo = false;
      result.securityInfo_ = null;
      return this;
    }
    
    public pbc::IPopsicleList<global::CHTMLHeader> HeadersList {
      get { return PrepareBuilder().headers_; }
    }
    public int HeadersCount {
      get { return result.HeadersCount; }
    }
    public global::CHTMLHeader GetHeaders(int index) {
      return result.GetHeaders(index);
    }
    public Builder SetHeaders(int index, global::CHTMLHeader value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.headers_[index] = value;
      return this;
    }
    public Builder SetHeaders(int index, global::CHTMLHeader.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.headers_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddHeaders(global::CHTMLHeader value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.headers_.Add(value);
      return this;
    }
    public Builder AddHeaders(global::CHTMLHeader.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.headers_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeHeaders(scg::IEnumerable<global::CHTMLHeader> values) {
      PrepareBuilder();
      result.headers_.Add(values);
      return this;
    }
    public Builder ClearHeaders() {
      PrepareBuilder();
      result.headers_.Clear();
      return this;
    }
  }
  static CMsgFinishedRequest() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgStartRequest : pb::GeneratedMessage<CMsgStartRequest, CMsgStartRequest.Builder> {
  private CMsgStartRequest() { }
  private static readonly CMsgStartRequest defaultInstance = new CMsgStartRequest().MakeReadOnly();
  private static readonly string[] _cMsgStartRequestFieldNames = new string[] { "bIsRedirect", "browser_handle", "postData", "target", "url" };
  private static readonly uint[] _cMsgStartRequestFieldTags = new uint[] { 40, 8, 34, 26, 18 };
  public static CMsgStartRequest DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgStartRequest DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgStartRequest ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgStartRequest__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgStartRequest, CMsgStartRequest.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgStartRequest__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int TargetFieldNumber = 3;
  private bool hasTarget;
  private string target_ = "";
  public bool HasTarget {
    get { return hasTarget; }
  }
  public string Target {
    get { return target_; }
  }
  
  public const int PostDataFieldNumber = 4;
  private bool hasPostData;
  private string postData_ = "";
  public bool HasPostData {
    get { return hasPostData; }
  }
  public string PostData {
    get { return postData_; }
  }
  
  public const int BIsRedirectFieldNumber = 5;
  private bool hasBIsRedirect;
  private bool bIsRedirect_;
  public bool HasBIsRedirect {
    get { return hasBIsRedirect; }
  }
  public bool BIsRedirect {
    get { return bIsRedirect_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgStartRequestFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[4], Url);
    }
    if (hasTarget) {
      output.WriteString(3, field_names[3], Target);
    }
    if (hasPostData) {
      output.WriteString(4, field_names[2], PostData);
    }
    if (hasBIsRedirect) {
      output.WriteBool(5, field_names[0], BIsRedirect);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasTarget) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Target);
      }
      if (hasPostData) {
        size += pb::CodedOutputStream.ComputeStringSize(4, PostData);
      }
      if (hasBIsRedirect) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, BIsRedirect);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgStartRequest ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgStartRequest ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgStartRequest ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStartRequest ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgStartRequest MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgStartRequest prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgStartRequest, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgStartRequest cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgStartRequest result;
    
    private CMsgStartRequest PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgStartRequest original = result;
        result = new CMsgStartRequest();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgStartRequest MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgStartRequest.Descriptor; }
    }
    
    public override CMsgStartRequest DefaultInstanceForType {
      get { return global::CMsgStartRequest.DefaultInstance; }
    }
    
    public override CMsgStartRequest BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgStartRequest) {
        return MergeFrom((CMsgStartRequest) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgStartRequest other) {
      if (other == global::CMsgStartRequest.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasTarget) {
        Target = other.Target;
      }
      if (other.HasPostData) {
        PostData = other.PostData;
      }
      if (other.HasBIsRedirect) {
        BIsRedirect = other.BIsRedirect;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgStartRequestFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgStartRequestFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            result.hasTarget = input.ReadString(ref result.target_);
            break;
          }
          case 34: {
            result.hasPostData = input.ReadString(ref result.postData_);
            break;
          }
          case 40: {
            result.hasBIsRedirect = input.ReadBool(ref result.bIsRedirect_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasTarget {
      get { return result.hasTarget; }
    }
    public string Target {
      get { return result.Target; }
      set { SetTarget(value); }
    }
    public Builder SetTarget(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTarget = true;
      result.target_ = value;
      return this;
    }
    public Builder ClearTarget() {
      PrepareBuilder();
      result.hasTarget = false;
      result.target_ = "";
      return this;
    }
    
    public bool HasPostData {
      get { return result.hasPostData; }
    }
    public string PostData {
      get { return result.PostData; }
      set { SetPostData(value); }
    }
    public Builder SetPostData(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPostData = true;
      result.postData_ = value;
      return this;
    }
    public Builder ClearPostData() {
      PrepareBuilder();
      result.hasPostData = false;
      result.postData_ = "";
      return this;
    }
    
    public bool HasBIsRedirect {
      get { return result.hasBIsRedirect; }
    }
    public bool BIsRedirect {
      get { return result.BIsRedirect; }
      set { SetBIsRedirect(value); }
    }
    public Builder SetBIsRedirect(bool value) {
      PrepareBuilder();
      result.hasBIsRedirect = true;
      result.bIsRedirect_ = value;
      return this;
    }
    public Builder ClearBIsRedirect() {
      PrepareBuilder();
      result.hasBIsRedirect = false;
      result.bIsRedirect_ = false;
      return this;
    }
  }
  static CMsgStartRequest() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgStartRequestResponse : pb::GeneratedMessage<CMsgStartRequestResponse, CMsgStartRequestResponse.Builder> {
  private CMsgStartRequestResponse() { }
  private static readonly CMsgStartRequestResponse defaultInstance = new CMsgStartRequestResponse().MakeReadOnly();
  private static readonly string[] _cMsgStartRequestResponseFieldNames = new string[] { "bAllow", "browser_handle" };
  private static readonly uint[] _cMsgStartRequestResponseFieldTags = new uint[] { 16, 8 };
  public static CMsgStartRequestResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgStartRequestResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgStartRequestResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgStartRequestResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgStartRequestResponse, CMsgStartRequestResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgStartRequestResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int BAllowFieldNumber = 2;
  private bool hasBAllow;
  private bool bAllow_;
  public bool HasBAllow {
    get { return hasBAllow; }
  }
  public bool BAllow {
    get { return bAllow_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgStartRequestResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasBAllow) {
      output.WriteBool(2, field_names[0], BAllow);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasBAllow) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, BAllow);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgStartRequestResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStartRequestResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgStartRequestResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgStartRequestResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgStartRequestResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgStartRequestResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgStartRequestResponse result;
    
    private CMsgStartRequestResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgStartRequestResponse original = result;
        result = new CMsgStartRequestResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgStartRequestResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgStartRequestResponse.Descriptor; }
    }
    
    public override CMsgStartRequestResponse DefaultInstanceForType {
      get { return global::CMsgStartRequestResponse.DefaultInstance; }
    }
    
    public override CMsgStartRequestResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgStartRequestResponse) {
        return MergeFrom((CMsgStartRequestResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgStartRequestResponse other) {
      if (other == global::CMsgStartRequestResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasBAllow) {
        BAllow = other.BAllow;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgStartRequestResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgStartRequestResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasBAllow = input.ReadBool(ref result.bAllow_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasBAllow {
      get { return result.hasBAllow; }
    }
    public bool BAllow {
      get { return result.BAllow; }
      set { SetBAllow(value); }
    }
    public Builder SetBAllow(bool value) {
      PrepareBuilder();
      result.hasBAllow = true;
      result.bAllow_ = value;
      return this;
    }
    public Builder ClearBAllow() {
      PrepareBuilder();
      result.hasBAllow = false;
      result.bAllow_ = false;
      return this;
    }
  }
  static CMsgStartRequestResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgShowPopup : pb::GeneratedMessage<CMsgShowPopup, CMsgShowPopup.Builder> {
  private CMsgShowPopup() { }
  private static readonly CMsgShowPopup defaultInstance = new CMsgShowPopup().MakeReadOnly();
  private static readonly string[] _cMsgShowPopupFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgShowPopupFieldTags = new uint[] { 8 };
  public static CMsgShowPopup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgShowPopup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgShowPopup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgShowPopup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgShowPopup, CMsgShowPopup.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgShowPopup__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgShowPopupFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgShowPopup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgShowPopup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgShowPopup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgShowPopup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgShowPopup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgShowPopup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgShowPopup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgShowPopup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgShowPopup result;
    
    private CMsgShowPopup PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgShowPopup original = result;
        result = new CMsgShowPopup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgShowPopup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgShowPopup.Descriptor; }
    }
    
    public override CMsgShowPopup DefaultInstanceForType {
      get { return global::CMsgShowPopup.DefaultInstance; }
    }
    
    public override CMsgShowPopup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgShowPopup) {
        return MergeFrom((CMsgShowPopup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgShowPopup other) {
      if (other == global::CMsgShowPopup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgShowPopupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgShowPopupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgShowPopup() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgHidePopup : pb::GeneratedMessage<CMsgHidePopup, CMsgHidePopup.Builder> {
  private CMsgHidePopup() { }
  private static readonly CMsgHidePopup defaultInstance = new CMsgHidePopup().MakeReadOnly();
  private static readonly string[] _cMsgHidePopupFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgHidePopupFieldTags = new uint[] { 8 };
  public static CMsgHidePopup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgHidePopup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgHidePopup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgHidePopup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgHidePopup, CMsgHidePopup.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgHidePopup__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgHidePopupFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgHidePopup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgHidePopup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgHidePopup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHidePopup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgHidePopup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgHidePopup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgHidePopup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgHidePopup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgHidePopup result;
    
    private CMsgHidePopup PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgHidePopup original = result;
        result = new CMsgHidePopup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgHidePopup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgHidePopup.Descriptor; }
    }
    
    public override CMsgHidePopup DefaultInstanceForType {
      get { return global::CMsgHidePopup.DefaultInstance; }
    }
    
    public override CMsgHidePopup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgHidePopup) {
        return MergeFrom((CMsgHidePopup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgHidePopup other) {
      if (other == global::CMsgHidePopup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgHidePopupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgHidePopupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgHidePopup() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSizePopup : pb::GeneratedMessage<CMsgSizePopup, CMsgSizePopup.Builder> {
  private CMsgSizePopup() { }
  private static readonly CMsgSizePopup defaultInstance = new CMsgSizePopup().MakeReadOnly();
  private static readonly string[] _cMsgSizePopupFieldNames = new string[] { "browser_handle", "tall", "wide", "x", "y" };
  private static readonly uint[] _cMsgSizePopupFieldTags = new uint[] { 8, 40, 32, 16, 24 };
  public static CMsgSizePopup DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSizePopup DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSizePopup ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSizePopup__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSizePopup, CMsgSizePopup.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSizePopup__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public const int WideFieldNumber = 4;
  private bool hasWide;
  private uint wide_;
  public bool HasWide {
    get { return hasWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wide {
    get { return wide_; }
  }
  
  public const int TallFieldNumber = 5;
  private bool hasTall;
  private uint tall_;
  public bool HasTall {
    get { return hasTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tall {
    get { return tall_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSizePopupFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[3], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[4], Y);
    }
    if (hasWide) {
      output.WriteUInt32(4, field_names[2], Wide);
    }
    if (hasTall) {
      output.WriteUInt32(5, field_names[1], Tall);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      if (hasWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Wide);
      }
      if (hasTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Tall);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSizePopup ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSizePopup ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSizePopup ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSizePopup ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSizePopup MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSizePopup prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSizePopup, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSizePopup cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSizePopup result;
    
    private CMsgSizePopup PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSizePopup original = result;
        result = new CMsgSizePopup();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSizePopup MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSizePopup.Descriptor; }
    }
    
    public override CMsgSizePopup DefaultInstanceForType {
      get { return global::CMsgSizePopup.DefaultInstance; }
    }
    
    public override CMsgSizePopup BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSizePopup) {
        return MergeFrom((CMsgSizePopup) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSizePopup other) {
      if (other == global::CMsgSizePopup.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasWide) {
        Wide = other.Wide;
      }
      if (other.HasTall) {
        Tall = other.Tall;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSizePopupFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSizePopupFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
          case 32: {
            result.hasWide = input.ReadUInt32(ref result.wide_);
            break;
          }
          case 40: {
            result.hasTall = input.ReadUInt32(ref result.tall_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public bool HasWide {
      get { return result.hasWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wide {
      get { return result.Wide; }
      set { SetWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWide(uint value) {
      PrepareBuilder();
      result.hasWide = true;
      result.wide_ = value;
      return this;
    }
    public Builder ClearWide() {
      PrepareBuilder();
      result.hasWide = false;
      result.wide_ = 0;
      return this;
    }
    
    public bool HasTall {
      get { return result.hasTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tall {
      get { return result.Tall; }
      set { SetTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTall(uint value) {
      PrepareBuilder();
      result.hasTall = true;
      result.tall_ = value;
      return this;
    }
    public Builder ClearTall() {
      PrepareBuilder();
      result.hasTall = false;
      result.tall_ = 0;
      return this;
    }
  }
  static CMsgSizePopup() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgOpenNewTab : pb::GeneratedMessage<CMsgOpenNewTab, CMsgOpenNewTab.Builder> {
  private CMsgOpenNewTab() { }
  private static readonly CMsgOpenNewTab defaultInstance = new CMsgOpenNewTab().MakeReadOnly();
  private static readonly string[] _cMsgOpenNewTabFieldNames = new string[] { "bForeground", "browser_handle", "url" };
  private static readonly uint[] _cMsgOpenNewTabFieldTags = new uint[] { 24, 8, 18 };
  public static CMsgOpenNewTab DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgOpenNewTab DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgOpenNewTab ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgOpenNewTab__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgOpenNewTab, CMsgOpenNewTab.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgOpenNewTab__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int BForegroundFieldNumber = 3;
  private bool hasBForeground;
  private bool bForeground_;
  public bool HasBForeground {
    get { return hasBForeground; }
  }
  public bool BForeground {
    get { return bForeground_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgOpenNewTabFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[2], Url);
    }
    if (hasBForeground) {
      output.WriteBool(3, field_names[0], BForeground);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasBForeground) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, BForeground);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgOpenNewTab ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgOpenNewTab ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgOpenNewTab ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgOpenNewTab MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgOpenNewTab prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgOpenNewTab, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgOpenNewTab cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgOpenNewTab result;
    
    private CMsgOpenNewTab PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgOpenNewTab original = result;
        result = new CMsgOpenNewTab();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgOpenNewTab MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgOpenNewTab.Descriptor; }
    }
    
    public override CMsgOpenNewTab DefaultInstanceForType {
      get { return global::CMsgOpenNewTab.DefaultInstance; }
    }
    
    public override CMsgOpenNewTab BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgOpenNewTab) {
        return MergeFrom((CMsgOpenNewTab) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgOpenNewTab other) {
      if (other == global::CMsgOpenNewTab.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasBForeground) {
        BForeground = other.BForeground;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgOpenNewTabFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgOpenNewTabFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 24: {
            result.hasBForeground = input.ReadBool(ref result.bForeground_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasBForeground {
      get { return result.hasBForeground; }
    }
    public bool BForeground {
      get { return result.BForeground; }
      set { SetBForeground(value); }
    }
    public Builder SetBForeground(bool value) {
      PrepareBuilder();
      result.hasBForeground = true;
      result.bForeground_ = value;
      return this;
    }
    public Builder ClearBForeground() {
      PrepareBuilder();
      result.hasBForeground = false;
      result.bForeground_ = false;
      return this;
    }
  }
  static CMsgOpenNewTab() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgOpenNewTabResponse : pb::GeneratedMessage<CMsgOpenNewTabResponse, CMsgOpenNewTabResponse.Builder> {
  private CMsgOpenNewTabResponse() { }
  private static readonly CMsgOpenNewTabResponse defaultInstance = new CMsgOpenNewTabResponse().MakeReadOnly();
  private static readonly string[] _cMsgOpenNewTabResponseFieldNames = new string[] { "bAllow", "browser_handle" };
  private static readonly uint[] _cMsgOpenNewTabResponseFieldTags = new uint[] { 16, 8 };
  public static CMsgOpenNewTabResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgOpenNewTabResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgOpenNewTabResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgOpenNewTabResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgOpenNewTabResponse, CMsgOpenNewTabResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgOpenNewTabResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int BAllowFieldNumber = 2;
  private bool hasBAllow;
  private bool bAllow_;
  public bool HasBAllow {
    get { return hasBAllow; }
  }
  public bool BAllow {
    get { return bAllow_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgOpenNewTabResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasBAllow) {
      output.WriteBool(2, field_names[0], BAllow);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasBAllow) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, BAllow);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgOpenNewTabResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgOpenNewTabResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgOpenNewTabResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgOpenNewTabResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgOpenNewTabResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgOpenNewTabResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgOpenNewTabResponse result;
    
    private CMsgOpenNewTabResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgOpenNewTabResponse original = result;
        result = new CMsgOpenNewTabResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgOpenNewTabResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgOpenNewTabResponse.Descriptor; }
    }
    
    public override CMsgOpenNewTabResponse DefaultInstanceForType {
      get { return global::CMsgOpenNewTabResponse.DefaultInstance; }
    }
    
    public override CMsgOpenNewTabResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgOpenNewTabResponse) {
        return MergeFrom((CMsgOpenNewTabResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgOpenNewTabResponse other) {
      if (other == global::CMsgOpenNewTabResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasBAllow) {
        BAllow = other.BAllow;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgOpenNewTabResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgOpenNewTabResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasBAllow = input.ReadBool(ref result.bAllow_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasBAllow {
      get { return result.hasBAllow; }
    }
    public bool BAllow {
      get { return result.BAllow; }
      set { SetBAllow(value); }
    }
    public Builder SetBAllow(bool value) {
      PrepareBuilder();
      result.hasBAllow = true;
      result.bAllow_ = value;
      return this;
    }
    public Builder ClearBAllow() {
      PrepareBuilder();
      result.hasBAllow = false;
      result.bAllow_ = false;
      return this;
    }
  }
  static CMsgOpenNewTabResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgPopupHTMLWindow : pb::GeneratedMessage<CMsgPopupHTMLWindow, CMsgPopupHTMLWindow.Builder> {
  private CMsgPopupHTMLWindow() { }
  private static readonly CMsgPopupHTMLWindow defaultInstance = new CMsgPopupHTMLWindow().MakeReadOnly();
  private static readonly string[] _cMsgPopupHTMLWindowFieldNames = new string[] { "browser_handle", "tall", "url", "wide", "x", "y" };
  private static readonly uint[] _cMsgPopupHTMLWindowFieldTags = new uint[] { 8, 48, 18, 40, 24, 32 };
  public static CMsgPopupHTMLWindow DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgPopupHTMLWindow DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgPopupHTMLWindow ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgPopupHTMLWindow__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgPopupHTMLWindow, CMsgPopupHTMLWindow.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgPopupHTMLWindow__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int XFieldNumber = 3;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 4;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public const int WideFieldNumber = 5;
  private bool hasWide;
  private uint wide_;
  public bool HasWide {
    get { return hasWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wide {
    get { return wide_; }
  }
  
  public const int TallFieldNumber = 6;
  private bool hasTall;
  private uint tall_;
  public bool HasTall {
    get { return hasTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tall {
    get { return tall_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgPopupHTMLWindowFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[2], Url);
    }
    if (hasX) {
      output.WriteUInt32(3, field_names[4], X);
    }
    if (hasY) {
      output.WriteUInt32(4, field_names[5], Y);
    }
    if (hasWide) {
      output.WriteUInt32(5, field_names[3], Wide);
    }
    if (hasTall) {
      output.WriteUInt32(6, field_names[1], Tall);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Y);
      }
      if (hasWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Wide);
      }
      if (hasTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Tall);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgPopupHTMLWindow ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPopupHTMLWindow ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgPopupHTMLWindow MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgPopupHTMLWindow prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgPopupHTMLWindow, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgPopupHTMLWindow cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgPopupHTMLWindow result;
    
    private CMsgPopupHTMLWindow PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgPopupHTMLWindow original = result;
        result = new CMsgPopupHTMLWindow();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgPopupHTMLWindow MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgPopupHTMLWindow.Descriptor; }
    }
    
    public override CMsgPopupHTMLWindow DefaultInstanceForType {
      get { return global::CMsgPopupHTMLWindow.DefaultInstance; }
    }
    
    public override CMsgPopupHTMLWindow BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgPopupHTMLWindow) {
        return MergeFrom((CMsgPopupHTMLWindow) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgPopupHTMLWindow other) {
      if (other == global::CMsgPopupHTMLWindow.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasWide) {
        Wide = other.Wide;
      }
      if (other.HasTall) {
        Tall = other.Tall;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgPopupHTMLWindowFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgPopupHTMLWindowFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 24: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 32: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
          case 40: {
            result.hasWide = input.ReadUInt32(ref result.wide_);
            break;
          }
          case 48: {
            result.hasTall = input.ReadUInt32(ref result.tall_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public bool HasWide {
      get { return result.hasWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wide {
      get { return result.Wide; }
      set { SetWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWide(uint value) {
      PrepareBuilder();
      result.hasWide = true;
      result.wide_ = value;
      return this;
    }
    public Builder ClearWide() {
      PrepareBuilder();
      result.hasWide = false;
      result.wide_ = 0;
      return this;
    }
    
    public bool HasTall {
      get { return result.hasTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tall {
      get { return result.Tall; }
      set { SetTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTall(uint value) {
      PrepareBuilder();
      result.hasTall = true;
      result.tall_ = value;
      return this;
    }
    public Builder ClearTall() {
      PrepareBuilder();
      result.hasTall = false;
      result.tall_ = 0;
      return this;
    }
  }
  static CMsgPopupHTMLWindow() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgPopupHTMLWindowResponse : pb::GeneratedMessage<CMsgPopupHTMLWindowResponse, CMsgPopupHTMLWindowResponse.Builder> {
  private CMsgPopupHTMLWindowResponse() { }
  private static readonly CMsgPopupHTMLWindowResponse defaultInstance = new CMsgPopupHTMLWindowResponse().MakeReadOnly();
  private static readonly string[] _cMsgPopupHTMLWindowResponseFieldNames = new string[] { "bAllow", "browser_handle" };
  private static readonly uint[] _cMsgPopupHTMLWindowResponseFieldTags = new uint[] { 16, 8 };
  public static CMsgPopupHTMLWindowResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgPopupHTMLWindowResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgPopupHTMLWindowResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgPopupHTMLWindowResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgPopupHTMLWindowResponse, CMsgPopupHTMLWindowResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgPopupHTMLWindowResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int BAllowFieldNumber = 2;
  private bool hasBAllow;
  private bool bAllow_;
  public bool HasBAllow {
    get { return hasBAllow; }
  }
  public bool BAllow {
    get { return bAllow_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgPopupHTMLWindowResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasBAllow) {
      output.WriteBool(2, field_names[0], BAllow);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasBAllow) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, BAllow);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgPopupHTMLWindowResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPopupHTMLWindowResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgPopupHTMLWindowResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgPopupHTMLWindowResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgPopupHTMLWindowResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgPopupHTMLWindowResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgPopupHTMLWindowResponse result;
    
    private CMsgPopupHTMLWindowResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgPopupHTMLWindowResponse original = result;
        result = new CMsgPopupHTMLWindowResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgPopupHTMLWindowResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgPopupHTMLWindowResponse.Descriptor; }
    }
    
    public override CMsgPopupHTMLWindowResponse DefaultInstanceForType {
      get { return global::CMsgPopupHTMLWindowResponse.DefaultInstance; }
    }
    
    public override CMsgPopupHTMLWindowResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgPopupHTMLWindowResponse) {
        return MergeFrom((CMsgPopupHTMLWindowResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgPopupHTMLWindowResponse other) {
      if (other == global::CMsgPopupHTMLWindowResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasBAllow) {
        BAllow = other.BAllow;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgPopupHTMLWindowResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgPopupHTMLWindowResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasBAllow = input.ReadBool(ref result.bAllow_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasBAllow {
      get { return result.hasBAllow; }
    }
    public bool BAllow {
      get { return result.BAllow; }
      set { SetBAllow(value); }
    }
    public Builder SetBAllow(bool value) {
      PrepareBuilder();
      result.hasBAllow = true;
      result.bAllow_ = value;
      return this;
    }
    public Builder ClearBAllow() {
      PrepareBuilder();
      result.hasBAllow = false;
      result.bAllow_ = false;
      return this;
    }
  }
  static CMsgPopupHTMLWindowResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetHTMLTitle : pb::GeneratedMessage<CMsgSetHTMLTitle, CMsgSetHTMLTitle.Builder> {
  private CMsgSetHTMLTitle() { }
  private static readonly CMsgSetHTMLTitle defaultInstance = new CMsgSetHTMLTitle().MakeReadOnly();
  private static readonly string[] _cMsgSetHTMLTitleFieldNames = new string[] { "browser_handle", "title" };
  private static readonly uint[] _cMsgSetHTMLTitleFieldTags = new uint[] { 8, 18 };
  public static CMsgSetHTMLTitle DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetHTMLTitle DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetHTMLTitle ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetHTMLTitle__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetHTMLTitle, CMsgSetHTMLTitle.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetHTMLTitle__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TitleFieldNumber = 2;
  private bool hasTitle;
  private string title_ = "";
  public bool HasTitle {
    get { return hasTitle; }
  }
  public string Title {
    get { return title_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetHTMLTitleFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasTitle) {
      output.WriteString(2, field_names[1], Title);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetHTMLTitle ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetHTMLTitle ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetHTMLTitle MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetHTMLTitle prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetHTMLTitle, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetHTMLTitle cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetHTMLTitle result;
    
    private CMsgSetHTMLTitle PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetHTMLTitle original = result;
        result = new CMsgSetHTMLTitle();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetHTMLTitle MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetHTMLTitle.Descriptor; }
    }
    
    public override CMsgSetHTMLTitle DefaultInstanceForType {
      get { return global::CMsgSetHTMLTitle.DefaultInstance; }
    }
    
    public override CMsgSetHTMLTitle BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetHTMLTitle) {
        return MergeFrom((CMsgSetHTMLTitle) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetHTMLTitle other) {
      if (other == global::CMsgSetHTMLTitle.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetHTMLTitleFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetHTMLTitleFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasTitle = input.ReadString(ref result.title_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public string Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = "";
      return this;
    }
  }
  static CMsgSetHTMLTitle() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgLoadingResource : pb::GeneratedMessage<CMsgLoadingResource, CMsgLoadingResource.Builder> {
  private CMsgLoadingResource() { }
  private static readonly CMsgLoadingResource defaultInstance = new CMsgLoadingResource().MakeReadOnly();
  private static readonly string[] _cMsgLoadingResourceFieldNames = new string[] { "browser_handle", "url" };
  private static readonly uint[] _cMsgLoadingResourceFieldTags = new uint[] { 8, 18 };
  public static CMsgLoadingResource DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgLoadingResource DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgLoadingResource ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgLoadingResource__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgLoadingResource, CMsgLoadingResource.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgLoadingResource__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgLoadingResourceFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[1], Url);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgLoadingResource ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgLoadingResource ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgLoadingResource ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgLoadingResource ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgLoadingResource MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgLoadingResource prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgLoadingResource, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgLoadingResource cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgLoadingResource result;
    
    private CMsgLoadingResource PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgLoadingResource original = result;
        result = new CMsgLoadingResource();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgLoadingResource MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgLoadingResource.Descriptor; }
    }
    
    public override CMsgLoadingResource DefaultInstanceForType {
      get { return global::CMsgLoadingResource.DefaultInstance; }
    }
    
    public override CMsgLoadingResource BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgLoadingResource) {
        return MergeFrom((CMsgLoadingResource) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgLoadingResource other) {
      if (other == global::CMsgLoadingResource.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgLoadingResourceFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgLoadingResourceFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
  }
  static CMsgLoadingResource() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgStatusText : pb::GeneratedMessage<CMsgStatusText, CMsgStatusText.Builder> {
  private CMsgStatusText() { }
  private static readonly CMsgStatusText defaultInstance = new CMsgStatusText().MakeReadOnly();
  private static readonly string[] _cMsgStatusTextFieldNames = new string[] { "browser_handle", "text" };
  private static readonly uint[] _cMsgStatusTextFieldTags = new uint[] { 8, 18 };
  public static CMsgStatusText DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgStatusText DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgStatusText ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgStatusText__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgStatusText, CMsgStatusText.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgStatusText__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TextFieldNumber = 2;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgStatusTextFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasText) {
      output.WriteString(2, field_names[1], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgStatusText ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgStatusText ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgStatusText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgStatusText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgStatusText MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgStatusText prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgStatusText, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgStatusText cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgStatusText result;
    
    private CMsgStatusText PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgStatusText original = result;
        result = new CMsgStatusText();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgStatusText MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgStatusText.Descriptor; }
    }
    
    public override CMsgStatusText DefaultInstanceForType {
      get { return global::CMsgStatusText.DefaultInstance; }
    }
    
    public override CMsgStatusText BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgStatusText) {
        return MergeFrom((CMsgStatusText) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgStatusText other) {
      if (other == global::CMsgStatusText.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgStatusTextFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgStatusTextFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CMsgStatusText() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetCursor : pb::GeneratedMessage<CMsgSetCursor, CMsgSetCursor.Builder> {
  private CMsgSetCursor() { }
  private static readonly CMsgSetCursor defaultInstance = new CMsgSetCursor().MakeReadOnly();
  private static readonly string[] _cMsgSetCursorFieldNames = new string[] { "browser_handle", "cursor", "custom_data", "tall", "wide", "xhotspot", "yhotspot" };
  private static readonly uint[] _cMsgSetCursorFieldTags = new uint[] { 8, 16, 26, 40, 32, 48, 56 };
  public static CMsgSetCursor DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetCursor DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetCursor ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetCursor__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetCursor, CMsgSetCursor.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetCursor__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int CursorFieldNumber = 2;
  private bool hasCursor;
  private uint cursor_;
  public bool HasCursor {
    get { return hasCursor; }
  }
  [global::System.CLSCompliant(false)]
  public uint Cursor {
    get { return cursor_; }
  }
  
  public const int CustomDataFieldNumber = 3;
  private bool hasCustomData;
  private pb::ByteString customData_ = pb::ByteString.Empty;
  public bool HasCustomData {
    get { return hasCustomData; }
  }
  public pb::ByteString CustomData {
    get { return customData_; }
  }
  
  public const int WideFieldNumber = 4;
  private bool hasWide;
  private uint wide_;
  public bool HasWide {
    get { return hasWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wide {
    get { return wide_; }
  }
  
  public const int TallFieldNumber = 5;
  private bool hasTall;
  private uint tall_;
  public bool HasTall {
    get { return hasTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tall {
    get { return tall_; }
  }
  
  public const int XhotspotFieldNumber = 6;
  private bool hasXhotspot;
  private uint xhotspot_;
  public bool HasXhotspot {
    get { return hasXhotspot; }
  }
  [global::System.CLSCompliant(false)]
  public uint Xhotspot {
    get { return xhotspot_; }
  }
  
  public const int YhotspotFieldNumber = 7;
  private bool hasYhotspot;
  private uint yhotspot_;
  public bool HasYhotspot {
    get { return hasYhotspot; }
  }
  [global::System.CLSCompliant(false)]
  public uint Yhotspot {
    get { return yhotspot_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetCursorFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasCursor) {
      output.WriteUInt32(2, field_names[1], Cursor);
    }
    if (hasCustomData) {
      output.WriteBytes(3, field_names[2], CustomData);
    }
    if (hasWide) {
      output.WriteUInt32(4, field_names[4], Wide);
    }
    if (hasTall) {
      output.WriteUInt32(5, field_names[3], Tall);
    }
    if (hasXhotspot) {
      output.WriteUInt32(6, field_names[5], Xhotspot);
    }
    if (hasYhotspot) {
      output.WriteUInt32(7, field_names[6], Yhotspot);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasCursor) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Cursor);
      }
      if (hasCustomData) {
        size += pb::CodedOutputStream.ComputeBytesSize(3, CustomData);
      }
      if (hasWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Wide);
      }
      if (hasTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Tall);
      }
      if (hasXhotspot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Xhotspot);
      }
      if (hasYhotspot) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Yhotspot);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetCursor ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetCursor ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetCursor ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetCursor ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetCursor MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetCursor prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetCursor, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetCursor cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetCursor result;
    
    private CMsgSetCursor PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetCursor original = result;
        result = new CMsgSetCursor();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetCursor MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetCursor.Descriptor; }
    }
    
    public override CMsgSetCursor DefaultInstanceForType {
      get { return global::CMsgSetCursor.DefaultInstance; }
    }
    
    public override CMsgSetCursor BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetCursor) {
        return MergeFrom((CMsgSetCursor) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetCursor other) {
      if (other == global::CMsgSetCursor.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasCursor) {
        Cursor = other.Cursor;
      }
      if (other.HasCustomData) {
        CustomData = other.CustomData;
      }
      if (other.HasWide) {
        Wide = other.Wide;
      }
      if (other.HasTall) {
        Tall = other.Tall;
      }
      if (other.HasXhotspot) {
        Xhotspot = other.Xhotspot;
      }
      if (other.HasYhotspot) {
        Yhotspot = other.Yhotspot;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetCursorFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetCursorFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasCursor = input.ReadUInt32(ref result.cursor_);
            break;
          }
          case 26: {
            result.hasCustomData = input.ReadBytes(ref result.customData_);
            break;
          }
          case 32: {
            result.hasWide = input.ReadUInt32(ref result.wide_);
            break;
          }
          case 40: {
            result.hasTall = input.ReadUInt32(ref result.tall_);
            break;
          }
          case 48: {
            result.hasXhotspot = input.ReadUInt32(ref result.xhotspot_);
            break;
          }
          case 56: {
            result.hasYhotspot = input.ReadUInt32(ref result.yhotspot_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasCursor {
      get { return result.hasCursor; }
    }
    [global::System.CLSCompliant(false)]
    public uint Cursor {
      get { return result.Cursor; }
      set { SetCursor(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetCursor(uint value) {
      PrepareBuilder();
      result.hasCursor = true;
      result.cursor_ = value;
      return this;
    }
    public Builder ClearCursor() {
      PrepareBuilder();
      result.hasCursor = false;
      result.cursor_ = 0;
      return this;
    }
    
    public bool HasCustomData {
      get { return result.hasCustomData; }
    }
    public pb::ByteString CustomData {
      get { return result.CustomData; }
      set { SetCustomData(value); }
    }
    public Builder SetCustomData(pb::ByteString value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasCustomData = true;
      result.customData_ = value;
      return this;
    }
    public Builder ClearCustomData() {
      PrepareBuilder();
      result.hasCustomData = false;
      result.customData_ = pb::ByteString.Empty;
      return this;
    }
    
    public bool HasWide {
      get { return result.hasWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wide {
      get { return result.Wide; }
      set { SetWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWide(uint value) {
      PrepareBuilder();
      result.hasWide = true;
      result.wide_ = value;
      return this;
    }
    public Builder ClearWide() {
      PrepareBuilder();
      result.hasWide = false;
      result.wide_ = 0;
      return this;
    }
    
    public bool HasTall {
      get { return result.hasTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tall {
      get { return result.Tall; }
      set { SetTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTall(uint value) {
      PrepareBuilder();
      result.hasTall = true;
      result.tall_ = value;
      return this;
    }
    public Builder ClearTall() {
      PrepareBuilder();
      result.hasTall = false;
      result.tall_ = 0;
      return this;
    }
    
    public bool HasXhotspot {
      get { return result.hasXhotspot; }
    }
    [global::System.CLSCompliant(false)]
    public uint Xhotspot {
      get { return result.Xhotspot; }
      set { SetXhotspot(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetXhotspot(uint value) {
      PrepareBuilder();
      result.hasXhotspot = true;
      result.xhotspot_ = value;
      return this;
    }
    public Builder ClearXhotspot() {
      PrepareBuilder();
      result.hasXhotspot = false;
      result.xhotspot_ = 0;
      return this;
    }
    
    public bool HasYhotspot {
      get { return result.hasYhotspot; }
    }
    [global::System.CLSCompliant(false)]
    public uint Yhotspot {
      get { return result.Yhotspot; }
      set { SetYhotspot(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetYhotspot(uint value) {
      PrepareBuilder();
      result.hasYhotspot = true;
      result.yhotspot_ = value;
      return this;
    }
    public Builder ClearYhotspot() {
      PrepareBuilder();
      result.hasYhotspot = false;
      result.yhotspot_ = 0;
      return this;
    }
  }
  static CMsgSetCursor() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFileLoadDialog : pb::GeneratedMessage<CMsgFileLoadDialog, CMsgFileLoadDialog.Builder> {
  private CMsgFileLoadDialog() { }
  private static readonly CMsgFileLoadDialog defaultInstance = new CMsgFileLoadDialog().MakeReadOnly();
  private static readonly string[] _cMsgFileLoadDialogFieldNames = new string[] { "browser_handle", "initialFile", "title" };
  private static readonly uint[] _cMsgFileLoadDialogFieldTags = new uint[] { 8, 26, 18 };
  public static CMsgFileLoadDialog DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFileLoadDialog DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFileLoadDialog ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFileLoadDialog__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFileLoadDialog, CMsgFileLoadDialog.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFileLoadDialog__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TitleFieldNumber = 2;
  private bool hasTitle;
  private string title_ = "";
  public bool HasTitle {
    get { return hasTitle; }
  }
  public string Title {
    get { return title_; }
  }
  
  public const int InitialFileFieldNumber = 3;
  private bool hasInitialFile;
  private string initialFile_ = "";
  public bool HasInitialFile {
    get { return hasInitialFile; }
  }
  public string InitialFile {
    get { return initialFile_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFileLoadDialogFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasTitle) {
      output.WriteString(2, field_names[2], Title);
    }
    if (hasInitialFile) {
      output.WriteString(3, field_names[1], InitialFile);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasTitle) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Title);
      }
      if (hasInitialFile) {
        size += pb::CodedOutputStream.ComputeStringSize(3, InitialFile);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFileLoadDialog ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFileLoadDialog ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFileLoadDialog MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFileLoadDialog prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFileLoadDialog, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFileLoadDialog cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFileLoadDialog result;
    
    private CMsgFileLoadDialog PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFileLoadDialog original = result;
        result = new CMsgFileLoadDialog();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFileLoadDialog MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFileLoadDialog.Descriptor; }
    }
    
    public override CMsgFileLoadDialog DefaultInstanceForType {
      get { return global::CMsgFileLoadDialog.DefaultInstance; }
    }
    
    public override CMsgFileLoadDialog BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFileLoadDialog) {
        return MergeFrom((CMsgFileLoadDialog) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFileLoadDialog other) {
      if (other == global::CMsgFileLoadDialog.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasTitle) {
        Title = other.Title;
      }
      if (other.HasInitialFile) {
        InitialFile = other.InitialFile;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFileLoadDialogFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFileLoadDialogFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasTitle = input.ReadString(ref result.title_);
            break;
          }
          case 26: {
            result.hasInitialFile = input.ReadString(ref result.initialFile_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasTitle {
      get { return result.hasTitle; }
    }
    public string Title {
      get { return result.Title; }
      set { SetTitle(value); }
    }
    public Builder SetTitle(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasTitle = true;
      result.title_ = value;
      return this;
    }
    public Builder ClearTitle() {
      PrepareBuilder();
      result.hasTitle = false;
      result.title_ = "";
      return this;
    }
    
    public bool HasInitialFile {
      get { return result.hasInitialFile; }
    }
    public string InitialFile {
      get { return result.InitialFile; }
      set { SetInitialFile(value); }
    }
    public Builder SetInitialFile(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasInitialFile = true;
      result.initialFile_ = value;
      return this;
    }
    public Builder ClearInitialFile() {
      PrepareBuilder();
      result.hasInitialFile = false;
      result.initialFile_ = "";
      return this;
    }
  }
  static CMsgFileLoadDialog() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFileLoadDialogResponse : pb::GeneratedMessage<CMsgFileLoadDialogResponse, CMsgFileLoadDialogResponse.Builder> {
  private CMsgFileLoadDialogResponse() { }
  private static readonly CMsgFileLoadDialogResponse defaultInstance = new CMsgFileLoadDialogResponse().MakeReadOnly();
  private static readonly string[] _cMsgFileLoadDialogResponseFieldNames = new string[] { "browser_handle", "files" };
  private static readonly uint[] _cMsgFileLoadDialogResponseFieldTags = new uint[] { 8, 18 };
  public static CMsgFileLoadDialogResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFileLoadDialogResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFileLoadDialogResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFileLoadDialogResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFileLoadDialogResponse, CMsgFileLoadDialogResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFileLoadDialogResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int FilesFieldNumber = 2;
  private pbc::PopsicleList<string> files_ = new pbc::PopsicleList<string>();
  public scg::IList<string> FilesList {
    get { return pbc::Lists.AsReadOnly(files_); }
  }
  public int FilesCount {
    get { return files_.Count; }
  }
  public string GetFiles(int index) {
    return files_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFileLoadDialogResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (files_.Count > 0) {
      output.WriteStringArray(2, field_names[1], files_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      {
        int dataSize = 0;
        foreach (string element in FilesList) {
          dataSize += pb::CodedOutputStream.ComputeStringSizeNoTag(element);
        }
        size += dataSize;
        size += 1 * files_.Count;
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFileLoadDialogResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFileLoadDialogResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFileLoadDialogResponse MakeReadOnly() {
    files_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFileLoadDialogResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFileLoadDialogResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFileLoadDialogResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFileLoadDialogResponse result;
    
    private CMsgFileLoadDialogResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFileLoadDialogResponse original = result;
        result = new CMsgFileLoadDialogResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFileLoadDialogResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFileLoadDialogResponse.Descriptor; }
    }
    
    public override CMsgFileLoadDialogResponse DefaultInstanceForType {
      get { return global::CMsgFileLoadDialogResponse.DefaultInstance; }
    }
    
    public override CMsgFileLoadDialogResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFileLoadDialogResponse) {
        return MergeFrom((CMsgFileLoadDialogResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFileLoadDialogResponse other) {
      if (other == global::CMsgFileLoadDialogResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.files_.Count != 0) {
        result.files_.Add(other.files_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFileLoadDialogResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFileLoadDialogResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            input.ReadStringArray(tag, field_name, result.files_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public pbc::IPopsicleList<string> FilesList {
      get { return PrepareBuilder().files_; }
    }
    public int FilesCount {
      get { return result.FilesCount; }
    }
    public string GetFiles(int index) {
      return result.GetFiles(index);
    }
    public Builder SetFiles(int index, string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.files_[index] = value;
      return this;
    }
    public Builder AddFiles(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.files_.Add(value);
      return this;
    }
    public Builder AddRangeFiles(scg::IEnumerable<string> values) {
      PrepareBuilder();
      result.files_.Add(values);
      return this;
    }
    public Builder ClearFiles() {
      PrepareBuilder();
      result.files_.Clear();
      return this;
    }
  }
  static CMsgFileLoadDialogResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgShowToolTip : pb::GeneratedMessage<CMsgShowToolTip, CMsgShowToolTip.Builder> {
  private CMsgShowToolTip() { }
  private static readonly CMsgShowToolTip defaultInstance = new CMsgShowToolTip().MakeReadOnly();
  private static readonly string[] _cMsgShowToolTipFieldNames = new string[] { "browser_handle", "text" };
  private static readonly uint[] _cMsgShowToolTipFieldTags = new uint[] { 8, 18 };
  public static CMsgShowToolTip DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgShowToolTip DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgShowToolTip ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgShowToolTip__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgShowToolTip, CMsgShowToolTip.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgShowToolTip__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TextFieldNumber = 2;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgShowToolTipFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasText) {
      output.WriteString(2, field_names[1], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgShowToolTip ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgShowToolTip ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgShowToolTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgShowToolTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgShowToolTip MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgShowToolTip prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgShowToolTip, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgShowToolTip cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgShowToolTip result;
    
    private CMsgShowToolTip PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgShowToolTip original = result;
        result = new CMsgShowToolTip();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgShowToolTip MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgShowToolTip.Descriptor; }
    }
    
    public override CMsgShowToolTip DefaultInstanceForType {
      get { return global::CMsgShowToolTip.DefaultInstance; }
    }
    
    public override CMsgShowToolTip BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgShowToolTip) {
        return MergeFrom((CMsgShowToolTip) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgShowToolTip other) {
      if (other == global::CMsgShowToolTip.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgShowToolTipFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgShowToolTipFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CMsgShowToolTip() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgUpdateToolTip : pb::GeneratedMessage<CMsgUpdateToolTip, CMsgUpdateToolTip.Builder> {
  private CMsgUpdateToolTip() { }
  private static readonly CMsgUpdateToolTip defaultInstance = new CMsgUpdateToolTip().MakeReadOnly();
  private static readonly string[] _cMsgUpdateToolTipFieldNames = new string[] { "browser_handle", "text" };
  private static readonly uint[] _cMsgUpdateToolTipFieldTags = new uint[] { 8, 18 };
  public static CMsgUpdateToolTip DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgUpdateToolTip DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgUpdateToolTip ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgUpdateToolTip__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgUpdateToolTip, CMsgUpdateToolTip.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgUpdateToolTip__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TextFieldNumber = 2;
  private bool hasText;
  private string text_ = "";
  public bool HasText {
    get { return hasText; }
  }
  public string Text {
    get { return text_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgUpdateToolTipFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasText) {
      output.WriteString(2, field_names[1], Text);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasText) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Text);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgUpdateToolTip ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgUpdateToolTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgUpdateToolTip MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgUpdateToolTip prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgUpdateToolTip, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgUpdateToolTip cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgUpdateToolTip result;
    
    private CMsgUpdateToolTip PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgUpdateToolTip original = result;
        result = new CMsgUpdateToolTip();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgUpdateToolTip MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgUpdateToolTip.Descriptor; }
    }
    
    public override CMsgUpdateToolTip DefaultInstanceForType {
      get { return global::CMsgUpdateToolTip.DefaultInstance; }
    }
    
    public override CMsgUpdateToolTip BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgUpdateToolTip) {
        return MergeFrom((CMsgUpdateToolTip) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgUpdateToolTip other) {
      if (other == global::CMsgUpdateToolTip.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasText) {
        Text = other.Text;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgUpdateToolTipFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgUpdateToolTipFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasText = input.ReadString(ref result.text_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasText {
      get { return result.hasText; }
    }
    public string Text {
      get { return result.Text; }
      set { SetText(value); }
    }
    public Builder SetText(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasText = true;
      result.text_ = value;
      return this;
    }
    public Builder ClearText() {
      PrepareBuilder();
      result.hasText = false;
      result.text_ = "";
      return this;
    }
  }
  static CMsgUpdateToolTip() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgHideToolTip : pb::GeneratedMessage<CMsgHideToolTip, CMsgHideToolTip.Builder> {
  private CMsgHideToolTip() { }
  private static readonly CMsgHideToolTip defaultInstance = new CMsgHideToolTip().MakeReadOnly();
  private static readonly string[] _cMsgHideToolTipFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgHideToolTipFieldTags = new uint[] { 8 };
  public static CMsgHideToolTip DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgHideToolTip DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgHideToolTip ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgHideToolTip__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgHideToolTip, CMsgHideToolTip.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgHideToolTip__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgHideToolTipFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgHideToolTip ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgHideToolTip ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgHideToolTip ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgHideToolTip ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgHideToolTip MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgHideToolTip prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgHideToolTip, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgHideToolTip cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgHideToolTip result;
    
    private CMsgHideToolTip PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgHideToolTip original = result;
        result = new CMsgHideToolTip();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgHideToolTip MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgHideToolTip.Descriptor; }
    }
    
    public override CMsgHideToolTip DefaultInstanceForType {
      get { return global::CMsgHideToolTip.DefaultInstance; }
    }
    
    public override CMsgHideToolTip BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgHideToolTip) {
        return MergeFrom((CMsgHideToolTip) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgHideToolTip other) {
      if (other == global::CMsgHideToolTip.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgHideToolTipFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgHideToolTipFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgHideToolTip() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSearchResults : pb::GeneratedMessage<CMsgSearchResults, CMsgSearchResults.Builder> {
  private CMsgSearchResults() { }
  private static readonly CMsgSearchResults defaultInstance = new CMsgSearchResults().MakeReadOnly();
  private static readonly string[] _cMsgSearchResultsFieldNames = new string[] { "activeMatch", "browser_handle", "results" };
  private static readonly uint[] _cMsgSearchResultsFieldTags = new uint[] { 16, 8, 24 };
  public static CMsgSearchResults DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSearchResults DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSearchResults ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSearchResults__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSearchResults, CMsgSearchResults.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSearchResults__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ActiveMatchFieldNumber = 2;
  private bool hasActiveMatch;
  private int activeMatch_;
  public bool HasActiveMatch {
    get { return hasActiveMatch; }
  }
  public int ActiveMatch {
    get { return activeMatch_; }
  }
  
  public const int ResultsFieldNumber = 3;
  private bool hasResults;
  private int results_;
  public bool HasResults {
    get { return hasResults; }
  }
  public int Results {
    get { return results_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSearchResultsFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasActiveMatch) {
      output.WriteInt32(2, field_names[0], ActiveMatch);
    }
    if (hasResults) {
      output.WriteInt32(3, field_names[2], Results);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasActiveMatch) {
        size += pb::CodedOutputStream.ComputeInt32Size(2, ActiveMatch);
      }
      if (hasResults) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, Results);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSearchResults ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSearchResults ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSearchResults ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSearchResults ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSearchResults MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSearchResults prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSearchResults, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSearchResults cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSearchResults result;
    
    private CMsgSearchResults PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSearchResults original = result;
        result = new CMsgSearchResults();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSearchResults MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSearchResults.Descriptor; }
    }
    
    public override CMsgSearchResults DefaultInstanceForType {
      get { return global::CMsgSearchResults.DefaultInstance; }
    }
    
    public override CMsgSearchResults BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSearchResults) {
        return MergeFrom((CMsgSearchResults) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSearchResults other) {
      if (other == global::CMsgSearchResults.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasActiveMatch) {
        ActiveMatch = other.ActiveMatch;
      }
      if (other.HasResults) {
        Results = other.Results;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSearchResultsFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSearchResultsFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasActiveMatch = input.ReadInt32(ref result.activeMatch_);
            break;
          }
          case 24: {
            result.hasResults = input.ReadInt32(ref result.results_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasActiveMatch {
      get { return result.hasActiveMatch; }
    }
    public int ActiveMatch {
      get { return result.ActiveMatch; }
      set { SetActiveMatch(value); }
    }
    public Builder SetActiveMatch(int value) {
      PrepareBuilder();
      result.hasActiveMatch = true;
      result.activeMatch_ = value;
      return this;
    }
    public Builder ClearActiveMatch() {
      PrepareBuilder();
      result.hasActiveMatch = false;
      result.activeMatch_ = 0;
      return this;
    }
    
    public bool HasResults {
      get { return result.hasResults; }
    }
    public int Results {
      get { return result.Results; }
      set { SetResults(value); }
    }
    public Builder SetResults(int value) {
      PrepareBuilder();
      result.hasResults = true;
      result.results_ = value;
      return this;
    }
    public Builder ClearResults() {
      PrepareBuilder();
      result.hasResults = false;
      result.results_ = 0;
      return this;
    }
  }
  static CMsgSearchResults() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgClose : pb::GeneratedMessage<CMsgClose, CMsgClose.Builder> {
  private CMsgClose() { }
  private static readonly CMsgClose defaultInstance = new CMsgClose().MakeReadOnly();
  private static readonly string[] _cMsgCloseFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgCloseFieldTags = new uint[] { 8 };
  public static CMsgClose DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgClose DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgClose ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgClose__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgClose, CMsgClose.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgClose__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgCloseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgClose ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgClose ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgClose ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgClose ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgClose ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgClose ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgClose ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgClose ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgClose ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgClose ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgClose MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgClose prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgClose, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgClose cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgClose result;
    
    private CMsgClose PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgClose original = result;
        result = new CMsgClose();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgClose MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgClose.Descriptor; }
    }
    
    public override CMsgClose DefaultInstanceForType {
      get { return global::CMsgClose.DefaultInstance; }
    }
    
    public override CMsgClose BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgClose) {
        return MergeFrom((CMsgClose) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgClose other) {
      if (other == global::CMsgClose.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgCloseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgCloseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgClose() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgNeedsPaint : pb::GeneratedMessage<CMsgNeedsPaint, CMsgNeedsPaint.Builder> {
  private CMsgNeedsPaint() { }
  private static readonly CMsgNeedsPaint defaultInstance = new CMsgNeedsPaint().MakeReadOnly();
  private static readonly string[] _cMsgNeedsPaintFieldNames = new string[] { "browser_handle", "combobox_rgba", "combobox_tall", "combobox_wide", "pageserial", "rgba", "scrollx", "scrolly", "tall", "textureid", "updatetall", "updatewide", "updatex", "updatey", "wide" };
  private static readonly uint[] _cMsgNeedsPaintFieldTags = new uint[] { 8, 96, 112, 104, 120, 16, 80, 88, 32, 40, 72, 64, 48, 56, 24 };
  public static CMsgNeedsPaint DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgNeedsPaint DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgNeedsPaint ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgNeedsPaint__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgNeedsPaint, CMsgNeedsPaint.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgNeedsPaint__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int RgbaFieldNumber = 2;
  private bool hasRgba;
  private ulong rgba_;
  public bool HasRgba {
    get { return hasRgba; }
  }
  [global::System.CLSCompliant(false)]
  public ulong Rgba {
    get { return rgba_; }
  }
  
  public const int WideFieldNumber = 3;
  private bool hasWide;
  private uint wide_;
  public bool HasWide {
    get { return hasWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Wide {
    get { return wide_; }
  }
  
  public const int TallFieldNumber = 4;
  private bool hasTall;
  private uint tall_;
  public bool HasTall {
    get { return hasTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Tall {
    get { return tall_; }
  }
  
  public const int TextureidFieldNumber = 5;
  private bool hasTextureid;
  private uint textureid_;
  public bool HasTextureid {
    get { return hasTextureid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Textureid {
    get { return textureid_; }
  }
  
  public const int UpdatexFieldNumber = 6;
  private bool hasUpdatex;
  private uint updatex_;
  public bool HasUpdatex {
    get { return hasUpdatex; }
  }
  [global::System.CLSCompliant(false)]
  public uint Updatex {
    get { return updatex_; }
  }
  
  public const int UpdateyFieldNumber = 7;
  private bool hasUpdatey;
  private uint updatey_;
  public bool HasUpdatey {
    get { return hasUpdatey; }
  }
  [global::System.CLSCompliant(false)]
  public uint Updatey {
    get { return updatey_; }
  }
  
  public const int UpdatewideFieldNumber = 8;
  private bool hasUpdatewide;
  private uint updatewide_;
  public bool HasUpdatewide {
    get { return hasUpdatewide; }
  }
  [global::System.CLSCompliant(false)]
  public uint Updatewide {
    get { return updatewide_; }
  }
  
  public const int UpdatetallFieldNumber = 9;
  private bool hasUpdatetall;
  private uint updatetall_;
  public bool HasUpdatetall {
    get { return hasUpdatetall; }
  }
  [global::System.CLSCompliant(false)]
  public uint Updatetall {
    get { return updatetall_; }
  }
  
  public const int ScrollxFieldNumber = 10;
  private bool hasScrollx;
  private uint scrollx_;
  public bool HasScrollx {
    get { return hasScrollx; }
  }
  [global::System.CLSCompliant(false)]
  public uint Scrollx {
    get { return scrollx_; }
  }
  
  public const int ScrollyFieldNumber = 11;
  private bool hasScrolly;
  private uint scrolly_;
  public bool HasScrolly {
    get { return hasScrolly; }
  }
  [global::System.CLSCompliant(false)]
  public uint Scrolly {
    get { return scrolly_; }
  }
  
  public const int ComboboxRgbaFieldNumber = 12;
  private bool hasComboboxRgba;
  private ulong comboboxRgba_;
  public bool HasComboboxRgba {
    get { return hasComboboxRgba; }
  }
  [global::System.CLSCompliant(false)]
  public ulong ComboboxRgba {
    get { return comboboxRgba_; }
  }
  
  public const int ComboboxWideFieldNumber = 13;
  private bool hasComboboxWide;
  private uint comboboxWide_;
  public bool HasComboboxWide {
    get { return hasComboboxWide; }
  }
  [global::System.CLSCompliant(false)]
  public uint ComboboxWide {
    get { return comboboxWide_; }
  }
  
  public const int ComboboxTallFieldNumber = 14;
  private bool hasComboboxTall;
  private uint comboboxTall_;
  public bool HasComboboxTall {
    get { return hasComboboxTall; }
  }
  [global::System.CLSCompliant(false)]
  public uint ComboboxTall {
    get { return comboboxTall_; }
  }
  
  public const int PageserialFieldNumber = 15;
  private bool hasPageserial;
  private uint pageserial_;
  public bool HasPageserial {
    get { return hasPageserial; }
  }
  [global::System.CLSCompliant(false)]
  public uint Pageserial {
    get { return pageserial_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgNeedsPaintFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasRgba) {
      output.WriteUInt64(2, field_names[5], Rgba);
    }
    if (hasWide) {
      output.WriteUInt32(3, field_names[14], Wide);
    }
    if (hasTall) {
      output.WriteUInt32(4, field_names[8], Tall);
    }
    if (hasTextureid) {
      output.WriteUInt32(5, field_names[9], Textureid);
    }
    if (hasUpdatex) {
      output.WriteUInt32(6, field_names[12], Updatex);
    }
    if (hasUpdatey) {
      output.WriteUInt32(7, field_names[13], Updatey);
    }
    if (hasUpdatewide) {
      output.WriteUInt32(8, field_names[11], Updatewide);
    }
    if (hasUpdatetall) {
      output.WriteUInt32(9, field_names[10], Updatetall);
    }
    if (hasScrollx) {
      output.WriteUInt32(10, field_names[6], Scrollx);
    }
    if (hasScrolly) {
      output.WriteUInt32(11, field_names[7], Scrolly);
    }
    if (hasComboboxRgba) {
      output.WriteUInt64(12, field_names[1], ComboboxRgba);
    }
    if (hasComboboxWide) {
      output.WriteUInt32(13, field_names[3], ComboboxWide);
    }
    if (hasComboboxTall) {
      output.WriteUInt32(14, field_names[2], ComboboxTall);
    }
    if (hasPageserial) {
      output.WriteUInt32(15, field_names[4], Pageserial);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasRgba) {
        size += pb::CodedOutputStream.ComputeUInt64Size(2, Rgba);
      }
      if (hasWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Wide);
      }
      if (hasTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Tall);
      }
      if (hasTextureid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Textureid);
      }
      if (hasUpdatex) {
        size += pb::CodedOutputStream.ComputeUInt32Size(6, Updatex);
      }
      if (hasUpdatey) {
        size += pb::CodedOutputStream.ComputeUInt32Size(7, Updatey);
      }
      if (hasUpdatewide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, Updatewide);
      }
      if (hasUpdatetall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, Updatetall);
      }
      if (hasScrollx) {
        size += pb::CodedOutputStream.ComputeUInt32Size(10, Scrollx);
      }
      if (hasScrolly) {
        size += pb::CodedOutputStream.ComputeUInt32Size(11, Scrolly);
      }
      if (hasComboboxRgba) {
        size += pb::CodedOutputStream.ComputeUInt64Size(12, ComboboxRgba);
      }
      if (hasComboboxWide) {
        size += pb::CodedOutputStream.ComputeUInt32Size(13, ComboboxWide);
      }
      if (hasComboboxTall) {
        size += pb::CodedOutputStream.ComputeUInt32Size(14, ComboboxTall);
      }
      if (hasPageserial) {
        size += pb::CodedOutputStream.ComputeUInt32Size(15, Pageserial);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgNeedsPaint ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgNeedsPaint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgNeedsPaint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgNeedsPaint MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgNeedsPaint prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgNeedsPaint, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgNeedsPaint cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgNeedsPaint result;
    
    private CMsgNeedsPaint PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgNeedsPaint original = result;
        result = new CMsgNeedsPaint();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgNeedsPaint MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgNeedsPaint.Descriptor; }
    }
    
    public override CMsgNeedsPaint DefaultInstanceForType {
      get { return global::CMsgNeedsPaint.DefaultInstance; }
    }
    
    public override CMsgNeedsPaint BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgNeedsPaint) {
        return MergeFrom((CMsgNeedsPaint) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgNeedsPaint other) {
      if (other == global::CMsgNeedsPaint.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasRgba) {
        Rgba = other.Rgba;
      }
      if (other.HasWide) {
        Wide = other.Wide;
      }
      if (other.HasTall) {
        Tall = other.Tall;
      }
      if (other.HasTextureid) {
        Textureid = other.Textureid;
      }
      if (other.HasUpdatex) {
        Updatex = other.Updatex;
      }
      if (other.HasUpdatey) {
        Updatey = other.Updatey;
      }
      if (other.HasUpdatewide) {
        Updatewide = other.Updatewide;
      }
      if (other.HasUpdatetall) {
        Updatetall = other.Updatetall;
      }
      if (other.HasScrollx) {
        Scrollx = other.Scrollx;
      }
      if (other.HasScrolly) {
        Scrolly = other.Scrolly;
      }
      if (other.HasComboboxRgba) {
        ComboboxRgba = other.ComboboxRgba;
      }
      if (other.HasComboboxWide) {
        ComboboxWide = other.ComboboxWide;
      }
      if (other.HasComboboxTall) {
        ComboboxTall = other.ComboboxTall;
      }
      if (other.HasPageserial) {
        Pageserial = other.Pageserial;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgNeedsPaintFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgNeedsPaintFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasRgba = input.ReadUInt64(ref result.rgba_);
            break;
          }
          case 24: {
            result.hasWide = input.ReadUInt32(ref result.wide_);
            break;
          }
          case 32: {
            result.hasTall = input.ReadUInt32(ref result.tall_);
            break;
          }
          case 40: {
            result.hasTextureid = input.ReadUInt32(ref result.textureid_);
            break;
          }
          case 48: {
            result.hasUpdatex = input.ReadUInt32(ref result.updatex_);
            break;
          }
          case 56: {
            result.hasUpdatey = input.ReadUInt32(ref result.updatey_);
            break;
          }
          case 64: {
            result.hasUpdatewide = input.ReadUInt32(ref result.updatewide_);
            break;
          }
          case 72: {
            result.hasUpdatetall = input.ReadUInt32(ref result.updatetall_);
            break;
          }
          case 80: {
            result.hasScrollx = input.ReadUInt32(ref result.scrollx_);
            break;
          }
          case 88: {
            result.hasScrolly = input.ReadUInt32(ref result.scrolly_);
            break;
          }
          case 96: {
            result.hasComboboxRgba = input.ReadUInt64(ref result.comboboxRgba_);
            break;
          }
          case 104: {
            result.hasComboboxWide = input.ReadUInt32(ref result.comboboxWide_);
            break;
          }
          case 112: {
            result.hasComboboxTall = input.ReadUInt32(ref result.comboboxTall_);
            break;
          }
          case 120: {
            result.hasPageserial = input.ReadUInt32(ref result.pageserial_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasRgba {
      get { return result.hasRgba; }
    }
    [global::System.CLSCompliant(false)]
    public ulong Rgba {
      get { return result.Rgba; }
      set { SetRgba(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetRgba(ulong value) {
      PrepareBuilder();
      result.hasRgba = true;
      result.rgba_ = value;
      return this;
    }
    public Builder ClearRgba() {
      PrepareBuilder();
      result.hasRgba = false;
      result.rgba_ = 0UL;
      return this;
    }
    
    public bool HasWide {
      get { return result.hasWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Wide {
      get { return result.Wide; }
      set { SetWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWide(uint value) {
      PrepareBuilder();
      result.hasWide = true;
      result.wide_ = value;
      return this;
    }
    public Builder ClearWide() {
      PrepareBuilder();
      result.hasWide = false;
      result.wide_ = 0;
      return this;
    }
    
    public bool HasTall {
      get { return result.hasTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Tall {
      get { return result.Tall; }
      set { SetTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTall(uint value) {
      PrepareBuilder();
      result.hasTall = true;
      result.tall_ = value;
      return this;
    }
    public Builder ClearTall() {
      PrepareBuilder();
      result.hasTall = false;
      result.tall_ = 0;
      return this;
    }
    
    public bool HasTextureid {
      get { return result.hasTextureid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Textureid {
      get { return result.Textureid; }
      set { SetTextureid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTextureid(uint value) {
      PrepareBuilder();
      result.hasTextureid = true;
      result.textureid_ = value;
      return this;
    }
    public Builder ClearTextureid() {
      PrepareBuilder();
      result.hasTextureid = false;
      result.textureid_ = 0;
      return this;
    }
    
    public bool HasUpdatex {
      get { return result.hasUpdatex; }
    }
    [global::System.CLSCompliant(false)]
    public uint Updatex {
      get { return result.Updatex; }
      set { SetUpdatex(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetUpdatex(uint value) {
      PrepareBuilder();
      result.hasUpdatex = true;
      result.updatex_ = value;
      return this;
    }
    public Builder ClearUpdatex() {
      PrepareBuilder();
      result.hasUpdatex = false;
      result.updatex_ = 0;
      return this;
    }
    
    public bool HasUpdatey {
      get { return result.hasUpdatey; }
    }
    [global::System.CLSCompliant(false)]
    public uint Updatey {
      get { return result.Updatey; }
      set { SetUpdatey(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetUpdatey(uint value) {
      PrepareBuilder();
      result.hasUpdatey = true;
      result.updatey_ = value;
      return this;
    }
    public Builder ClearUpdatey() {
      PrepareBuilder();
      result.hasUpdatey = false;
      result.updatey_ = 0;
      return this;
    }
    
    public bool HasUpdatewide {
      get { return result.hasUpdatewide; }
    }
    [global::System.CLSCompliant(false)]
    public uint Updatewide {
      get { return result.Updatewide; }
      set { SetUpdatewide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetUpdatewide(uint value) {
      PrepareBuilder();
      result.hasUpdatewide = true;
      result.updatewide_ = value;
      return this;
    }
    public Builder ClearUpdatewide() {
      PrepareBuilder();
      result.hasUpdatewide = false;
      result.updatewide_ = 0;
      return this;
    }
    
    public bool HasUpdatetall {
      get { return result.hasUpdatetall; }
    }
    [global::System.CLSCompliant(false)]
    public uint Updatetall {
      get { return result.Updatetall; }
      set { SetUpdatetall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetUpdatetall(uint value) {
      PrepareBuilder();
      result.hasUpdatetall = true;
      result.updatetall_ = value;
      return this;
    }
    public Builder ClearUpdatetall() {
      PrepareBuilder();
      result.hasUpdatetall = false;
      result.updatetall_ = 0;
      return this;
    }
    
    public bool HasScrollx {
      get { return result.hasScrollx; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scrollx {
      get { return result.Scrollx; }
      set { SetScrollx(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScrollx(uint value) {
      PrepareBuilder();
      result.hasScrollx = true;
      result.scrollx_ = value;
      return this;
    }
    public Builder ClearScrollx() {
      PrepareBuilder();
      result.hasScrollx = false;
      result.scrollx_ = 0;
      return this;
    }
    
    public bool HasScrolly {
      get { return result.hasScrolly; }
    }
    [global::System.CLSCompliant(false)]
    public uint Scrolly {
      get { return result.Scrolly; }
      set { SetScrolly(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetScrolly(uint value) {
      PrepareBuilder();
      result.hasScrolly = true;
      result.scrolly_ = value;
      return this;
    }
    public Builder ClearScrolly() {
      PrepareBuilder();
      result.hasScrolly = false;
      result.scrolly_ = 0;
      return this;
    }
    
    public bool HasComboboxRgba {
      get { return result.hasComboboxRgba; }
    }
    [global::System.CLSCompliant(false)]
    public ulong ComboboxRgba {
      get { return result.ComboboxRgba; }
      set { SetComboboxRgba(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetComboboxRgba(ulong value) {
      PrepareBuilder();
      result.hasComboboxRgba = true;
      result.comboboxRgba_ = value;
      return this;
    }
    public Builder ClearComboboxRgba() {
      PrepareBuilder();
      result.hasComboboxRgba = false;
      result.comboboxRgba_ = 0UL;
      return this;
    }
    
    public bool HasComboboxWide {
      get { return result.hasComboboxWide; }
    }
    [global::System.CLSCompliant(false)]
    public uint ComboboxWide {
      get { return result.ComboboxWide; }
      set { SetComboboxWide(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetComboboxWide(uint value) {
      PrepareBuilder();
      result.hasComboboxWide = true;
      result.comboboxWide_ = value;
      return this;
    }
    public Builder ClearComboboxWide() {
      PrepareBuilder();
      result.hasComboboxWide = false;
      result.comboboxWide_ = 0;
      return this;
    }
    
    public bool HasComboboxTall {
      get { return result.hasComboboxTall; }
    }
    [global::System.CLSCompliant(false)]
    public uint ComboboxTall {
      get { return result.ComboboxTall; }
      set { SetComboboxTall(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetComboboxTall(uint value) {
      PrepareBuilder();
      result.hasComboboxTall = true;
      result.comboboxTall_ = value;
      return this;
    }
    public Builder ClearComboboxTall() {
      PrepareBuilder();
      result.hasComboboxTall = false;
      result.comboboxTall_ = 0;
      return this;
    }
    
    public bool HasPageserial {
      get { return result.hasPageserial; }
    }
    [global::System.CLSCompliant(false)]
    public uint Pageserial {
      get { return result.Pageserial; }
      set { SetPageserial(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetPageserial(uint value) {
      PrepareBuilder();
      result.hasPageserial = true;
      result.pageserial_ = value;
      return this;
    }
    public Builder ClearPageserial() {
      PrepareBuilder();
      result.hasPageserial = false;
      result.pageserial_ = 0;
      return this;
    }
  }
  static CMsgNeedsPaint() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgNeedsPaintResponse : pb::GeneratedMessage<CMsgNeedsPaintResponse, CMsgNeedsPaintResponse.Builder> {
  private CMsgNeedsPaintResponse() { }
  private static readonly CMsgNeedsPaintResponse defaultInstance = new CMsgNeedsPaintResponse().MakeReadOnly();
  private static readonly string[] _cMsgNeedsPaintResponseFieldNames = new string[] { "browser_handle", "textureid" };
  private static readonly uint[] _cMsgNeedsPaintResponseFieldTags = new uint[] { 8, 16 };
  public static CMsgNeedsPaintResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgNeedsPaintResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgNeedsPaintResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgNeedsPaintResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgNeedsPaintResponse, CMsgNeedsPaintResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgNeedsPaintResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int TextureidFieldNumber = 2;
  private bool hasTextureid;
  private uint textureid_;
  public bool HasTextureid {
    get { return hasTextureid; }
  }
  [global::System.CLSCompliant(false)]
  public uint Textureid {
    get { return textureid_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgNeedsPaintResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasTextureid) {
      output.WriteUInt32(2, field_names[1], Textureid);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasTextureid) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Textureid);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgNeedsPaintResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgNeedsPaintResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgNeedsPaintResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgNeedsPaintResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgNeedsPaintResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgNeedsPaintResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgNeedsPaintResponse result;
    
    private CMsgNeedsPaintResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgNeedsPaintResponse original = result;
        result = new CMsgNeedsPaintResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgNeedsPaintResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgNeedsPaintResponse.Descriptor; }
    }
    
    public override CMsgNeedsPaintResponse DefaultInstanceForType {
      get { return global::CMsgNeedsPaintResponse.DefaultInstance; }
    }
    
    public override CMsgNeedsPaintResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgNeedsPaintResponse) {
        return MergeFrom((CMsgNeedsPaintResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgNeedsPaintResponse other) {
      if (other == global::CMsgNeedsPaintResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasTextureid) {
        Textureid = other.Textureid;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgNeedsPaintResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgNeedsPaintResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasTextureid = input.ReadUInt32(ref result.textureid_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasTextureid {
      get { return result.hasTextureid; }
    }
    [global::System.CLSCompliant(false)]
    public uint Textureid {
      get { return result.Textureid; }
      set { SetTextureid(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTextureid(uint value) {
      PrepareBuilder();
      result.hasTextureid = true;
      result.textureid_ = value;
      return this;
    }
    public Builder ClearTextureid() {
      PrepareBuilder();
      result.hasTextureid = false;
      result.textureid_ = 0;
      return this;
    }
  }
  static CMsgNeedsPaintResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGetZoom : pb::GeneratedMessage<CMsgGetZoom, CMsgGetZoom.Builder> {
  private CMsgGetZoom() { }
  private static readonly CMsgGetZoom defaultInstance = new CMsgGetZoom().MakeReadOnly();
  private static readonly string[] _cMsgGetZoomFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgGetZoomFieldTags = new uint[] { 8 };
  public static CMsgGetZoom DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGetZoom DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGetZoom ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgGetZoom__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGetZoom, CMsgGetZoom.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgGetZoom__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGetZoomFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGetZoom ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetZoom ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGetZoom ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetZoom ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGetZoom MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGetZoom prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGetZoom, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGetZoom cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGetZoom result;
    
    private CMsgGetZoom PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGetZoom original = result;
        result = new CMsgGetZoom();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGetZoom MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGetZoom.Descriptor; }
    }
    
    public override CMsgGetZoom DefaultInstanceForType {
      get { return global::CMsgGetZoom.DefaultInstance; }
    }
    
    public override CMsgGetZoom BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGetZoom) {
        return MergeFrom((CMsgGetZoom) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGetZoom other) {
      if (other == global::CMsgGetZoom.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGetZoomFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGetZoomFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgGetZoom() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGetZoomResponse : pb::GeneratedMessage<CMsgGetZoomResponse, CMsgGetZoomResponse.Builder> {
  private CMsgGetZoomResponse() { }
  private static readonly CMsgGetZoomResponse defaultInstance = new CMsgGetZoomResponse().MakeReadOnly();
  private static readonly string[] _cMsgGetZoomResponseFieldNames = new string[] { "browser_handle", "zoom" };
  private static readonly uint[] _cMsgGetZoomResponseFieldTags = new uint[] { 8, 21 };
  public static CMsgGetZoomResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGetZoomResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGetZoomResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgGetZoomResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGetZoomResponse, CMsgGetZoomResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgGetZoomResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ZoomFieldNumber = 2;
  private bool hasZoom;
  private float zoom_;
  public bool HasZoom {
    get { return hasZoom; }
  }
  public float Zoom {
    get { return zoom_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGetZoomResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasZoom) {
      output.WriteFloat(2, field_names[1], Zoom);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasZoom) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Zoom);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGetZoomResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetZoomResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGetZoomResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGetZoomResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGetZoomResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGetZoomResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGetZoomResponse result;
    
    private CMsgGetZoomResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGetZoomResponse original = result;
        result = new CMsgGetZoomResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGetZoomResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGetZoomResponse.Descriptor; }
    }
    
    public override CMsgGetZoomResponse DefaultInstanceForType {
      get { return global::CMsgGetZoomResponse.DefaultInstance; }
    }
    
    public override CMsgGetZoomResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGetZoomResponse) {
        return MergeFrom((CMsgGetZoomResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGetZoomResponse other) {
      if (other == global::CMsgGetZoomResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasZoom) {
        Zoom = other.Zoom;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGetZoomResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGetZoomResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 21: {
            result.hasZoom = input.ReadFloat(ref result.zoom_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasZoom {
      get { return result.hasZoom; }
    }
    public float Zoom {
      get { return result.Zoom; }
      set { SetZoom(value); }
    }
    public Builder SetZoom(float value) {
      PrepareBuilder();
      result.hasZoom = true;
      result.zoom_ = value;
      return this;
    }
    public Builder ClearZoom() {
      PrepareBuilder();
      result.hasZoom = false;
      result.zoom_ = 0F;
      return this;
    }
  }
  static CMsgGetZoomResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgLinkAtPosition : pb::GeneratedMessage<CMsgLinkAtPosition, CMsgLinkAtPosition.Builder> {
  private CMsgLinkAtPosition() { }
  private static readonly CMsgLinkAtPosition defaultInstance = new CMsgLinkAtPosition().MakeReadOnly();
  private static readonly string[] _cMsgLinkAtPositionFieldNames = new string[] { "browser_handle", "x", "y" };
  private static readonly uint[] _cMsgLinkAtPositionFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgLinkAtPosition DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgLinkAtPosition DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgLinkAtPosition ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgLinkAtPosition__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgLinkAtPosition, CMsgLinkAtPosition.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgLinkAtPosition__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgLinkAtPositionFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[1], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[2], Y);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgLinkAtPosition ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgLinkAtPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgLinkAtPosition MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgLinkAtPosition prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgLinkAtPosition, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgLinkAtPosition cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgLinkAtPosition result;
    
    private CMsgLinkAtPosition PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgLinkAtPosition original = result;
        result = new CMsgLinkAtPosition();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgLinkAtPosition MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgLinkAtPosition.Descriptor; }
    }
    
    public override CMsgLinkAtPosition DefaultInstanceForType {
      get { return global::CMsgLinkAtPosition.DefaultInstance; }
    }
    
    public override CMsgLinkAtPosition BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgLinkAtPosition) {
        return MergeFrom((CMsgLinkAtPosition) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgLinkAtPosition other) {
      if (other == global::CMsgLinkAtPosition.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgLinkAtPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgLinkAtPositionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
  }
  static CMsgLinkAtPosition() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgLinkAtPositionResponse : pb::GeneratedMessage<CMsgLinkAtPositionResponse, CMsgLinkAtPositionResponse.Builder> {
  private CMsgLinkAtPositionResponse() { }
  private static readonly CMsgLinkAtPositionResponse defaultInstance = new CMsgLinkAtPositionResponse().MakeReadOnly();
  private static readonly string[] _cMsgLinkAtPositionResponseFieldNames = new string[] { "binput", "blivelink", "browser_handle", "url", "x", "y" };
  private static readonly uint[] _cMsgLinkAtPositionResponseFieldTags = new uint[] { 48, 40, 8, 34, 16, 24 };
  public static CMsgLinkAtPositionResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgLinkAtPositionResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgLinkAtPositionResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgLinkAtPositionResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgLinkAtPositionResponse, CMsgLinkAtPositionResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgLinkAtPositionResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public const int UrlFieldNumber = 4;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int BlivelinkFieldNumber = 5;
  private bool hasBlivelink;
  private bool blivelink_;
  public bool HasBlivelink {
    get { return hasBlivelink; }
  }
  public bool Blivelink {
    get { return blivelink_; }
  }
  
  public const int BinputFieldNumber = 6;
  private bool hasBinput;
  private bool binput_;
  public bool HasBinput {
    get { return hasBinput; }
  }
  public bool Binput {
    get { return binput_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgLinkAtPositionResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[2], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[4], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[5], Y);
    }
    if (hasUrl) {
      output.WriteString(4, field_names[3], Url);
    }
    if (hasBlivelink) {
      output.WriteBool(5, field_names[1], Blivelink);
    }
    if (hasBinput) {
      output.WriteBool(6, field_names[0], Binput);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Url);
      }
      if (hasBlivelink) {
        size += pb::CodedOutputStream.ComputeBoolSize(5, Blivelink);
      }
      if (hasBinput) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, Binput);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgLinkAtPositionResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgLinkAtPositionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgLinkAtPositionResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgLinkAtPositionResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgLinkAtPositionResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgLinkAtPositionResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgLinkAtPositionResponse result;
    
    private CMsgLinkAtPositionResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgLinkAtPositionResponse original = result;
        result = new CMsgLinkAtPositionResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgLinkAtPositionResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgLinkAtPositionResponse.Descriptor; }
    }
    
    public override CMsgLinkAtPositionResponse DefaultInstanceForType {
      get { return global::CMsgLinkAtPositionResponse.DefaultInstance; }
    }
    
    public override CMsgLinkAtPositionResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgLinkAtPositionResponse) {
        return MergeFrom((CMsgLinkAtPositionResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgLinkAtPositionResponse other) {
      if (other == global::CMsgLinkAtPositionResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasBlivelink) {
        Blivelink = other.Blivelink;
      }
      if (other.HasBinput) {
        Binput = other.Binput;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgLinkAtPositionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgLinkAtPositionResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
          case 34: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 40: {
            result.hasBlivelink = input.ReadBool(ref result.blivelink_);
            break;
          }
          case 48: {
            result.hasBinput = input.ReadBool(ref result.binput_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasBlivelink {
      get { return result.hasBlivelink; }
    }
    public bool Blivelink {
      get { return result.Blivelink; }
      set { SetBlivelink(value); }
    }
    public Builder SetBlivelink(bool value) {
      PrepareBuilder();
      result.hasBlivelink = true;
      result.blivelink_ = value;
      return this;
    }
    public Builder ClearBlivelink() {
      PrepareBuilder();
      result.hasBlivelink = false;
      result.blivelink_ = false;
      return this;
    }
    
    public bool HasBinput {
      get { return result.hasBinput; }
    }
    public bool Binput {
      get { return result.Binput; }
      set { SetBinput(value); }
    }
    public Builder SetBinput(bool value) {
      PrepareBuilder();
      result.hasBinput = true;
      result.binput_ = value;
      return this;
    }
    public Builder ClearBinput() {
      PrepareBuilder();
      result.hasBinput = false;
      result.binput_ = false;
      return this;
    }
  }
  static CMsgLinkAtPositionResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgZoomToElementAtPosition : pb::GeneratedMessage<CMsgZoomToElementAtPosition, CMsgZoomToElementAtPosition.Builder> {
  private CMsgZoomToElementAtPosition() { }
  private static readonly CMsgZoomToElementAtPosition defaultInstance = new CMsgZoomToElementAtPosition().MakeReadOnly();
  private static readonly string[] _cMsgZoomToElementAtPositionFieldNames = new string[] { "browser_handle", "x", "y" };
  private static readonly uint[] _cMsgZoomToElementAtPositionFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgZoomToElementAtPosition DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgZoomToElementAtPosition DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgZoomToElementAtPosition ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgZoomToElementAtPosition__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgZoomToElementAtPosition, CMsgZoomToElementAtPosition.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgZoomToElementAtPosition__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int XFieldNumber = 2;
  private bool hasX;
  private uint x_;
  public bool HasX {
    get { return hasX; }
  }
  [global::System.CLSCompliant(false)]
  public uint X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 3;
  private bool hasY;
  private uint y_;
  public bool HasY {
    get { return hasY; }
  }
  [global::System.CLSCompliant(false)]
  public uint Y {
    get { return y_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgZoomToElementAtPositionFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasX) {
      output.WriteUInt32(2, field_names[1], X);
    }
    if (hasY) {
      output.WriteUInt32(3, field_names[2], Y);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Y);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgZoomToElementAtPosition ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgZoomToElementAtPosition ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgZoomToElementAtPosition MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgZoomToElementAtPosition prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgZoomToElementAtPosition, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgZoomToElementAtPosition cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgZoomToElementAtPosition result;
    
    private CMsgZoomToElementAtPosition PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgZoomToElementAtPosition original = result;
        result = new CMsgZoomToElementAtPosition();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgZoomToElementAtPosition MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgZoomToElementAtPosition.Descriptor; }
    }
    
    public override CMsgZoomToElementAtPosition DefaultInstanceForType {
      get { return global::CMsgZoomToElementAtPosition.DefaultInstance; }
    }
    
    public override CMsgZoomToElementAtPosition BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgZoomToElementAtPosition) {
        return MergeFrom((CMsgZoomToElementAtPosition) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgZoomToElementAtPosition other) {
      if (other == global::CMsgZoomToElementAtPosition.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgZoomToElementAtPositionFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgZoomToElementAtPositionFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasX = input.ReadUInt32(ref result.x_);
            break;
          }
          case 24: {
            result.hasY = input.ReadUInt32(ref result.y_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    [global::System.CLSCompliant(false)]
    public uint X {
      get { return result.X; }
      set { SetX(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetX(uint value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    [global::System.CLSCompliant(false)]
    public uint Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetY(uint value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0;
      return this;
    }
  }
  static CMsgZoomToElementAtPosition() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgZoomToElementAtPositionResponse : pb::GeneratedMessage<CMsgZoomToElementAtPositionResponse, CMsgZoomToElementAtPositionResponse.Builder> {
  private CMsgZoomToElementAtPositionResponse() { }
  private static readonly CMsgZoomToElementAtPositionResponse defaultInstance = new CMsgZoomToElementAtPositionResponse().MakeReadOnly();
  private static readonly string[] _cMsgZoomToElementAtPositionResponseFieldNames = new string[] { "browser_handle", "final_height", "final_width", "final_x", "final_y", "initial_height", "initial_width", "initial_x", "initial_y", "zoom" };
  private static readonly uint[] _cMsgZoomToElementAtPositionResponseFieldTags = new uint[] { 8, 72, 64, 48, 56, 40, 32, 16, 24, 85 };
  public static CMsgZoomToElementAtPositionResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgZoomToElementAtPositionResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgZoomToElementAtPositionResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgZoomToElementAtPositionResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgZoomToElementAtPositionResponse, CMsgZoomToElementAtPositionResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgZoomToElementAtPositionResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int InitialXFieldNumber = 2;
  private bool hasInitialX;
  private int initialX_;
  public bool HasInitialX {
    get { return hasInitialX; }
  }
  public int InitialX {
    get { return initialX_; }
  }
  
  public const int InitialYFieldNumber = 3;
  private bool hasInitialY;
  private int initialY_;
  public bool HasInitialY {
    get { return hasInitialY; }
  }
  public int InitialY {
    get { return initialY_; }
  }
  
  public const int InitialWidthFieldNumber = 4;
  private bool hasInitialWidth;
  private uint initialWidth_;
  public bool HasInitialWidth {
    get { return hasInitialWidth; }
  }
  [global::System.CLSCompliant(false)]
  public uint InitialWidth {
    get { return initialWidth_; }
  }
  
  public const int InitialHeightFieldNumber = 5;
  private bool hasInitialHeight;
  private uint initialHeight_;
  public bool HasInitialHeight {
    get { return hasInitialHeight; }
  }
  [global::System.CLSCompliant(false)]
  public uint InitialHeight {
    get { return initialHeight_; }
  }
  
  public const int FinalXFieldNumber = 6;
  private bool hasFinalX;
  private int finalX_;
  public bool HasFinalX {
    get { return hasFinalX; }
  }
  public int FinalX {
    get { return finalX_; }
  }
  
  public const int FinalYFieldNumber = 7;
  private bool hasFinalY;
  private int finalY_;
  public bool HasFinalY {
    get { return hasFinalY; }
  }
  public int FinalY {
    get { return finalY_; }
  }
  
  public const int FinalWidthFieldNumber = 8;
  private bool hasFinalWidth;
  private uint finalWidth_;
  public bool HasFinalWidth {
    get { return hasFinalWidth; }
  }
  [global::System.CLSCompliant(false)]
  public uint FinalWidth {
    get { return finalWidth_; }
  }
  
  public const int FinalHeightFieldNumber = 9;
  private bool hasFinalHeight;
  private uint finalHeight_;
  public bool HasFinalHeight {
    get { return hasFinalHeight; }
  }
  [global::System.CLSCompliant(false)]
  public uint FinalHeight {
    get { return finalHeight_; }
  }
  
  public const int ZoomFieldNumber = 10;
  private bool hasZoom;
  private float zoom_;
  public bool HasZoom {
    get { return hasZoom; }
  }
  public float Zoom {
    get { return zoom_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgZoomToElementAtPositionResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasInitialX) {
      output.WriteSInt32(2, field_names[7], InitialX);
    }
    if (hasInitialY) {
      output.WriteSInt32(3, field_names[8], InitialY);
    }
    if (hasInitialWidth) {
      output.WriteUInt32(4, field_names[6], InitialWidth);
    }
    if (hasInitialHeight) {
      output.WriteUInt32(5, field_names[5], InitialHeight);
    }
    if (hasFinalX) {
      output.WriteSInt32(6, field_names[3], FinalX);
    }
    if (hasFinalY) {
      output.WriteSInt32(7, field_names[4], FinalY);
    }
    if (hasFinalWidth) {
      output.WriteUInt32(8, field_names[2], FinalWidth);
    }
    if (hasFinalHeight) {
      output.WriteUInt32(9, field_names[1], FinalHeight);
    }
    if (hasZoom) {
      output.WriteFloat(10, field_names[9], Zoom);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasInitialX) {
        size += pb::CodedOutputStream.ComputeSInt32Size(2, InitialX);
      }
      if (hasInitialY) {
        size += pb::CodedOutputStream.ComputeSInt32Size(3, InitialY);
      }
      if (hasInitialWidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, InitialWidth);
      }
      if (hasInitialHeight) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, InitialHeight);
      }
      if (hasFinalX) {
        size += pb::CodedOutputStream.ComputeSInt32Size(6, FinalX);
      }
      if (hasFinalY) {
        size += pb::CodedOutputStream.ComputeSInt32Size(7, FinalY);
      }
      if (hasFinalWidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(8, FinalWidth);
      }
      if (hasFinalHeight) {
        size += pb::CodedOutputStream.ComputeUInt32Size(9, FinalHeight);
      }
      if (hasZoom) {
        size += pb::CodedOutputStream.ComputeFloatSize(10, Zoom);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgZoomToElementAtPositionResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgZoomToElementAtPositionResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgZoomToElementAtPositionResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgZoomToElementAtPositionResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgZoomToElementAtPositionResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgZoomToElementAtPositionResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgZoomToElementAtPositionResponse result;
    
    private CMsgZoomToElementAtPositionResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgZoomToElementAtPositionResponse original = result;
        result = new CMsgZoomToElementAtPositionResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgZoomToElementAtPositionResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgZoomToElementAtPositionResponse.Descriptor; }
    }
    
    public override CMsgZoomToElementAtPositionResponse DefaultInstanceForType {
      get { return global::CMsgZoomToElementAtPositionResponse.DefaultInstance; }
    }
    
    public override CMsgZoomToElementAtPositionResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgZoomToElementAtPositionResponse) {
        return MergeFrom((CMsgZoomToElementAtPositionResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgZoomToElementAtPositionResponse other) {
      if (other == global::CMsgZoomToElementAtPositionResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasInitialX) {
        InitialX = other.InitialX;
      }
      if (other.HasInitialY) {
        InitialY = other.InitialY;
      }
      if (other.HasInitialWidth) {
        InitialWidth = other.InitialWidth;
      }
      if (other.HasInitialHeight) {
        InitialHeight = other.InitialHeight;
      }
      if (other.HasFinalX) {
        FinalX = other.FinalX;
      }
      if (other.HasFinalY) {
        FinalY = other.FinalY;
      }
      if (other.HasFinalWidth) {
        FinalWidth = other.FinalWidth;
      }
      if (other.HasFinalHeight) {
        FinalHeight = other.FinalHeight;
      }
      if (other.HasZoom) {
        Zoom = other.Zoom;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgZoomToElementAtPositionResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgZoomToElementAtPositionResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasInitialX = input.ReadSInt32(ref result.initialX_);
            break;
          }
          case 24: {
            result.hasInitialY = input.ReadSInt32(ref result.initialY_);
            break;
          }
          case 32: {
            result.hasInitialWidth = input.ReadUInt32(ref result.initialWidth_);
            break;
          }
          case 40: {
            result.hasInitialHeight = input.ReadUInt32(ref result.initialHeight_);
            break;
          }
          case 48: {
            result.hasFinalX = input.ReadSInt32(ref result.finalX_);
            break;
          }
          case 56: {
            result.hasFinalY = input.ReadSInt32(ref result.finalY_);
            break;
          }
          case 64: {
            result.hasFinalWidth = input.ReadUInt32(ref result.finalWidth_);
            break;
          }
          case 72: {
            result.hasFinalHeight = input.ReadUInt32(ref result.finalHeight_);
            break;
          }
          case 85: {
            result.hasZoom = input.ReadFloat(ref result.zoom_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasInitialX {
      get { return result.hasInitialX; }
    }
    public int InitialX {
      get { return result.InitialX; }
      set { SetInitialX(value); }
    }
    public Builder SetInitialX(int value) {
      PrepareBuilder();
      result.hasInitialX = true;
      result.initialX_ = value;
      return this;
    }
    public Builder ClearInitialX() {
      PrepareBuilder();
      result.hasInitialX = false;
      result.initialX_ = 0;
      return this;
    }
    
    public bool HasInitialY {
      get { return result.hasInitialY; }
    }
    public int InitialY {
      get { return result.InitialY; }
      set { SetInitialY(value); }
    }
    public Builder SetInitialY(int value) {
      PrepareBuilder();
      result.hasInitialY = true;
      result.initialY_ = value;
      return this;
    }
    public Builder ClearInitialY() {
      PrepareBuilder();
      result.hasInitialY = false;
      result.initialY_ = 0;
      return this;
    }
    
    public bool HasInitialWidth {
      get { return result.hasInitialWidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialWidth {
      get { return result.InitialWidth; }
      set { SetInitialWidth(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetInitialWidth(uint value) {
      PrepareBuilder();
      result.hasInitialWidth = true;
      result.initialWidth_ = value;
      return this;
    }
    public Builder ClearInitialWidth() {
      PrepareBuilder();
      result.hasInitialWidth = false;
      result.initialWidth_ = 0;
      return this;
    }
    
    public bool HasInitialHeight {
      get { return result.hasInitialHeight; }
    }
    [global::System.CLSCompliant(false)]
    public uint InitialHeight {
      get { return result.InitialHeight; }
      set { SetInitialHeight(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetInitialHeight(uint value) {
      PrepareBuilder();
      result.hasInitialHeight = true;
      result.initialHeight_ = value;
      return this;
    }
    public Builder ClearInitialHeight() {
      PrepareBuilder();
      result.hasInitialHeight = false;
      result.initialHeight_ = 0;
      return this;
    }
    
    public bool HasFinalX {
      get { return result.hasFinalX; }
    }
    public int FinalX {
      get { return result.FinalX; }
      set { SetFinalX(value); }
    }
    public Builder SetFinalX(int value) {
      PrepareBuilder();
      result.hasFinalX = true;
      result.finalX_ = value;
      return this;
    }
    public Builder ClearFinalX() {
      PrepareBuilder();
      result.hasFinalX = false;
      result.finalX_ = 0;
      return this;
    }
    
    public bool HasFinalY {
      get { return result.hasFinalY; }
    }
    public int FinalY {
      get { return result.FinalY; }
      set { SetFinalY(value); }
    }
    public Builder SetFinalY(int value) {
      PrepareBuilder();
      result.hasFinalY = true;
      result.finalY_ = value;
      return this;
    }
    public Builder ClearFinalY() {
      PrepareBuilder();
      result.hasFinalY = false;
      result.finalY_ = 0;
      return this;
    }
    
    public bool HasFinalWidth {
      get { return result.hasFinalWidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinalWidth {
      get { return result.FinalWidth; }
      set { SetFinalWidth(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFinalWidth(uint value) {
      PrepareBuilder();
      result.hasFinalWidth = true;
      result.finalWidth_ = value;
      return this;
    }
    public Builder ClearFinalWidth() {
      PrepareBuilder();
      result.hasFinalWidth = false;
      result.finalWidth_ = 0;
      return this;
    }
    
    public bool HasFinalHeight {
      get { return result.hasFinalHeight; }
    }
    [global::System.CLSCompliant(false)]
    public uint FinalHeight {
      get { return result.FinalHeight; }
      set { SetFinalHeight(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetFinalHeight(uint value) {
      PrepareBuilder();
      result.hasFinalHeight = true;
      result.finalHeight_ = value;
      return this;
    }
    public Builder ClearFinalHeight() {
      PrepareBuilder();
      result.hasFinalHeight = false;
      result.finalHeight_ = 0;
      return this;
    }
    
    public bool HasZoom {
      get { return result.hasZoom; }
    }
    public float Zoom {
      get { return result.Zoom; }
      set { SetZoom(value); }
    }
    public Builder SetZoom(float value) {
      PrepareBuilder();
      result.hasZoom = true;
      result.zoom_ = value;
      return this;
    }
    public Builder ClearZoom() {
      PrepareBuilder();
      result.hasZoom = false;
      result.zoom_ = 0F;
      return this;
    }
  }
  static CMsgZoomToElementAtPositionResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgScalePageToValue : pb::GeneratedMessage<CMsgScalePageToValue, CMsgScalePageToValue.Builder> {
  private CMsgScalePageToValue() { }
  private static readonly CMsgScalePageToValue defaultInstance = new CMsgScalePageToValue().MakeReadOnly();
  private static readonly string[] _cMsgScalePageToValueFieldNames = new string[] { "browser_handle", "scale", "x", "y" };
  private static readonly uint[] _cMsgScalePageToValueFieldTags = new uint[] { 8, 21, 29, 37 };
  public static CMsgScalePageToValue DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgScalePageToValue DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgScalePageToValue ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgScalePageToValue__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgScalePageToValue, CMsgScalePageToValue.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgScalePageToValue__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ScaleFieldNumber = 2;
  private bool hasScale;
  private float scale_;
  public bool HasScale {
    get { return hasScale; }
  }
  public float Scale {
    get { return scale_; }
  }
  
  public const int XFieldNumber = 3;
  private bool hasX;
  private float x_;
  public bool HasX {
    get { return hasX; }
  }
  public float X {
    get { return x_; }
  }
  
  public const int YFieldNumber = 4;
  private bool hasY;
  private float y_;
  public bool HasY {
    get { return hasY; }
  }
  public float Y {
    get { return y_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgScalePageToValueFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasScale) {
      output.WriteFloat(2, field_names[1], Scale);
    }
    if (hasX) {
      output.WriteFloat(3, field_names[2], X);
    }
    if (hasY) {
      output.WriteFloat(4, field_names[3], Y);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasScale) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Scale);
      }
      if (hasX) {
        size += pb::CodedOutputStream.ComputeFloatSize(3, X);
      }
      if (hasY) {
        size += pb::CodedOutputStream.ComputeFloatSize(4, Y);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgScalePageToValue ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgScalePageToValue ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgScalePageToValue ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgScalePageToValue MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgScalePageToValue prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgScalePageToValue, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgScalePageToValue cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgScalePageToValue result;
    
    private CMsgScalePageToValue PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgScalePageToValue original = result;
        result = new CMsgScalePageToValue();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgScalePageToValue MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgScalePageToValue.Descriptor; }
    }
    
    public override CMsgScalePageToValue DefaultInstanceForType {
      get { return global::CMsgScalePageToValue.DefaultInstance; }
    }
    
    public override CMsgScalePageToValue BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgScalePageToValue) {
        return MergeFrom((CMsgScalePageToValue) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgScalePageToValue other) {
      if (other == global::CMsgScalePageToValue.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasScale) {
        Scale = other.Scale;
      }
      if (other.HasX) {
        X = other.X;
      }
      if (other.HasY) {
        Y = other.Y;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgScalePageToValueFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgScalePageToValueFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 21: {
            result.hasScale = input.ReadFloat(ref result.scale_);
            break;
          }
          case 29: {
            result.hasX = input.ReadFloat(ref result.x_);
            break;
          }
          case 37: {
            result.hasY = input.ReadFloat(ref result.y_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasScale {
      get { return result.hasScale; }
    }
    public float Scale {
      get { return result.Scale; }
      set { SetScale(value); }
    }
    public Builder SetScale(float value) {
      PrepareBuilder();
      result.hasScale = true;
      result.scale_ = value;
      return this;
    }
    public Builder ClearScale() {
      PrepareBuilder();
      result.hasScale = false;
      result.scale_ = 0F;
      return this;
    }
    
    public bool HasX {
      get { return result.hasX; }
    }
    public float X {
      get { return result.X; }
      set { SetX(value); }
    }
    public Builder SetX(float value) {
      PrepareBuilder();
      result.hasX = true;
      result.x_ = value;
      return this;
    }
    public Builder ClearX() {
      PrepareBuilder();
      result.hasX = false;
      result.x_ = 0F;
      return this;
    }
    
    public bool HasY {
      get { return result.hasY; }
    }
    public float Y {
      get { return result.Y; }
      set { SetY(value); }
    }
    public Builder SetY(float value) {
      PrepareBuilder();
      result.hasY = true;
      result.y_ = value;
      return this;
    }
    public Builder ClearY() {
      PrepareBuilder();
      result.hasY = false;
      result.y_ = 0F;
      return this;
    }
  }
  static CMsgScalePageToValue() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgScalePageToValueResponse : pb::GeneratedMessage<CMsgScalePageToValueResponse, CMsgScalePageToValueResponse.Builder> {
  private CMsgScalePageToValueResponse() { }
  private static readonly CMsgScalePageToValueResponse defaultInstance = new CMsgScalePageToValueResponse().MakeReadOnly();
  private static readonly string[] _cMsgScalePageToValueResponseFieldNames = new string[] { "browser_handle", "height_delta", "width_delta", "zoom" };
  private static readonly uint[] _cMsgScalePageToValueResponseFieldTags = new uint[] { 8, 32, 24, 21 };
  public static CMsgScalePageToValueResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgScalePageToValueResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgScalePageToValueResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgScalePageToValueResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgScalePageToValueResponse, CMsgScalePageToValueResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgScalePageToValueResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ZoomFieldNumber = 2;
  private bool hasZoom;
  private float zoom_;
  public bool HasZoom {
    get { return hasZoom; }
  }
  public float Zoom {
    get { return zoom_; }
  }
  
  public const int WidthDeltaFieldNumber = 3;
  private bool hasWidthDelta;
  private int widthDelta_;
  public bool HasWidthDelta {
    get { return hasWidthDelta; }
  }
  public int WidthDelta {
    get { return widthDelta_; }
  }
  
  public const int HeightDeltaFieldNumber = 4;
  private bool hasHeightDelta;
  private int heightDelta_;
  public bool HasHeightDelta {
    get { return hasHeightDelta; }
  }
  public int HeightDelta {
    get { return heightDelta_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgScalePageToValueResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasZoom) {
      output.WriteFloat(2, field_names[3], Zoom);
    }
    if (hasWidthDelta) {
      output.WriteInt32(3, field_names[2], WidthDelta);
    }
    if (hasHeightDelta) {
      output.WriteInt32(4, field_names[1], HeightDelta);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasZoom) {
        size += pb::CodedOutputStream.ComputeFloatSize(2, Zoom);
      }
      if (hasWidthDelta) {
        size += pb::CodedOutputStream.ComputeInt32Size(3, WidthDelta);
      }
      if (hasHeightDelta) {
        size += pb::CodedOutputStream.ComputeInt32Size(4, HeightDelta);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgScalePageToValueResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgScalePageToValueResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgScalePageToValueResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgScalePageToValueResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgScalePageToValueResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgScalePageToValueResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgScalePageToValueResponse result;
    
    private CMsgScalePageToValueResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgScalePageToValueResponse original = result;
        result = new CMsgScalePageToValueResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgScalePageToValueResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgScalePageToValueResponse.Descriptor; }
    }
    
    public override CMsgScalePageToValueResponse DefaultInstanceForType {
      get { return global::CMsgScalePageToValueResponse.DefaultInstance; }
    }
    
    public override CMsgScalePageToValueResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgScalePageToValueResponse) {
        return MergeFrom((CMsgScalePageToValueResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgScalePageToValueResponse other) {
      if (other == global::CMsgScalePageToValueResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasZoom) {
        Zoom = other.Zoom;
      }
      if (other.HasWidthDelta) {
        WidthDelta = other.WidthDelta;
      }
      if (other.HasHeightDelta) {
        HeightDelta = other.HeightDelta;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgScalePageToValueResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgScalePageToValueResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 21: {
            result.hasZoom = input.ReadFloat(ref result.zoom_);
            break;
          }
          case 24: {
            result.hasWidthDelta = input.ReadInt32(ref result.widthDelta_);
            break;
          }
          case 32: {
            result.hasHeightDelta = input.ReadInt32(ref result.heightDelta_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasZoom {
      get { return result.hasZoom; }
    }
    public float Zoom {
      get { return result.Zoom; }
      set { SetZoom(value); }
    }
    public Builder SetZoom(float value) {
      PrepareBuilder();
      result.hasZoom = true;
      result.zoom_ = value;
      return this;
    }
    public Builder ClearZoom() {
      PrepareBuilder();
      result.hasZoom = false;
      result.zoom_ = 0F;
      return this;
    }
    
    public bool HasWidthDelta {
      get { return result.hasWidthDelta; }
    }
    public int WidthDelta {
      get { return result.WidthDelta; }
      set { SetWidthDelta(value); }
    }
    public Builder SetWidthDelta(int value) {
      PrepareBuilder();
      result.hasWidthDelta = true;
      result.widthDelta_ = value;
      return this;
    }
    public Builder ClearWidthDelta() {
      PrepareBuilder();
      result.hasWidthDelta = false;
      result.widthDelta_ = 0;
      return this;
    }
    
    public bool HasHeightDelta {
      get { return result.hasHeightDelta; }
    }
    public int HeightDelta {
      get { return result.HeightDelta; }
      set { SetHeightDelta(value); }
    }
    public Builder SetHeightDelta(int value) {
      PrepareBuilder();
      result.hasHeightDelta = true;
      result.heightDelta_ = value;
      return this;
    }
    public Builder ClearHeightDelta() {
      PrepareBuilder();
      result.hasHeightDelta = false;
      result.heightDelta_ = 0;
      return this;
    }
  }
  static CMsgScalePageToValueResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSavePageToJPEG : pb::GeneratedMessage<CMsgSavePageToJPEG, CMsgSavePageToJPEG.Builder> {
  private CMsgSavePageToJPEG() { }
  private static readonly CMsgSavePageToJPEG defaultInstance = new CMsgSavePageToJPEG().MakeReadOnly();
  private static readonly string[] _cMsgSavePageToJPEGFieldNames = new string[] { "browser_handle", "filename", "height", "url", "width" };
  private static readonly uint[] _cMsgSavePageToJPEGFieldTags = new uint[] { 8, 26, 40, 18, 32 };
  public static CMsgSavePageToJPEG DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSavePageToJPEG DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSavePageToJPEG ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSavePageToJPEG__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSavePageToJPEG, CMsgSavePageToJPEG.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSavePageToJPEG__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int FilenameFieldNumber = 3;
  private bool hasFilename;
  private string filename_ = "";
  public bool HasFilename {
    get { return hasFilename; }
  }
  public string Filename {
    get { return filename_; }
  }
  
  public const int WidthFieldNumber = 4;
  private bool hasWidth;
  private uint width_;
  public bool HasWidth {
    get { return hasWidth; }
  }
  [global::System.CLSCompliant(false)]
  public uint Width {
    get { return width_; }
  }
  
  public const int HeightFieldNumber = 5;
  private bool hasHeight;
  private uint height_;
  public bool HasHeight {
    get { return hasHeight; }
  }
  [global::System.CLSCompliant(false)]
  public uint Height {
    get { return height_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSavePageToJPEGFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[3], Url);
    }
    if (hasFilename) {
      output.WriteString(3, field_names[1], Filename);
    }
    if (hasWidth) {
      output.WriteUInt32(4, field_names[4], Width);
    }
    if (hasHeight) {
      output.WriteUInt32(5, field_names[2], Height);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasFilename) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Filename);
      }
      if (hasWidth) {
        size += pb::CodedOutputStream.ComputeUInt32Size(4, Width);
      }
      if (hasHeight) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Height);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSavePageToJPEG ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSavePageToJPEG ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSavePageToJPEG MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSavePageToJPEG prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSavePageToJPEG, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSavePageToJPEG cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSavePageToJPEG result;
    
    private CMsgSavePageToJPEG PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSavePageToJPEG original = result;
        result = new CMsgSavePageToJPEG();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSavePageToJPEG MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSavePageToJPEG.Descriptor; }
    }
    
    public override CMsgSavePageToJPEG DefaultInstanceForType {
      get { return global::CMsgSavePageToJPEG.DefaultInstance; }
    }
    
    public override CMsgSavePageToJPEG BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSavePageToJPEG) {
        return MergeFrom((CMsgSavePageToJPEG) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSavePageToJPEG other) {
      if (other == global::CMsgSavePageToJPEG.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasFilename) {
        Filename = other.Filename;
      }
      if (other.HasWidth) {
        Width = other.Width;
      }
      if (other.HasHeight) {
        Height = other.Height;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSavePageToJPEGFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSavePageToJPEGFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            result.hasFilename = input.ReadString(ref result.filename_);
            break;
          }
          case 32: {
            result.hasWidth = input.ReadUInt32(ref result.width_);
            break;
          }
          case 40: {
            result.hasHeight = input.ReadUInt32(ref result.height_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasFilename {
      get { return result.hasFilename; }
    }
    public string Filename {
      get { return result.Filename; }
      set { SetFilename(value); }
    }
    public Builder SetFilename(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFilename = true;
      result.filename_ = value;
      return this;
    }
    public Builder ClearFilename() {
      PrepareBuilder();
      result.hasFilename = false;
      result.filename_ = "";
      return this;
    }
    
    public bool HasWidth {
      get { return result.hasWidth; }
    }
    [global::System.CLSCompliant(false)]
    public uint Width {
      get { return result.Width; }
      set { SetWidth(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetWidth(uint value) {
      PrepareBuilder();
      result.hasWidth = true;
      result.width_ = value;
      return this;
    }
    public Builder ClearWidth() {
      PrepareBuilder();
      result.hasWidth = false;
      result.width_ = 0;
      return this;
    }
    
    public bool HasHeight {
      get { return result.hasHeight; }
    }
    [global::System.CLSCompliant(false)]
    public uint Height {
      get { return result.Height; }
      set { SetHeight(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetHeight(uint value) {
      PrepareBuilder();
      result.hasHeight = true;
      result.height_ = value;
      return this;
    }
    public Builder ClearHeight() {
      PrepareBuilder();
      result.hasHeight = false;
      result.height_ = 0;
      return this;
    }
  }
  static CMsgSavePageToJPEG() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSavePageToJPEGResponse : pb::GeneratedMessage<CMsgSavePageToJPEGResponse, CMsgSavePageToJPEGResponse.Builder> {
  private CMsgSavePageToJPEGResponse() { }
  private static readonly CMsgSavePageToJPEGResponse defaultInstance = new CMsgSavePageToJPEGResponse().MakeReadOnly();
  private static readonly string[] _cMsgSavePageToJPEGResponseFieldNames = new string[] { "browser_handle", "filename", "url" };
  private static readonly uint[] _cMsgSavePageToJPEGResponseFieldTags = new uint[] { 8, 26, 18 };
  public static CMsgSavePageToJPEGResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSavePageToJPEGResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSavePageToJPEGResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSavePageToJPEGResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSavePageToJPEGResponse, CMsgSavePageToJPEGResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSavePageToJPEGResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int FilenameFieldNumber = 3;
  private bool hasFilename;
  private string filename_ = "";
  public bool HasFilename {
    get { return hasFilename; }
  }
  public string Filename {
    get { return filename_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSavePageToJPEGResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[2], Url);
    }
    if (hasFilename) {
      output.WriteString(3, field_names[1], Filename);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      if (hasFilename) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Filename);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSavePageToJPEGResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSavePageToJPEGResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSavePageToJPEGResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSavePageToJPEGResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSavePageToJPEGResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSavePageToJPEGResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSavePageToJPEGResponse result;
    
    private CMsgSavePageToJPEGResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSavePageToJPEGResponse original = result;
        result = new CMsgSavePageToJPEGResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSavePageToJPEGResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSavePageToJPEGResponse.Descriptor; }
    }
    
    public override CMsgSavePageToJPEGResponse DefaultInstanceForType {
      get { return global::CMsgSavePageToJPEGResponse.DefaultInstance; }
    }
    
    public override CMsgSavePageToJPEGResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSavePageToJPEGResponse) {
        return MergeFrom((CMsgSavePageToJPEGResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSavePageToJPEGResponse other) {
      if (other == global::CMsgSavePageToJPEGResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.HasFilename) {
        Filename = other.Filename;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSavePageToJPEGResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSavePageToJPEGResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            result.hasFilename = input.ReadString(ref result.filename_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public bool HasFilename {
      get { return result.hasFilename; }
    }
    public string Filename {
      get { return result.Filename; }
      set { SetFilename(value); }
    }
    public Builder SetFilename(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasFilename = true;
      result.filename_ = value;
      return this;
    }
    public Builder ClearFilename() {
      PrepareBuilder();
      result.hasFilename = false;
      result.filename_ = "";
      return this;
    }
  }
  static CMsgSavePageToJPEGResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgJSAlert : pb::GeneratedMessage<CMsgJSAlert, CMsgJSAlert.Builder> {
  private CMsgJSAlert() { }
  private static readonly CMsgJSAlert defaultInstance = new CMsgJSAlert().MakeReadOnly();
  private static readonly string[] _cMsgJSAlertFieldNames = new string[] { "browser_handle", "message" };
  private static readonly uint[] _cMsgJSAlertFieldTags = new uint[] { 8, 18 };
  public static CMsgJSAlert DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgJSAlert DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgJSAlert ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgJSAlert__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgJSAlert, CMsgJSAlert.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgJSAlert__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int MessageFieldNumber = 2;
  private bool hasMessage;
  private string message_ = "";
  public bool HasMessage {
    get { return hasMessage; }
  }
  public string Message {
    get { return message_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgJSAlertFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasMessage) {
      output.WriteString(2, field_names[1], Message);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgJSAlert ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSAlert ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgJSAlert ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgJSAlert ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgJSAlert MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgJSAlert prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgJSAlert, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgJSAlert cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgJSAlert result;
    
    private CMsgJSAlert PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgJSAlert original = result;
        result = new CMsgJSAlert();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgJSAlert MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgJSAlert.Descriptor; }
    }
    
    public override CMsgJSAlert DefaultInstanceForType {
      get { return global::CMsgJSAlert.DefaultInstance; }
    }
    
    public override CMsgJSAlert BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgJSAlert) {
        return MergeFrom((CMsgJSAlert) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgJSAlert other) {
      if (other == global::CMsgJSAlert.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgJSAlertFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgJSAlertFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasMessage = input.ReadString(ref result.message_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasMessage {
      get { return result.hasMessage; }
    }
    public string Message {
      get { return result.Message; }
      set { SetMessage(value); }
    }
    public Builder SetMessage(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMessage = true;
      result.message_ = value;
      return this;
    }
    public Builder ClearMessage() {
      PrepareBuilder();
      result.hasMessage = false;
      result.message_ = "";
      return this;
    }
  }
  static CMsgJSAlert() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgJSConfirm : pb::GeneratedMessage<CMsgJSConfirm, CMsgJSConfirm.Builder> {
  private CMsgJSConfirm() { }
  private static readonly CMsgJSConfirm defaultInstance = new CMsgJSConfirm().MakeReadOnly();
  private static readonly string[] _cMsgJSConfirmFieldNames = new string[] { "browser_handle", "message" };
  private static readonly uint[] _cMsgJSConfirmFieldTags = new uint[] { 8, 18 };
  public static CMsgJSConfirm DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgJSConfirm DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgJSConfirm ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgJSConfirm__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgJSConfirm, CMsgJSConfirm.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgJSConfirm__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int MessageFieldNumber = 2;
  private bool hasMessage;
  private string message_ = "";
  public bool HasMessage {
    get { return hasMessage; }
  }
  public string Message {
    get { return message_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgJSConfirmFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasMessage) {
      output.WriteString(2, field_names[1], Message);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasMessage) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Message);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgJSConfirm ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSConfirm ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgJSConfirm ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgJSConfirm ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgJSConfirm MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgJSConfirm prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgJSConfirm, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgJSConfirm cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgJSConfirm result;
    
    private CMsgJSConfirm PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgJSConfirm original = result;
        result = new CMsgJSConfirm();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgJSConfirm MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgJSConfirm.Descriptor; }
    }
    
    public override CMsgJSConfirm DefaultInstanceForType {
      get { return global::CMsgJSConfirm.DefaultInstance; }
    }
    
    public override CMsgJSConfirm BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgJSConfirm) {
        return MergeFrom((CMsgJSConfirm) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgJSConfirm other) {
      if (other == global::CMsgJSConfirm.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasMessage) {
        Message = other.Message;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgJSConfirmFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgJSConfirmFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasMessage = input.ReadString(ref result.message_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasMessage {
      get { return result.hasMessage; }
    }
    public string Message {
      get { return result.Message; }
      set { SetMessage(value); }
    }
    public Builder SetMessage(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasMessage = true;
      result.message_ = value;
      return this;
    }
    public Builder ClearMessage() {
      PrepareBuilder();
      result.hasMessage = false;
      result.message_ = "";
      return this;
    }
  }
  static CMsgJSConfirm() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgJSDialogResponse : pb::GeneratedMessage<CMsgJSDialogResponse, CMsgJSDialogResponse.Builder> {
  private CMsgJSDialogResponse() { }
  private static readonly CMsgJSDialogResponse defaultInstance = new CMsgJSDialogResponse().MakeReadOnly();
  private static readonly string[] _cMsgJSDialogResponseFieldNames = new string[] { "browser_handle", "result" };
  private static readonly uint[] _cMsgJSDialogResponseFieldTags = new uint[] { 8, 16 };
  public static CMsgJSDialogResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgJSDialogResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgJSDialogResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgJSDialogResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgJSDialogResponse, CMsgJSDialogResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgJSDialogResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ResultFieldNumber = 2;
  private bool hasResult;
  private bool result_;
  public bool HasResult {
    get { return hasResult; }
  }
  public bool Result {
    get { return result_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgJSDialogResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasResult) {
      output.WriteBool(2, field_names[1], Result);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasResult) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Result);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgJSDialogResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgJSDialogResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgJSDialogResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgJSDialogResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgJSDialogResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgJSDialogResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgJSDialogResponse result;
    
    private CMsgJSDialogResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgJSDialogResponse original = result;
        result = new CMsgJSDialogResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgJSDialogResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgJSDialogResponse.Descriptor; }
    }
    
    public override CMsgJSDialogResponse DefaultInstanceForType {
      get { return global::CMsgJSDialogResponse.DefaultInstance; }
    }
    
    public override CMsgJSDialogResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgJSDialogResponse) {
        return MergeFrom((CMsgJSDialogResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgJSDialogResponse other) {
      if (other == global::CMsgJSDialogResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasResult) {
        Result = other.Result;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgJSDialogResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgJSDialogResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasResult = input.ReadBool(ref result.result_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasResult {
      get { return result.hasResult; }
    }
    public bool Result {
      get { return result.Result; }
      set { SetResult(value); }
    }
    public Builder SetResult(bool value) {
      PrepareBuilder();
      result.hasResult = true;
      result.result_ = value;
      return this;
    }
    public Builder ClearResult() {
      PrepareBuilder();
      result.hasResult = false;
      result.result_ = false;
      return this;
    }
  }
  static CMsgJSDialogResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgCanGoBackAndForward : pb::GeneratedMessage<CMsgCanGoBackAndForward, CMsgCanGoBackAndForward.Builder> {
  private CMsgCanGoBackAndForward() { }
  private static readonly CMsgCanGoBackAndForward defaultInstance = new CMsgCanGoBackAndForward().MakeReadOnly();
  private static readonly string[] _cMsgCanGoBackAndForwardFieldNames = new string[] { "bgoback", "bgoforward", "browser_handle" };
  private static readonly uint[] _cMsgCanGoBackAndForwardFieldTags = new uint[] { 16, 24, 8 };
  public static CMsgCanGoBackAndForward DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgCanGoBackAndForward DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgCanGoBackAndForward ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgCanGoBackAndForward__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgCanGoBackAndForward, CMsgCanGoBackAndForward.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgCanGoBackAndForward__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int BgobackFieldNumber = 2;
  private bool hasBgoback;
  private bool bgoback_;
  public bool HasBgoback {
    get { return hasBgoback; }
  }
  public bool Bgoback {
    get { return bgoback_; }
  }
  
  public const int BgoforwardFieldNumber = 3;
  private bool hasBgoforward;
  private bool bgoforward_;
  public bool HasBgoforward {
    get { return hasBgoforward; }
  }
  public bool Bgoforward {
    get { return bgoforward_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgCanGoBackAndForwardFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[2], BrowserHandle);
    }
    if (hasBgoback) {
      output.WriteBool(2, field_names[0], Bgoback);
    }
    if (hasBgoforward) {
      output.WriteBool(3, field_names[1], Bgoforward);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasBgoback) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Bgoback);
      }
      if (hasBgoforward) {
        size += pb::CodedOutputStream.ComputeBoolSize(3, Bgoforward);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgCanGoBackAndForward ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCanGoBackAndForward ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgCanGoBackAndForward MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgCanGoBackAndForward prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgCanGoBackAndForward, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgCanGoBackAndForward cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgCanGoBackAndForward result;
    
    private CMsgCanGoBackAndForward PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgCanGoBackAndForward original = result;
        result = new CMsgCanGoBackAndForward();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgCanGoBackAndForward MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgCanGoBackAndForward.Descriptor; }
    }
    
    public override CMsgCanGoBackAndForward DefaultInstanceForType {
      get { return global::CMsgCanGoBackAndForward.DefaultInstance; }
    }
    
    public override CMsgCanGoBackAndForward BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgCanGoBackAndForward) {
        return MergeFrom((CMsgCanGoBackAndForward) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgCanGoBackAndForward other) {
      if (other == global::CMsgCanGoBackAndForward.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasBgoback) {
        Bgoback = other.Bgoback;
      }
      if (other.HasBgoforward) {
        Bgoforward = other.Bgoforward;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgCanGoBackAndForwardFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgCanGoBackAndForwardFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasBgoback = input.ReadBool(ref result.bgoback_);
            break;
          }
          case 24: {
            result.hasBgoforward = input.ReadBool(ref result.bgoforward_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasBgoback {
      get { return result.hasBgoback; }
    }
    public bool Bgoback {
      get { return result.Bgoback; }
      set { SetBgoback(value); }
    }
    public Builder SetBgoback(bool value) {
      PrepareBuilder();
      result.hasBgoback = true;
      result.bgoback_ = value;
      return this;
    }
    public Builder ClearBgoback() {
      PrepareBuilder();
      result.hasBgoback = false;
      result.bgoback_ = false;
      return this;
    }
    
    public bool HasBgoforward {
      get { return result.hasBgoforward; }
    }
    public bool Bgoforward {
      get { return result.Bgoforward; }
      set { SetBgoforward(value); }
    }
    public Builder SetBgoforward(bool value) {
      PrepareBuilder();
      result.hasBgoforward = true;
      result.bgoforward_ = value;
      return this;
    }
    public Builder ClearBgoforward() {
      PrepareBuilder();
      result.hasBgoforward = false;
      result.bgoforward_ = false;
      return this;
    }
  }
  static CMsgCanGoBackAndForward() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgOpenSteamURL : pb::GeneratedMessage<CMsgOpenSteamURL, CMsgOpenSteamURL.Builder> {
  private CMsgOpenSteamURL() { }
  private static readonly CMsgOpenSteamURL defaultInstance = new CMsgOpenSteamURL().MakeReadOnly();
  private static readonly string[] _cMsgOpenSteamURLFieldNames = new string[] { "browser_handle", "url" };
  private static readonly uint[] _cMsgOpenSteamURLFieldTags = new uint[] { 8, 18 };
  public static CMsgOpenSteamURL DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgOpenSteamURL DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgOpenSteamURL ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgOpenSteamURL__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgOpenSteamURL, CMsgOpenSteamURL.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgOpenSteamURL__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgOpenSteamURLFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[1], Url);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgOpenSteamURL ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgOpenSteamURL ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgOpenSteamURL MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgOpenSteamURL prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgOpenSteamURL, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgOpenSteamURL cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgOpenSteamURL result;
    
    private CMsgOpenSteamURL PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgOpenSteamURL original = result;
        result = new CMsgOpenSteamURL();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgOpenSteamURL MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgOpenSteamURL.Descriptor; }
    }
    
    public override CMsgOpenSteamURL DefaultInstanceForType {
      get { return global::CMsgOpenSteamURL.DefaultInstance; }
    }
    
    public override CMsgOpenSteamURL BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgOpenSteamURL) {
        return MergeFrom((CMsgOpenSteamURL) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgOpenSteamURL other) {
      if (other == global::CMsgOpenSteamURL.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgOpenSteamURLFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgOpenSteamURLFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
  }
  static CMsgOpenSteamURL() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetCookie : pb::GeneratedMessage<CMsgSetCookie, CMsgSetCookie.Builder> {
  private CMsgSetCookie() { }
  private static readonly CMsgSetCookie defaultInstance = new CMsgSetCookie().MakeReadOnly();
  private static readonly string[] _cMsgSetCookieFieldNames = new string[] { "expires", "host", "key", "path", "value" };
  private static readonly uint[] _cMsgSetCookieFieldTags = new uint[] { 40, 34, 10, 26, 18 };
  public static CMsgSetCookie DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetCookie DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetCookie ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetCookie__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetCookie, CMsgSetCookie.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetCookie__FieldAccessorTable; }
  }
  
  public const int KeyFieldNumber = 1;
  private bool hasKey;
  private string key_ = "";
  public bool HasKey {
    get { return hasKey; }
  }
  public string Key {
    get { return key_; }
  }
  
  public const int ValueFieldNumber = 2;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public const int PathFieldNumber = 3;
  private bool hasPath;
  private string path_ = "";
  public bool HasPath {
    get { return hasPath; }
  }
  public string Path {
    get { return path_; }
  }
  
  public const int HostFieldNumber = 4;
  private bool hasHost;
  private string host_ = "";
  public bool HasHost {
    get { return hasHost; }
  }
  public string Host {
    get { return host_; }
  }
  
  public const int ExpiresFieldNumber = 5;
  private bool hasExpires;
  private uint expires_;
  public bool HasExpires {
    get { return hasExpires; }
  }
  [global::System.CLSCompliant(false)]
  public uint Expires {
    get { return expires_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetCookieFieldNames;
    if (hasKey) {
      output.WriteString(1, field_names[2], Key);
    }
    if (hasValue) {
      output.WriteString(2, field_names[4], Value);
    }
    if (hasPath) {
      output.WriteString(3, field_names[3], Path);
    }
    if (hasHost) {
      output.WriteString(4, field_names[1], Host);
    }
    if (hasExpires) {
      output.WriteUInt32(5, field_names[0], Expires);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasKey) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Key);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Value);
      }
      if (hasPath) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Path);
      }
      if (hasHost) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Host);
      }
      if (hasExpires) {
        size += pb::CodedOutputStream.ComputeUInt32Size(5, Expires);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetCookie ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetCookie ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetCookie ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetCookie ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetCookie MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetCookie prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetCookie, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetCookie cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetCookie result;
    
    private CMsgSetCookie PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetCookie original = result;
        result = new CMsgSetCookie();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetCookie MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetCookie.Descriptor; }
    }
    
    public override CMsgSetCookie DefaultInstanceForType {
      get { return global::CMsgSetCookie.DefaultInstance; }
    }
    
    public override CMsgSetCookie BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetCookie) {
        return MergeFrom((CMsgSetCookie) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetCookie other) {
      if (other == global::CMsgSetCookie.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasKey) {
        Key = other.Key;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      if (other.HasHost) {
        Host = other.Host;
      }
      if (other.HasExpires) {
        Expires = other.Expires;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetCookieFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetCookieFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasKey = input.ReadString(ref result.key_);
            break;
          }
          case 18: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
          case 26: {
            result.hasPath = input.ReadString(ref result.path_);
            break;
          }
          case 34: {
            result.hasHost = input.ReadString(ref result.host_);
            break;
          }
          case 40: {
            result.hasExpires = input.ReadUInt32(ref result.expires_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasKey {
      get { return result.hasKey; }
    }
    public string Key {
      get { return result.Key; }
      set { SetKey(value); }
    }
    public Builder SetKey(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasKey = true;
      result.key_ = value;
      return this;
    }
    public Builder ClearKey() {
      PrepareBuilder();
      result.hasKey = false;
      result.key_ = "";
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
    
    public bool HasPath {
      get { return result.hasPath; }
    }
    public string Path {
      get { return result.Path; }
      set { SetPath(value); }
    }
    public Builder SetPath(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPath = true;
      result.path_ = value;
      return this;
    }
    public Builder ClearPath() {
      PrepareBuilder();
      result.hasPath = false;
      result.path_ = "";
      return this;
    }
    
    public bool HasHost {
      get { return result.hasHost; }
    }
    public string Host {
      get { return result.Host; }
      set { SetHost(value); }
    }
    public Builder SetHost(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasHost = true;
      result.host_ = value;
      return this;
    }
    public Builder ClearHost() {
      PrepareBuilder();
      result.hasHost = false;
      result.host_ = "";
      return this;
    }
    
    public bool HasExpires {
      get { return result.hasExpires; }
    }
    [global::System.CLSCompliant(false)]
    public uint Expires {
      get { return result.Expires; }
      set { SetExpires(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetExpires(uint value) {
      PrepareBuilder();
      result.hasExpires = true;
      result.expires_ = value;
      return this;
    }
    public Builder ClearExpires() {
      PrepareBuilder();
      result.hasExpires = false;
      result.expires_ = 0;
      return this;
    }
  }
  static CMsgSetCookie() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgSetTargetFrameRate : pb::GeneratedMessage<CMsgSetTargetFrameRate, CMsgSetTargetFrameRate.Builder> {
  private CMsgSetTargetFrameRate() { }
  private static readonly CMsgSetTargetFrameRate defaultInstance = new CMsgSetTargetFrameRate().MakeReadOnly();
  private static readonly string[] _cMsgSetTargetFrameRateFieldNames = new string[] { "nTargetFrameRate" };
  private static readonly uint[] _cMsgSetTargetFrameRateFieldTags = new uint[] { 8 };
  public static CMsgSetTargetFrameRate DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgSetTargetFrameRate DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgSetTargetFrameRate ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgSetTargetFrameRate__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgSetTargetFrameRate, CMsgSetTargetFrameRate.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgSetTargetFrameRate__FieldAccessorTable; }
  }
  
  public const int NTargetFrameRateFieldNumber = 1;
  private bool hasNTargetFrameRate;
  private uint nTargetFrameRate_;
  public bool HasNTargetFrameRate {
    get { return hasNTargetFrameRate; }
  }
  [global::System.CLSCompliant(false)]
  public uint NTargetFrameRate {
    get { return nTargetFrameRate_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgSetTargetFrameRateFieldNames;
    if (hasNTargetFrameRate) {
      output.WriteUInt32(1, field_names[0], NTargetFrameRate);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasNTargetFrameRate) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, NTargetFrameRate);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgSetTargetFrameRate ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgSetTargetFrameRate ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgSetTargetFrameRate MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgSetTargetFrameRate prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgSetTargetFrameRate, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgSetTargetFrameRate cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgSetTargetFrameRate result;
    
    private CMsgSetTargetFrameRate PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgSetTargetFrameRate original = result;
        result = new CMsgSetTargetFrameRate();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgSetTargetFrameRate MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgSetTargetFrameRate.Descriptor; }
    }
    
    public override CMsgSetTargetFrameRate DefaultInstanceForType {
      get { return global::CMsgSetTargetFrameRate.DefaultInstance; }
    }
    
    public override CMsgSetTargetFrameRate BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgSetTargetFrameRate) {
        return MergeFrom((CMsgSetTargetFrameRate) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgSetTargetFrameRate other) {
      if (other == global::CMsgSetTargetFrameRate.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasNTargetFrameRate) {
        NTargetFrameRate = other.NTargetFrameRate;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgSetTargetFrameRateFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgSetTargetFrameRateFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasNTargetFrameRate = input.ReadUInt32(ref result.nTargetFrameRate_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasNTargetFrameRate {
      get { return result.hasNTargetFrameRate; }
    }
    [global::System.CLSCompliant(false)]
    public uint NTargetFrameRate {
      get { return result.NTargetFrameRate; }
      set { SetNTargetFrameRate(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetNTargetFrameRate(uint value) {
      PrepareBuilder();
      result.hasNTargetFrameRate = true;
      result.nTargetFrameRate_ = value;
      return this;
    }
    public Builder ClearNTargetFrameRate() {
      PrepareBuilder();
      result.hasNTargetFrameRate = false;
      result.nTargetFrameRate_ = 0;
      return this;
    }
  }
  static CMsgSetTargetFrameRate() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFullRepaint : pb::GeneratedMessage<CMsgFullRepaint, CMsgFullRepaint.Builder> {
  private CMsgFullRepaint() { }
  private static readonly CMsgFullRepaint defaultInstance = new CMsgFullRepaint().MakeReadOnly();
  private static readonly string[] _cMsgFullRepaintFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgFullRepaintFieldTags = new uint[] { 8 };
  public static CMsgFullRepaint DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFullRepaint DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFullRepaint ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFullRepaint__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFullRepaint, CMsgFullRepaint.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFullRepaint__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFullRepaintFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFullRepaint ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFullRepaint ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFullRepaint ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFullRepaint ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFullRepaint MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFullRepaint prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFullRepaint, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFullRepaint cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFullRepaint result;
    
    private CMsgFullRepaint PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFullRepaint original = result;
        result = new CMsgFullRepaint();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFullRepaint MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFullRepaint.Descriptor; }
    }
    
    public override CMsgFullRepaint DefaultInstanceForType {
      get { return global::CMsgFullRepaint.DefaultInstance; }
    }
    
    public override CMsgFullRepaint BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFullRepaint) {
        return MergeFrom((CMsgFullRepaint) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFullRepaint other) {
      if (other == global::CMsgFullRepaint.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFullRepaintFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFullRepaintFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgFullRepaint() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgRequestFullScreen : pb::GeneratedMessage<CMsgRequestFullScreen, CMsgRequestFullScreen.Builder> {
  private CMsgRequestFullScreen() { }
  private static readonly CMsgRequestFullScreen defaultInstance = new CMsgRequestFullScreen().MakeReadOnly();
  private static readonly string[] _cMsgRequestFullScreenFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgRequestFullScreenFieldTags = new uint[] { 8 };
  public static CMsgRequestFullScreen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgRequestFullScreen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgRequestFullScreen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgRequestFullScreen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgRequestFullScreen, CMsgRequestFullScreen.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgRequestFullScreen__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgRequestFullScreenFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgRequestFullScreen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgRequestFullScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgRequestFullScreen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgRequestFullScreen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgRequestFullScreen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgRequestFullScreen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgRequestFullScreen result;
    
    private CMsgRequestFullScreen PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgRequestFullScreen original = result;
        result = new CMsgRequestFullScreen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgRequestFullScreen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgRequestFullScreen.Descriptor; }
    }
    
    public override CMsgRequestFullScreen DefaultInstanceForType {
      get { return global::CMsgRequestFullScreen.DefaultInstance; }
    }
    
    public override CMsgRequestFullScreen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgRequestFullScreen) {
        return MergeFrom((CMsgRequestFullScreen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgRequestFullScreen other) {
      if (other == global::CMsgRequestFullScreen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgRequestFullScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgRequestFullScreenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgRequestFullScreen() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgRequestFullScreenResponse : pb::GeneratedMessage<CMsgRequestFullScreenResponse, CMsgRequestFullScreenResponse.Builder> {
  private CMsgRequestFullScreenResponse() { }
  private static readonly CMsgRequestFullScreenResponse defaultInstance = new CMsgRequestFullScreenResponse().MakeReadOnly();
  private static readonly string[] _cMsgRequestFullScreenResponseFieldNames = new string[] { "ballow", "browser_handle" };
  private static readonly uint[] _cMsgRequestFullScreenResponseFieldTags = new uint[] { 16, 8 };
  public static CMsgRequestFullScreenResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgRequestFullScreenResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgRequestFullScreenResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgRequestFullScreenResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgRequestFullScreenResponse, CMsgRequestFullScreenResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgRequestFullScreenResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int BallowFieldNumber = 2;
  private bool hasBallow;
  private bool ballow_;
  public bool HasBallow {
    get { return hasBallow; }
  }
  public bool Ballow {
    get { return ballow_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgRequestFullScreenResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[1], BrowserHandle);
    }
    if (hasBallow) {
      output.WriteBool(2, field_names[0], Ballow);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasBallow) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, Ballow);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgRequestFullScreenResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgRequestFullScreenResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgRequestFullScreenResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgRequestFullScreenResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgRequestFullScreenResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgRequestFullScreenResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgRequestFullScreenResponse result;
    
    private CMsgRequestFullScreenResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgRequestFullScreenResponse original = result;
        result = new CMsgRequestFullScreenResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgRequestFullScreenResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgRequestFullScreenResponse.Descriptor; }
    }
    
    public override CMsgRequestFullScreenResponse DefaultInstanceForType {
      get { return global::CMsgRequestFullScreenResponse.DefaultInstance; }
    }
    
    public override CMsgRequestFullScreenResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgRequestFullScreenResponse) {
        return MergeFrom((CMsgRequestFullScreenResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgRequestFullScreenResponse other) {
      if (other == global::CMsgRequestFullScreenResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasBallow) {
        Ballow = other.Ballow;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgRequestFullScreenResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgRequestFullScreenResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasBallow = input.ReadBool(ref result.ballow_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasBallow {
      get { return result.hasBallow; }
    }
    public bool Ballow {
      get { return result.Ballow; }
      set { SetBallow(value); }
    }
    public Builder SetBallow(bool value) {
      PrepareBuilder();
      result.hasBallow = true;
      result.ballow_ = value;
      return this;
    }
    public Builder ClearBallow() {
      PrepareBuilder();
      result.hasBallow = false;
      result.ballow_ = false;
      return this;
    }
  }
  static CMsgRequestFullScreenResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgExitFullScreen : pb::GeneratedMessage<CMsgExitFullScreen, CMsgExitFullScreen.Builder> {
  private CMsgExitFullScreen() { }
  private static readonly CMsgExitFullScreen defaultInstance = new CMsgExitFullScreen().MakeReadOnly();
  private static readonly string[] _cMsgExitFullScreenFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgExitFullScreenFieldTags = new uint[] { 8 };
  public static CMsgExitFullScreen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgExitFullScreen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgExitFullScreen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgExitFullScreen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgExitFullScreen, CMsgExitFullScreen.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgExitFullScreen__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgExitFullScreenFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgExitFullScreen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgExitFullScreen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgExitFullScreen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgExitFullScreen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgExitFullScreen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgExitFullScreen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgExitFullScreen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgExitFullScreen result;
    
    private CMsgExitFullScreen PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgExitFullScreen original = result;
        result = new CMsgExitFullScreen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgExitFullScreen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgExitFullScreen.Descriptor; }
    }
    
    public override CMsgExitFullScreen DefaultInstanceForType {
      get { return global::CMsgExitFullScreen.DefaultInstance; }
    }
    
    public override CMsgExitFullScreen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgExitFullScreen) {
        return MergeFrom((CMsgExitFullScreen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgExitFullScreen other) {
      if (other == global::CMsgExitFullScreen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgExitFullScreenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgExitFullScreenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgExitFullScreen() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGetCookiesForURL : pb::GeneratedMessage<CMsgGetCookiesForURL, CMsgGetCookiesForURL.Builder> {
  private CMsgGetCookiesForURL() { }
  private static readonly CMsgGetCookiesForURL defaultInstance = new CMsgGetCookiesForURL().MakeReadOnly();
  private static readonly string[] _cMsgGetCookiesForURLFieldNames = new string[] { "browser_handle", "url" };
  private static readonly uint[] _cMsgGetCookiesForURLFieldTags = new uint[] { 8, 18 };
  public static CMsgGetCookiesForURL DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGetCookiesForURL DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGetCookiesForURL ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgGetCookiesForURL__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGetCookiesForURL, CMsgGetCookiesForURL.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgGetCookiesForURL__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGetCookiesForURLFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[1], Url);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGetCookiesForURL ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetCookiesForURL ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGetCookiesForURL MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGetCookiesForURL prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGetCookiesForURL, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGetCookiesForURL cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGetCookiesForURL result;
    
    private CMsgGetCookiesForURL PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGetCookiesForURL original = result;
        result = new CMsgGetCookiesForURL();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGetCookiesForURL MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGetCookiesForURL.Descriptor; }
    }
    
    public override CMsgGetCookiesForURL DefaultInstanceForType {
      get { return global::CMsgGetCookiesForURL.DefaultInstance; }
    }
    
    public override CMsgGetCookiesForURL BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGetCookiesForURL) {
        return MergeFrom((CMsgGetCookiesForURL) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGetCookiesForURL other) {
      if (other == global::CMsgGetCookiesForURL.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGetCookiesForURLFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGetCookiesForURLFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
  }
  static CMsgGetCookiesForURL() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CCookie : pb::GeneratedMessage<CCookie, CCookie.Builder> {
  private CCookie() { }
  private static readonly CCookie defaultInstance = new CCookie().MakeReadOnly();
  private static readonly string[] _cCookieFieldNames = new string[] { "domain", "name", "path", "value" };
  private static readonly uint[] _cCookieFieldTags = new uint[] { 26, 10, 34, 18 };
  public static CCookie DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CCookie DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CCookie ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CCookie__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CCookie, CCookie.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CCookie__FieldAccessorTable; }
  }
  
  public const int NameFieldNumber = 1;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int ValueFieldNumber = 2;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public const int DomainFieldNumber = 3;
  private bool hasDomain;
  private string domain_ = "";
  public bool HasDomain {
    get { return hasDomain; }
  }
  public string Domain {
    get { return domain_; }
  }
  
  public const int PathFieldNumber = 4;
  private bool hasPath;
  private string path_ = "";
  public bool HasPath {
    get { return hasPath; }
  }
  public string Path {
    get { return path_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cCookieFieldNames;
    if (hasName) {
      output.WriteString(1, field_names[1], Name);
    }
    if (hasValue) {
      output.WriteString(2, field_names[3], Value);
    }
    if (hasDomain) {
      output.WriteString(3, field_names[0], Domain);
    }
    if (hasPath) {
      output.WriteString(4, field_names[2], Path);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(1, Name);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Value);
      }
      if (hasDomain) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Domain);
      }
      if (hasPath) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Path);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CCookie ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CCookie ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CCookie ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CCookie ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CCookie ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CCookie ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CCookie ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CCookie ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CCookie ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CCookie ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CCookie MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CCookie prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CCookie, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CCookie cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CCookie result;
    
    private CCookie PrepareBuilder() {
      if (resultIsReadOnly) {
        CCookie original = result;
        result = new CCookie();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CCookie MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CCookie.Descriptor; }
    }
    
    public override CCookie DefaultInstanceForType {
      get { return global::CCookie.DefaultInstance; }
    }
    
    public override CCookie BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CCookie) {
        return MergeFrom((CCookie) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CCookie other) {
      if (other == global::CCookie.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      if (other.HasDomain) {
        Domain = other.Domain;
      }
      if (other.HasPath) {
        Path = other.Path;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cCookieFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cCookieFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 10: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 18: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
          case 26: {
            result.hasDomain = input.ReadString(ref result.domain_);
            break;
          }
          case 34: {
            result.hasPath = input.ReadString(ref result.path_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
    
    public bool HasDomain {
      get { return result.hasDomain; }
    }
    public string Domain {
      get { return result.Domain; }
      set { SetDomain(value); }
    }
    public Builder SetDomain(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasDomain = true;
      result.domain_ = value;
      return this;
    }
    public Builder ClearDomain() {
      PrepareBuilder();
      result.hasDomain = false;
      result.domain_ = "";
      return this;
    }
    
    public bool HasPath {
      get { return result.hasPath; }
    }
    public string Path {
      get { return result.Path; }
      set { SetPath(value); }
    }
    public Builder SetPath(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasPath = true;
      result.path_ = value;
      return this;
    }
    public Builder ClearPath() {
      PrepareBuilder();
      result.hasPath = false;
      result.path_ = "";
      return this;
    }
  }
  static CCookie() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgGetCookiesForURLResponse : pb::GeneratedMessage<CMsgGetCookiesForURLResponse, CMsgGetCookiesForURLResponse.Builder> {
  private CMsgGetCookiesForURLResponse() { }
  private static readonly CMsgGetCookiesForURLResponse defaultInstance = new CMsgGetCookiesForURLResponse().MakeReadOnly();
  private static readonly string[] _cMsgGetCookiesForURLResponseFieldNames = new string[] { "browser_handle", "cookies", "url" };
  private static readonly uint[] _cMsgGetCookiesForURLResponseFieldTags = new uint[] { 8, 26, 18 };
  public static CMsgGetCookiesForURLResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgGetCookiesForURLResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgGetCookiesForURLResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgGetCookiesForURLResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgGetCookiesForURLResponse, CMsgGetCookiesForURLResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgGetCookiesForURLResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int UrlFieldNumber = 2;
  private bool hasUrl;
  private string url_ = "";
  public bool HasUrl {
    get { return hasUrl; }
  }
  public string Url {
    get { return url_; }
  }
  
  public const int CookiesFieldNumber = 3;
  private pbc::PopsicleList<global::CCookie> cookies_ = new pbc::PopsicleList<global::CCookie>();
  public scg::IList<global::CCookie> CookiesList {
    get { return cookies_; }
  }
  public int CookiesCount {
    get { return cookies_.Count; }
  }
  public global::CCookie GetCookies(int index) {
    return cookies_[index];
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgGetCookiesForURLResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasUrl) {
      output.WriteString(2, field_names[2], Url);
    }
    if (cookies_.Count > 0) {
      output.WriteMessageArray(3, field_names[1], cookies_);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasUrl) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Url);
      }
      foreach (global::CCookie element in CookiesList) {
        size += pb::CodedOutputStream.ComputeMessageSize(3, element);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgGetCookiesForURLResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgGetCookiesForURLResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgGetCookiesForURLResponse MakeReadOnly() {
    cookies_.MakeReadOnly();
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgGetCookiesForURLResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgGetCookiesForURLResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgGetCookiesForURLResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgGetCookiesForURLResponse result;
    
    private CMsgGetCookiesForURLResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgGetCookiesForURLResponse original = result;
        result = new CMsgGetCookiesForURLResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgGetCookiesForURLResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgGetCookiesForURLResponse.Descriptor; }
    }
    
    public override CMsgGetCookiesForURLResponse DefaultInstanceForType {
      get { return global::CMsgGetCookiesForURLResponse.DefaultInstance; }
    }
    
    public override CMsgGetCookiesForURLResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgGetCookiesForURLResponse) {
        return MergeFrom((CMsgGetCookiesForURLResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgGetCookiesForURLResponse other) {
      if (other == global::CMsgGetCookiesForURLResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasUrl) {
        Url = other.Url;
      }
      if (other.cookies_.Count != 0) {
        result.cookies_.Add(other.cookies_);
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgGetCookiesForURLResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgGetCookiesForURLResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasUrl = input.ReadString(ref result.url_);
            break;
          }
          case 26: {
            input.ReadMessageArray(tag, field_name, result.cookies_, global::CCookie.DefaultInstance, extensionRegistry);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasUrl {
      get { return result.hasUrl; }
    }
    public string Url {
      get { return result.Url; }
      set { SetUrl(value); }
    }
    public Builder SetUrl(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasUrl = true;
      result.url_ = value;
      return this;
    }
    public Builder ClearUrl() {
      PrepareBuilder();
      result.hasUrl = false;
      result.url_ = "";
      return this;
    }
    
    public pbc::IPopsicleList<global::CCookie> CookiesList {
      get { return PrepareBuilder().cookies_; }
    }
    public int CookiesCount {
      get { return result.CookiesCount; }
    }
    public global::CCookie GetCookies(int index) {
      return result.GetCookies(index);
    }
    public Builder SetCookies(int index, global::CCookie value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.cookies_[index] = value;
      return this;
    }
    public Builder SetCookies(int index, global::CCookie.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.cookies_[index] = builderForValue.Build();
      return this;
    }
    public Builder AddCookies(global::CCookie value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.cookies_.Add(value);
      return this;
    }
    public Builder AddCookies(global::CCookie.Builder builderForValue) {
      pb::ThrowHelper.ThrowIfNull(builderForValue, "builderForValue");
      PrepareBuilder();
      result.cookies_.Add(builderForValue.Build());
      return this;
    }
    public Builder AddRangeCookies(scg::IEnumerable<global::CCookie> values) {
      PrepareBuilder();
      result.cookies_.Add(values);
      return this;
    }
    public Builder ClearCookies() {
      PrepareBuilder();
      result.cookies_.Clear();
      return this;
    }
  }
  static CMsgGetCookiesForURLResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgNodeHasFocus : pb::GeneratedMessage<CMsgNodeHasFocus, CMsgNodeHasFocus.Builder> {
  private CMsgNodeHasFocus() { }
  private static readonly CMsgNodeHasFocus defaultInstance = new CMsgNodeHasFocus().MakeReadOnly();
  private static readonly string[] _cMsgNodeHasFocusFieldNames = new string[] { "bHasMultipleInputs", "bInput", "browser_handle", "elementtagname", "input_type", "name", "searchbuttontext" };
  private static readonly uint[] _cMsgNodeHasFocusFieldTags = new uint[] { 48, 16, 8, 34, 58, 26, 42 };
  public static CMsgNodeHasFocus DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgNodeHasFocus DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgNodeHasFocus ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgNodeHasFocus__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgNodeHasFocus, CMsgNodeHasFocus.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgNodeHasFocus__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int BInputFieldNumber = 2;
  private bool hasBInput;
  private bool bInput_;
  public bool HasBInput {
    get { return hasBInput; }
  }
  public bool BInput {
    get { return bInput_; }
  }
  
  public const int NameFieldNumber = 3;
  private bool hasName;
  private string name_ = "";
  public bool HasName {
    get { return hasName; }
  }
  public string Name {
    get { return name_; }
  }
  
  public const int ElementtagnameFieldNumber = 4;
  private bool hasElementtagname;
  private string elementtagname_ = "";
  public bool HasElementtagname {
    get { return hasElementtagname; }
  }
  public string Elementtagname {
    get { return elementtagname_; }
  }
  
  public const int SearchbuttontextFieldNumber = 5;
  private bool hasSearchbuttontext;
  private string searchbuttontext_ = "";
  public bool HasSearchbuttontext {
    get { return hasSearchbuttontext; }
  }
  public string Searchbuttontext {
    get { return searchbuttontext_; }
  }
  
  public const int BHasMultipleInputsFieldNumber = 6;
  private bool hasBHasMultipleInputs;
  private bool bHasMultipleInputs_;
  public bool HasBHasMultipleInputs {
    get { return hasBHasMultipleInputs; }
  }
  public bool BHasMultipleInputs {
    get { return bHasMultipleInputs_; }
  }
  
  public const int InputTypeFieldNumber = 7;
  private bool hasInputType;
  private string inputType_ = "";
  public bool HasInputType {
    get { return hasInputType; }
  }
  public string InputType {
    get { return inputType_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgNodeHasFocusFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[2], BrowserHandle);
    }
    if (hasBInput) {
      output.WriteBool(2, field_names[1], BInput);
    }
    if (hasName) {
      output.WriteString(3, field_names[5], Name);
    }
    if (hasElementtagname) {
      output.WriteString(4, field_names[3], Elementtagname);
    }
    if (hasSearchbuttontext) {
      output.WriteString(5, field_names[6], Searchbuttontext);
    }
    if (hasBHasMultipleInputs) {
      output.WriteBool(6, field_names[0], BHasMultipleInputs);
    }
    if (hasInputType) {
      output.WriteString(7, field_names[4], InputType);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasBInput) {
        size += pb::CodedOutputStream.ComputeBoolSize(2, BInput);
      }
      if (hasName) {
        size += pb::CodedOutputStream.ComputeStringSize(3, Name);
      }
      if (hasElementtagname) {
        size += pb::CodedOutputStream.ComputeStringSize(4, Elementtagname);
      }
      if (hasSearchbuttontext) {
        size += pb::CodedOutputStream.ComputeStringSize(5, Searchbuttontext);
      }
      if (hasBHasMultipleInputs) {
        size += pb::CodedOutputStream.ComputeBoolSize(6, BHasMultipleInputs);
      }
      if (hasInputType) {
        size += pb::CodedOutputStream.ComputeStringSize(7, InputType);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgNodeHasFocus ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgNodeHasFocus ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgNodeHasFocus MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgNodeHasFocus prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgNodeHasFocus, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgNodeHasFocus cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgNodeHasFocus result;
    
    private CMsgNodeHasFocus PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgNodeHasFocus original = result;
        result = new CMsgNodeHasFocus();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgNodeHasFocus MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgNodeHasFocus.Descriptor; }
    }
    
    public override CMsgNodeHasFocus DefaultInstanceForType {
      get { return global::CMsgNodeHasFocus.DefaultInstance; }
    }
    
    public override CMsgNodeHasFocus BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgNodeHasFocus) {
        return MergeFrom((CMsgNodeHasFocus) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgNodeHasFocus other) {
      if (other == global::CMsgNodeHasFocus.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasBInput) {
        BInput = other.BInput;
      }
      if (other.HasName) {
        Name = other.Name;
      }
      if (other.HasElementtagname) {
        Elementtagname = other.Elementtagname;
      }
      if (other.HasSearchbuttontext) {
        Searchbuttontext = other.Searchbuttontext;
      }
      if (other.HasBHasMultipleInputs) {
        BHasMultipleInputs = other.BHasMultipleInputs;
      }
      if (other.HasInputType) {
        InputType = other.InputType;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgNodeHasFocusFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgNodeHasFocusFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasBInput = input.ReadBool(ref result.bInput_);
            break;
          }
          case 26: {
            result.hasName = input.ReadString(ref result.name_);
            break;
          }
          case 34: {
            result.hasElementtagname = input.ReadString(ref result.elementtagname_);
            break;
          }
          case 42: {
            result.hasSearchbuttontext = input.ReadString(ref result.searchbuttontext_);
            break;
          }
          case 48: {
            result.hasBHasMultipleInputs = input.ReadBool(ref result.bHasMultipleInputs_);
            break;
          }
          case 58: {
            result.hasInputType = input.ReadString(ref result.inputType_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasBInput {
      get { return result.hasBInput; }
    }
    public bool BInput {
      get { return result.BInput; }
      set { SetBInput(value); }
    }
    public Builder SetBInput(bool value) {
      PrepareBuilder();
      result.hasBInput = true;
      result.bInput_ = value;
      return this;
    }
    public Builder ClearBInput() {
      PrepareBuilder();
      result.hasBInput = false;
      result.bInput_ = false;
      return this;
    }
    
    public bool HasName {
      get { return result.hasName; }
    }
    public string Name {
      get { return result.Name; }
      set { SetName(value); }
    }
    public Builder SetName(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasName = true;
      result.name_ = value;
      return this;
    }
    public Builder ClearName() {
      PrepareBuilder();
      result.hasName = false;
      result.name_ = "";
      return this;
    }
    
    public bool HasElementtagname {
      get { return result.hasElementtagname; }
    }
    public string Elementtagname {
      get { return result.Elementtagname; }
      set { SetElementtagname(value); }
    }
    public Builder SetElementtagname(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasElementtagname = true;
      result.elementtagname_ = value;
      return this;
    }
    public Builder ClearElementtagname() {
      PrepareBuilder();
      result.hasElementtagname = false;
      result.elementtagname_ = "";
      return this;
    }
    
    public bool HasSearchbuttontext {
      get { return result.hasSearchbuttontext; }
    }
    public string Searchbuttontext {
      get { return result.Searchbuttontext; }
      set { SetSearchbuttontext(value); }
    }
    public Builder SetSearchbuttontext(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasSearchbuttontext = true;
      result.searchbuttontext_ = value;
      return this;
    }
    public Builder ClearSearchbuttontext() {
      PrepareBuilder();
      result.hasSearchbuttontext = false;
      result.searchbuttontext_ = "";
      return this;
    }
    
    public bool HasBHasMultipleInputs {
      get { return result.hasBHasMultipleInputs; }
    }
    public bool BHasMultipleInputs {
      get { return result.BHasMultipleInputs; }
      set { SetBHasMultipleInputs(value); }
    }
    public Builder SetBHasMultipleInputs(bool value) {
      PrepareBuilder();
      result.hasBHasMultipleInputs = true;
      result.bHasMultipleInputs_ = value;
      return this;
    }
    public Builder ClearBHasMultipleInputs() {
      PrepareBuilder();
      result.hasBHasMultipleInputs = false;
      result.bHasMultipleInputs_ = false;
      return this;
    }
    
    public bool HasInputType {
      get { return result.hasInputType; }
    }
    public string InputType {
      get { return result.InputType; }
      set { SetInputType(value); }
    }
    public Builder SetInputType(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasInputType = true;
      result.inputType_ = value;
      return this;
    }
    public Builder ClearInputType() {
      PrepareBuilder();
      result.hasInputType = false;
      result.inputType_ = "";
      return this;
    }
  }
  static CMsgNodeHasFocus() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgZoomToFocusedElement : pb::GeneratedMessage<CMsgZoomToFocusedElement, CMsgZoomToFocusedElement.Builder> {
  private CMsgZoomToFocusedElement() { }
  private static readonly CMsgZoomToFocusedElement defaultInstance = new CMsgZoomToFocusedElement().MakeReadOnly();
  private static readonly string[] _cMsgZoomToFocusedElementFieldNames = new string[] { "browser_handle", "leftoffset", "topoffset" };
  private static readonly uint[] _cMsgZoomToFocusedElementFieldTags = new uint[] { 8, 16, 24 };
  public static CMsgZoomToFocusedElement DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgZoomToFocusedElement DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgZoomToFocusedElement ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgZoomToFocusedElement__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgZoomToFocusedElement, CMsgZoomToFocusedElement.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgZoomToFocusedElement__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int LeftoffsetFieldNumber = 2;
  private bool hasLeftoffset;
  private uint leftoffset_;
  public bool HasLeftoffset {
    get { return hasLeftoffset; }
  }
  [global::System.CLSCompliant(false)]
  public uint Leftoffset {
    get { return leftoffset_; }
  }
  
  public const int TopoffsetFieldNumber = 3;
  private bool hasTopoffset;
  private uint topoffset_;
  public bool HasTopoffset {
    get { return hasTopoffset; }
  }
  [global::System.CLSCompliant(false)]
  public uint Topoffset {
    get { return topoffset_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgZoomToFocusedElementFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasLeftoffset) {
      output.WriteUInt32(2, field_names[1], Leftoffset);
    }
    if (hasTopoffset) {
      output.WriteUInt32(3, field_names[2], Topoffset);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasLeftoffset) {
        size += pb::CodedOutputStream.ComputeUInt32Size(2, Leftoffset);
      }
      if (hasTopoffset) {
        size += pb::CodedOutputStream.ComputeUInt32Size(3, Topoffset);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgZoomToFocusedElement ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgZoomToFocusedElement ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgZoomToFocusedElement MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgZoomToFocusedElement prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgZoomToFocusedElement, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgZoomToFocusedElement cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgZoomToFocusedElement result;
    
    private CMsgZoomToFocusedElement PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgZoomToFocusedElement original = result;
        result = new CMsgZoomToFocusedElement();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgZoomToFocusedElement MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgZoomToFocusedElement.Descriptor; }
    }
    
    public override CMsgZoomToFocusedElement DefaultInstanceForType {
      get { return global::CMsgZoomToFocusedElement.DefaultInstance; }
    }
    
    public override CMsgZoomToFocusedElement BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgZoomToFocusedElement) {
        return MergeFrom((CMsgZoomToFocusedElement) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgZoomToFocusedElement other) {
      if (other == global::CMsgZoomToFocusedElement.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasLeftoffset) {
        Leftoffset = other.Leftoffset;
      }
      if (other.HasTopoffset) {
        Topoffset = other.Topoffset;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgZoomToFocusedElementFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgZoomToFocusedElementFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 16: {
            result.hasLeftoffset = input.ReadUInt32(ref result.leftoffset_);
            break;
          }
          case 24: {
            result.hasTopoffset = input.ReadUInt32(ref result.topoffset_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasLeftoffset {
      get { return result.hasLeftoffset; }
    }
    [global::System.CLSCompliant(false)]
    public uint Leftoffset {
      get { return result.Leftoffset; }
      set { SetLeftoffset(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetLeftoffset(uint value) {
      PrepareBuilder();
      result.hasLeftoffset = true;
      result.leftoffset_ = value;
      return this;
    }
    public Builder ClearLeftoffset() {
      PrepareBuilder();
      result.hasLeftoffset = false;
      result.leftoffset_ = 0;
      return this;
    }
    
    public bool HasTopoffset {
      get { return result.hasTopoffset; }
    }
    [global::System.CLSCompliant(false)]
    public uint Topoffset {
      get { return result.Topoffset; }
      set { SetTopoffset(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetTopoffset(uint value) {
      PrepareBuilder();
      result.hasTopoffset = true;
      result.topoffset_ = value;
      return this;
    }
    public Builder ClearTopoffset() {
      PrepareBuilder();
      result.hasTopoffset = false;
      result.topoffset_ = 0;
      return this;
    }
  }
  static CMsgZoomToFocusedElement() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgCloseFullScreenFlashIfOpen : pb::GeneratedMessage<CMsgCloseFullScreenFlashIfOpen, CMsgCloseFullScreenFlashIfOpen.Builder> {
  private CMsgCloseFullScreenFlashIfOpen() { }
  private static readonly CMsgCloseFullScreenFlashIfOpen defaultInstance = new CMsgCloseFullScreenFlashIfOpen().MakeReadOnly();
  private static readonly string[] _cMsgCloseFullScreenFlashIfOpenFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgCloseFullScreenFlashIfOpenFieldTags = new uint[] { 8 };
  public static CMsgCloseFullScreenFlashIfOpen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgCloseFullScreenFlashIfOpen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgCloseFullScreenFlashIfOpen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgCloseFullScreenFlashIfOpen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgCloseFullScreenFlashIfOpen, CMsgCloseFullScreenFlashIfOpen.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgCloseFullScreenFlashIfOpen__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgCloseFullScreenFlashIfOpenFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgCloseFullScreenFlashIfOpen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgCloseFullScreenFlashIfOpen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgCloseFullScreenFlashIfOpen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgCloseFullScreenFlashIfOpen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgCloseFullScreenFlashIfOpen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgCloseFullScreenFlashIfOpen result;
    
    private CMsgCloseFullScreenFlashIfOpen PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgCloseFullScreenFlashIfOpen original = result;
        result = new CMsgCloseFullScreenFlashIfOpen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgCloseFullScreenFlashIfOpen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgCloseFullScreenFlashIfOpen.Descriptor; }
    }
    
    public override CMsgCloseFullScreenFlashIfOpen DefaultInstanceForType {
      get { return global::CMsgCloseFullScreenFlashIfOpen.DefaultInstance; }
    }
    
    public override CMsgCloseFullScreenFlashIfOpen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgCloseFullScreenFlashIfOpen) {
        return MergeFrom((CMsgCloseFullScreenFlashIfOpen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgCloseFullScreenFlashIfOpen other) {
      if (other == global::CMsgCloseFullScreenFlashIfOpen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgCloseFullScreenFlashIfOpenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgCloseFullScreenFlashIfOpenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgCloseFullScreenFlashIfOpen() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgPauseFullScreenFlashMovieIfOpen : pb::GeneratedMessage<CMsgPauseFullScreenFlashMovieIfOpen, CMsgPauseFullScreenFlashMovieIfOpen.Builder> {
  private CMsgPauseFullScreenFlashMovieIfOpen() { }
  private static readonly CMsgPauseFullScreenFlashMovieIfOpen defaultInstance = new CMsgPauseFullScreenFlashMovieIfOpen().MakeReadOnly();
  private static readonly string[] _cMsgPauseFullScreenFlashMovieIfOpenFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgPauseFullScreenFlashMovieIfOpenFieldTags = new uint[] { 8 };
  public static CMsgPauseFullScreenFlashMovieIfOpen DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgPauseFullScreenFlashMovieIfOpen DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgPauseFullScreenFlashMovieIfOpen ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgPauseFullScreenFlashMovieIfOpen__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgPauseFullScreenFlashMovieIfOpen, CMsgPauseFullScreenFlashMovieIfOpen.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgPauseFullScreenFlashMovieIfOpen__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgPauseFullScreenFlashMovieIfOpenFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgPauseFullScreenFlashMovieIfOpen ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgPauseFullScreenFlashMovieIfOpen MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgPauseFullScreenFlashMovieIfOpen prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgPauseFullScreenFlashMovieIfOpen, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgPauseFullScreenFlashMovieIfOpen cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgPauseFullScreenFlashMovieIfOpen result;
    
    private CMsgPauseFullScreenFlashMovieIfOpen PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgPauseFullScreenFlashMovieIfOpen original = result;
        result = new CMsgPauseFullScreenFlashMovieIfOpen();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgPauseFullScreenFlashMovieIfOpen MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgPauseFullScreenFlashMovieIfOpen.Descriptor; }
    }
    
    public override CMsgPauseFullScreenFlashMovieIfOpen DefaultInstanceForType {
      get { return global::CMsgPauseFullScreenFlashMovieIfOpen.DefaultInstance; }
    }
    
    public override CMsgPauseFullScreenFlashMovieIfOpen BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgPauseFullScreenFlashMovieIfOpen) {
        return MergeFrom((CMsgPauseFullScreenFlashMovieIfOpen) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgPauseFullScreenFlashMovieIfOpen other) {
      if (other == global::CMsgPauseFullScreenFlashMovieIfOpen.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgPauseFullScreenFlashMovieIfOpenFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgPauseFullScreenFlashMovieIfOpenFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgPauseFullScreenFlashMovieIfOpen() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFocusedNodeText : pb::GeneratedMessage<CMsgFocusedNodeText, CMsgFocusedNodeText.Builder> {
  private CMsgFocusedNodeText() { }
  private static readonly CMsgFocusedNodeText defaultInstance = new CMsgFocusedNodeText().MakeReadOnly();
  private static readonly string[] _cMsgFocusedNodeTextFieldNames = new string[] { "browser_handle" };
  private static readonly uint[] _cMsgFocusedNodeTextFieldTags = new uint[] { 8 };
  public static CMsgFocusedNodeText DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFocusedNodeText DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFocusedNodeText ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFocusedNodeText__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFocusedNodeText, CMsgFocusedNodeText.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFocusedNodeText__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFocusedNodeTextFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFocusedNodeText ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFocusedNodeText ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFocusedNodeText MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFocusedNodeText prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFocusedNodeText, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFocusedNodeText cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFocusedNodeText result;
    
    private CMsgFocusedNodeText PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFocusedNodeText original = result;
        result = new CMsgFocusedNodeText();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFocusedNodeText MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFocusedNodeText.Descriptor; }
    }
    
    public override CMsgFocusedNodeText DefaultInstanceForType {
      get { return global::CMsgFocusedNodeText.DefaultInstance; }
    }
    
    public override CMsgFocusedNodeText BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFocusedNodeText) {
        return MergeFrom((CMsgFocusedNodeText) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFocusedNodeText other) {
      if (other == global::CMsgFocusedNodeText.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFocusedNodeTextFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFocusedNodeTextFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
  }
  static CMsgFocusedNodeText() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

[global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
public sealed partial class CMsgFocusedNodeTextResponse : pb::GeneratedMessage<CMsgFocusedNodeTextResponse, CMsgFocusedNodeTextResponse.Builder> {
  private CMsgFocusedNodeTextResponse() { }
  private static readonly CMsgFocusedNodeTextResponse defaultInstance = new CMsgFocusedNodeTextResponse().MakeReadOnly();
  private static readonly string[] _cMsgFocusedNodeTextResponseFieldNames = new string[] { "browser_handle", "value" };
  private static readonly uint[] _cMsgFocusedNodeTextResponseFieldTags = new uint[] { 8, 18 };
  public static CMsgFocusedNodeTextResponse DefaultInstance {
    get { return defaultInstance; }
  }
  
  public override CMsgFocusedNodeTextResponse DefaultInstanceForType {
    get { return DefaultInstance; }
  }
  
  protected override CMsgFocusedNodeTextResponse ThisMessage {
    get { return this; }
  }
  
  public static pbd::MessageDescriptor Descriptor {
    get { return global::Htmlmessages.internal__static_CMsgFocusedNodeTextResponse__Descriptor; }
  }
  
  protected override pb::FieldAccess.FieldAccessorTable<CMsgFocusedNodeTextResponse, CMsgFocusedNodeTextResponse.Builder> InternalFieldAccessors {
    get { return global::Htmlmessages.internal__static_CMsgFocusedNodeTextResponse__FieldAccessorTable; }
  }
  
  public const int BrowserHandleFieldNumber = 1;
  private bool hasBrowserHandle;
  private uint browserHandle_;
  public bool HasBrowserHandle {
    get { return hasBrowserHandle; }
  }
  [global::System.CLSCompliant(false)]
  public uint BrowserHandle {
    get { return browserHandle_; }
  }
  
  public const int ValueFieldNumber = 2;
  private bool hasValue;
  private string value_ = "";
  public bool HasValue {
    get { return hasValue; }
  }
  public string Value {
    get { return value_; }
  }
  
  public override bool IsInitialized {
    get {
      return true;
    }
  }
  
  public override void WriteTo(pb::ICodedOutputStream output) {
    int size = SerializedSize;
    string[] field_names = _cMsgFocusedNodeTextResponseFieldNames;
    if (hasBrowserHandle) {
      output.WriteUInt32(1, field_names[0], BrowserHandle);
    }
    if (hasValue) {
      output.WriteString(2, field_names[1], Value);
    }
    UnknownFields.WriteTo(output);
  }
  
  private int memoizedSerializedSize = -1;
  public override int SerializedSize {
    get {
      int size = memoizedSerializedSize;
      if (size != -1) return size;
      
      size = 0;
      if (hasBrowserHandle) {
        size += pb::CodedOutputStream.ComputeUInt32Size(1, BrowserHandle);
      }
      if (hasValue) {
        size += pb::CodedOutputStream.ComputeStringSize(2, Value);
      }
      size += UnknownFields.SerializedSize;
      memoizedSerializedSize = size;
      return size;
    }
  }
  
  public static CMsgFocusedNodeTextResponse ParseFrom(pb::ByteString data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(pb::ByteString data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(byte[] data) {
    return ((Builder) CreateBuilder().MergeFrom(data)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(byte[] data, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(data, extensionRegistry)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(global::System.IO.Stream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseDelimitedFrom(global::System.IO.Stream input) {
    return CreateBuilder().MergeDelimitedFrom(input).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseDelimitedFrom(global::System.IO.Stream input, pb::ExtensionRegistry extensionRegistry) {
    return CreateBuilder().MergeDelimitedFrom(input, extensionRegistry).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(pb::ICodedInputStream input) {
    return ((Builder) CreateBuilder().MergeFrom(input)).BuildParsed();
  }
  public static CMsgFocusedNodeTextResponse ParseFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
    return ((Builder) CreateBuilder().MergeFrom(input, extensionRegistry)).BuildParsed();
  }
  private CMsgFocusedNodeTextResponse MakeReadOnly() {
    return this;
  }
  
  public static Builder CreateBuilder() { return new Builder(); }
  public override Builder ToBuilder() { return CreateBuilder(this); }
  public override Builder CreateBuilderForType() { return new Builder(); }
  public static Builder CreateBuilder(CMsgFocusedNodeTextResponse prototype) {
    return new Builder(prototype);
  }
  
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Builder : pb::GeneratedBuilder<CMsgFocusedNodeTextResponse, Builder> {
    protected override Builder ThisBuilder {
      get { return this; }
    }
    public Builder() {
      result = DefaultInstance;
      resultIsReadOnly = true;
    }
    internal Builder(CMsgFocusedNodeTextResponse cloneFrom) {
      result = cloneFrom;
      resultIsReadOnly = true;
    }
    
    private bool resultIsReadOnly;
    private CMsgFocusedNodeTextResponse result;
    
    private CMsgFocusedNodeTextResponse PrepareBuilder() {
      if (resultIsReadOnly) {
        CMsgFocusedNodeTextResponse original = result;
        result = new CMsgFocusedNodeTextResponse();
        resultIsReadOnly = false;
        MergeFrom(original);
      }
      return result;
    }
    
    public override bool IsInitialized {
      get { return result.IsInitialized; }
    }
    
    protected override CMsgFocusedNodeTextResponse MessageBeingBuilt {
      get { return PrepareBuilder(); }
    }
    
    public override Builder Clear() {
      result = DefaultInstance;
      resultIsReadOnly = true;
      return this;
    }
    
    public override Builder Clone() {
      if (resultIsReadOnly) {
        return new Builder(result);
      } else {
        return new Builder().MergeFrom(result);
      }
    }
    
    public override pbd::MessageDescriptor DescriptorForType {
      get { return global::CMsgFocusedNodeTextResponse.Descriptor; }
    }
    
    public override CMsgFocusedNodeTextResponse DefaultInstanceForType {
      get { return global::CMsgFocusedNodeTextResponse.DefaultInstance; }
    }
    
    public override CMsgFocusedNodeTextResponse BuildPartial() {
      if (resultIsReadOnly) {
        return result;
      }
      resultIsReadOnly = true;
      return result.MakeReadOnly();
    }
    
    public override Builder MergeFrom(pb::IMessage other) {
      if (other is CMsgFocusedNodeTextResponse) {
        return MergeFrom((CMsgFocusedNodeTextResponse) other);
      } else {
        base.MergeFrom(other);
        return this;
      }
    }
    
    public override Builder MergeFrom(CMsgFocusedNodeTextResponse other) {
      if (other == global::CMsgFocusedNodeTextResponse.DefaultInstance) return this;
      PrepareBuilder();
      if (other.HasBrowserHandle) {
        BrowserHandle = other.BrowserHandle;
      }
      if (other.HasValue) {
        Value = other.Value;
      }
      this.MergeUnknownFields(other.UnknownFields);
      return this;
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input) {
      return MergeFrom(input, pb::ExtensionRegistry.Empty);
    }
    
    public override Builder MergeFrom(pb::ICodedInputStream input, pb::ExtensionRegistry extensionRegistry) {
      PrepareBuilder();
      pb::UnknownFieldSet.Builder unknownFields = null;
      uint tag;
      string field_name;
      while (input.ReadTag(out tag, out field_name)) {
        if(tag == 0 && field_name != null) {
          int field_ordinal = global::System.Array.BinarySearch(_cMsgFocusedNodeTextResponseFieldNames, field_name, global::System.StringComparer.Ordinal);
          if(field_ordinal >= 0)
            tag = _cMsgFocusedNodeTextResponseFieldTags[field_ordinal];
          else {
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            continue;
          }
        }
        switch (tag) {
          case 0: {
            throw pb::InvalidProtocolBufferException.InvalidTag();
          }
          default: {
            if (pb::WireFormat.IsEndGroupTag(tag)) {
              if (unknownFields != null) {
                this.UnknownFields = unknownFields.Build();
              }
              return this;
            }
            if (unknownFields == null) {
              unknownFields = pb::UnknownFieldSet.CreateBuilder(this.UnknownFields);
            }
            ParseUnknownField(input, unknownFields, extensionRegistry, tag, field_name);
            break;
          }
          case 8: {
            result.hasBrowserHandle = input.ReadUInt32(ref result.browserHandle_);
            break;
          }
          case 18: {
            result.hasValue = input.ReadString(ref result.value_);
            break;
          }
        }
      }
      
      if (unknownFields != null) {
        this.UnknownFields = unknownFields.Build();
      }
      return this;
    }
    
    
    public bool HasBrowserHandle {
      get { return result.hasBrowserHandle; }
    }
    [global::System.CLSCompliant(false)]
    public uint BrowserHandle {
      get { return result.BrowserHandle; }
      set { SetBrowserHandle(value); }
    }
    [global::System.CLSCompliant(false)]
    public Builder SetBrowserHandle(uint value) {
      PrepareBuilder();
      result.hasBrowserHandle = true;
      result.browserHandle_ = value;
      return this;
    }
    public Builder ClearBrowserHandle() {
      PrepareBuilder();
      result.hasBrowserHandle = false;
      result.browserHandle_ = 0;
      return this;
    }
    
    public bool HasValue {
      get { return result.hasValue; }
    }
    public string Value {
      get { return result.Value; }
      set { SetValue(value); }
    }
    public Builder SetValue(string value) {
      pb::ThrowHelper.ThrowIfNull(value, "value");
      PrepareBuilder();
      result.hasValue = true;
      result.value_ = value;
      return this;
    }
    public Builder ClearValue() {
      PrepareBuilder();
      result.hasValue = false;
      result.value_ = "";
      return this;
    }
  }
  static CMsgFocusedNodeTextResponse() {
    object.ReferenceEquals(global::Htmlmessages.Descriptor, null);
  }
}

#endregion


#endregion Designer generated code
